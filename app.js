function O(){}function T(e,t){for(let n in t)e[n]=t[n];return e}function Mt(e){return e()}function ee(){return Object.create(null)}function G(e){e.forEach(Mt)}function qt(e){return typeof e=="function"}function S(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function ne(e){return Object.keys(e).length===0}function re(e,...t){if(e==null)return O;let n=e.subscribe(...t);return n.unsubscribe?()=>n.unsubscribe():n}function W(e,t,n){e.$$.on_destroy.push(re(t,n))}function J(e,t,n,r){if(e){let o=Lt(e,t,n,r);return e[0](o)}}function Lt(e,t,n,r){return e[1]&&r?T(n.ctx.slice(),e[1](r(t))):n.ctx}function oe(e,t,n,r){if(e[2]&&r){let o=e[2](r(n));if(t.dirty===void 0)return o;if(typeof o=="object"){let s=[],u=Math.max(t.dirty.length,o.length);for(let l=0;l<u;l+=1)s[l]=t.dirty[l]|o[l];return s}return t.dirty|o}return t.dirty}function ft(e,t,n,r,o,s,u){let l=oe(t,r,o,s);if(l){let i=Lt(t,n,r,u);e.p(i,l)}}function ie(e,t,n,r,o,s,u,l){let i=u(o)|oe(t,r,o,s);if(i){let f=Lt(t,n,r,l);e.p(f,i)}}function rt(e){let t={};for(let n in e)n[0]!=="$"&&(t[n]=e[n]);return t}var Dn=typeof window!="undefined";var Pn=new Set;function vt(e,t){e.appendChild(t)}function E(e,t,n){e.insertBefore(t,n||null)}function x(e){e.parentNode.removeChild(e)}function L(e){return document.createElement(e)}function K(e){return document.createTextNode(e)}function It(){return K(" ")}function N(){return K("")}function Ht(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function Ue(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function at(e,t){let n=Object.getOwnPropertyDescriptors(e.__proto__);for(let r in t)t[r]==null?e.removeAttribute(r):r==="style"?e.style.cssText=t[r]:r==="__value"?e.value=e[r]=t[r]:n[r]&&n[r].set?e[r]=t[r]:Ue(e,r,t[r])}function Me(e){return Array.from(e.childNodes)}function se(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function qe(e,t){let n=document.createEvent("CustomEvent");return n.initCustomEvent(e,!1,!1,t),n}var Tn=new Set;var Ft;function xt(e){Ft=e}function dt(){if(!Ft)throw new Error("Function called outside component initialization");return Ft}function Bt(e){dt().$$.on_mount.push(e)}function pt(e){dt().$$.on_destroy.push(e)}function zt(){let e=dt();return(t,n)=>{let r=e.$$.callbacks[t];if(r){let o=qe(t,n);r.slice().forEach(s=>{s.call(e,o)})}}}function _t(e,t){dt().$$.context.set(e,t)}function ot(e){return dt().$$.context.get(e)}var ht=[];var mt=[],Et=[],le=[],Le=Promise.resolve(),Xt=!1;function Ie(){Xt||(Xt=!0,Le.then(ce))}function Wt(e){Et.push(e)}var Kt=!1,Yt=new Set;function ce(){if(!Kt){Kt=!0;do{for(let e=0;e<ht.length;e+=1){let t=ht[e];xt(t),He(t.$$)}for(xt(null),ht.length=0;mt.length;)mt.pop()();for(let e=0;e<Et.length;e+=1){let t=Et[e];Yt.has(t)||(Yt.add(t),t())}Et.length=0}while(ht.length);for(;le.length;)le.pop()();Xt=!1,Kt=!1,Yt.clear()}}function He(e){if(e.fragment!==null){e.update(),G(e.before_update);let t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Wt)}}var Ot=new Set,V;function U(){V={r:0,c:[],p:V}}function M(){V.r||G(V.c),V=V.p}function w(e,t){e&&e.i&&(Ot.delete(e),e.i(t))}function v(e,t,n,r){if(e&&e.o){if(Ot.has(e))return;Ot.add(e),V.c.push(()=>{Ot.delete(e),r&&(n&&e.d(1),r())}),e.o(t)}}var Nn=typeof window!="undefined"?window:typeof globalThis!="undefined"?globalThis:global;function Q(e,t){let n={},r={},o={$$scope:1},s=e.length;for(;s--;){let u=e[s],l=t[s];if(l){for(let i in u)i in l||(r[i]=1);for(let i in l)o[i]||(n[i]=l[i],o[i]=1);e[s]=l}else for(let i in u)o[i]=1}for(let u in r)u in n||(n[u]=void 0);return n}function Ct(e){return typeof e=="object"&&e!==null?e:{}}var Un=new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);function R(e){e&&e.c()}function j(e,t,n,r){let{fragment:o,on_mount:s,on_destroy:u,after_update:l}=e.$$;o&&o.m(t,n),r||Wt(()=>{let i=s.map(Mt).filter(qt);u?u.push(...i):G(i),e.$$.on_mount=[]}),l.forEach(Wt)}function C(e,t){let n=e.$$;n.fragment!==null&&(G(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function Be(e,t){e.$$.dirty[0]===-1&&(ht.push(e),Ie(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function q(e,t,n,r,o,s,u=[-1]){let l=Ft;xt(e);let i=e.$$={fragment:null,ctx:null,props:s,update:O,not_equal:o,bound:ee(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:t.context||[]),callbacks:ee(),dirty:u,skip_bound:!1},f=!1;if(i.ctx=n?n(e,t.props||{},(c,_,...m)=>{let a=m.length?m[0]:_;return i.ctx&&o(i.ctx[c],i.ctx[c]=a)&&(!i.skip_bound&&i.bound[c]&&i.bound[c](a),f&&Be(e,c)),_}):[],i.update(),f=!0,G(i.before_update),i.fragment=r?r(i.ctx):!1,t.target){if(t.hydrate){let c=Me(t.target);i.fragment&&i.fragment.l(c),c.forEach(x)}else i.fragment&&i.fragment.c();t.intro&&w(e.$$.fragment),j(e,t.target,t.anchor,t.customElement),ce()}xt(l)}var ze;typeof HTMLElement=="function"&&(ze=class extends HTMLElement{constructor(){super();this.attachShadow({mode:"open"})}connectedCallback(){let{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(Mt).filter(qt);for(let t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(e,t,n){this[e]=n}disconnectedCallback(){G(this.$$.on_disconnect)}$destroy(){C(this,1),this.$destroy=O}$on(e,t){let n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{let r=n.indexOf(t);r!==-1&&n.splice(r,1)}}$set(e){this.$$set&&!ne(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});var A=class{$destroy(){C(this,1),this.$destroy=O}$on(t,n){let r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{let o=r.indexOf(n);o!==-1&&r.splice(o,1)}}$set(t){this.$$set&&!ne(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}};var it=[];function Y(e,t=O){let n,r=[];function o(l){if(S(e,l)&&(e=l,n)){let i=!it.length;for(let f=0;f<r.length;f+=1){let c=r[f];c[1](),it.push(c,e)}if(i){for(let f=0;f<it.length;f+=2)it[f][0](it[f+1]);it.length=0}}}function s(l){o(l(e))}function u(l,i=O){let f=[l,i];return r.push(f),r.length===1&&(n=t(o)||O),l(e),()=>{let c=r.indexOf(f);c!==-1&&r.splice(c,1),r.length===0&&(n(),n=null)}}return{set:o,update:s,subscribe:u}}var Xe=Object.create,Zt=Object.defineProperty,We=Object.getOwnPropertyDescriptor,Ke=Object.getOwnPropertyNames,Ye=Object.getPrototypeOf,Ze=Object.prototype.hasOwnProperty,Ge=e=>Zt(e,"__esModule",{value:!0}),St=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Je=(e,t,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of Ke(t))!Ze.call(e,r)&&r!=="default"&&Zt(e,r,{get:()=>t[r],enumerable:!(n=We(t,r))||n.enumerable});return e},Ve=e=>Je(Ge(Zt(e!=null?Xe(Ye(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e),Qe=St((e,t)=>{"use strict";t.exports=n=>encodeURIComponent(n).replace(/[!'()*]/g,r=>`%${r.charCodeAt(0).toString(16).toUpperCase()}`)}),$e=St((e,t)=>{"use strict";var n="%[a-f0-9]{2}",r=new RegExp(n,"gi"),o=new RegExp("("+n+")+","gi");function s(i,f){try{return decodeURIComponent(i.join(""))}catch(m){}if(i.length===1)return i;f=f||1;var c=i.slice(0,f),_=i.slice(f);return Array.prototype.concat.call([],s(c),s(_))}function u(i){try{return decodeURIComponent(i)}catch(_){for(var f=i.match(r),c=1;c<f.length;c++)i=s(f,c).join(""),f=i.match(r);return i}}function l(i){for(var f={"%FE%FF":"\uFFFD\uFFFD","%FF%FE":"\uFFFD\uFFFD"},c=o.exec(i);c;){try{f[c[0]]=decodeURIComponent(c[0])}catch(p){var _=u(c[0]);_!==c[0]&&(f[c[0]]=_)}c=o.exec(i)}f["%C2"]="\uFFFD";for(var m=Object.keys(f),a=0;a<m.length;a++){var d=m[a];i=i.replace(new RegExp(d,"g"),f[d])}return i}t.exports=function(i){if(typeof i!="string")throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof i+"`");try{return i=i.replace(/\+/g," "),decodeURIComponent(i)}catch(f){return l(i)}}}),tn=St((e,t)=>{"use strict";t.exports=(n,r)=>{if(!(typeof n=="string"&&typeof r=="string"))throw new TypeError("Expected the arguments to be of type `string`");if(r==="")return[n];let o=n.indexOf(r);return o===-1?[n]:[n.slice(0,o),n.slice(o+r.length)]}}),en=St(e=>{"use strict";var t=Qe(),n=$e(),r=tn();function o(a){switch(a.arrayFormat){case"index":return d=>(p,h)=>{let g=p.length;return h===void 0?p:h===null?[...p,[u(d,a),"[",g,"]"].join("")]:[...p,[u(d,a),"[",u(g,a),"]=",u(h,a)].join("")]};case"bracket":return d=>(p,h)=>h===void 0?p:h===null?[...p,[u(d,a),"[]"].join("")]:[...p,[u(d,a),"[]=",u(h,a)].join("")];case"comma":return d=>(p,h,g)=>h==null||h.length===0?p:g===0?[[u(d,a),"=",u(h,a)].join("")]:[[p,u(h,a)].join(",")];default:return d=>(p,h)=>h===void 0?p:h===null?[...p,u(d,a)]:[...p,[u(d,a),"=",u(h,a)].join("")]}}function s(a){let d;switch(a.arrayFormat){case"index":return(p,h,g)=>{if(d=/\[(\d*)\]$/.exec(p),p=p.replace(/\[\d*\]$/,""),!d){g[p]=h;return}g[p]===void 0&&(g[p]={}),g[p][d[1]]=h};case"bracket":return(p,h,g)=>{if(d=/(\[\])$/.exec(p),p=p.replace(/\[\]$/,""),!d){g[p]=h;return}if(g[p]===void 0){g[p]=[h];return}g[p]=[].concat(g[p],h)};case"comma":return(p,h,g)=>{let F=typeof h=="string"&&h.split("").indexOf(",")>-1?h.split(","):h;g[p]=F};default:return(p,h,g)=>{if(g[p]===void 0){g[p]=h;return}g[p]=[].concat(g[p],h)}}}function u(a,d){return d.encode?d.strict?t(a):encodeURIComponent(a):a}function l(a,d){return d.decode?n(a):a}function i(a){return Array.isArray(a)?a.sort():typeof a=="object"?i(Object.keys(a)).sort((d,p)=>Number(d)-Number(p)).map(d=>a[d]):a}function f(a){let d=a.indexOf("#");return d!==-1&&(a=a.slice(0,d)),a}function c(a){a=f(a);let d=a.indexOf("?");return d===-1?"":a.slice(d+1)}function _(a,d){return d.parseNumbers&&!Number.isNaN(Number(a))&&typeof a=="string"&&a.trim()!==""?a=Number(a):d.parseBooleans&&a!==null&&(a.toLowerCase()==="true"||a.toLowerCase()==="false")&&(a=a.toLowerCase()==="true"),a}function m(a,d){d=Object.assign({decode:!0,sort:!0,arrayFormat:"none",parseNumbers:!1,parseBooleans:!1},d);let p=s(d),h=Object.create(null);if(typeof a!="string"||(a=a.trim().replace(/^[?#&]/,""),!a))return h;for(let g of a.split("&")){let[F,b]=r(g.replace(/\+/g," "),"=");b=b===void 0?null:l(b,d),p(l(F,d),b,h)}for(let g of Object.keys(h)){let F=h[g];if(typeof F=="object"&&F!==null)for(let b of Object.keys(F))F[b]=_(F[b],d);else h[g]=_(F,d)}return d.sort===!1?h:(d.sort===!0?Object.keys(h).sort():Object.keys(h).sort(d.sort)).reduce((g,F)=>{let b=h[F];return Boolean(b)&&typeof b=="object"&&!Array.isArray(b)?g[F]=i(b):g[F]=b,g},Object.create(null))}e.extract=c,e.parse=m,e.stringify=(a,d)=>{if(!a)return"";d=Object.assign({encode:!0,strict:!0,arrayFormat:"none"},d);let p=o(d),h=Object.keys(a);return d.sort!==!1&&h.sort(d.sort),h.map(g=>{let F=a[g];return F===void 0?"":F===null?u(g,d):Array.isArray(F)?F.reduce(p(g),[]).join("&"):u(g,d)+"="+u(F,d)}).filter(g=>g.length>0).join("&")},e.parseUrl=(a,d)=>({url:f(a).split("?")[0]||"",query:m(c(a),d)})}),ue=Ve(en()),gt=function(e){function t(n,r){var o="Unreachable '"+(n!=="/"?n.replace(/\/$/,""):n)+"', segment '"+r+"' is not defined";e.call(this,o),this.message=o,this.route=n,this.path=r}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);function fe(e,t){var n,r,o=-100,s=[];n=e.replace(/[-$.]/g,"\\$&").replace(/\(/g,"(?:").replace(/\)/g,")?").replace(/([:*]\w+)(?:<([^<>]+?)>)?/g,function(i,f,c){return s.push(f.substr(1)),f.charAt()===":"?(o+=100,"((?!#)"+(c||"[^#/]+?")+")"):(r=!0,o+=500,"((?!#)"+(c||"[^#]+?")+")")});try{n=new RegExp("^"+n+"$")}catch(i){throw new TypeError("Invalid route expression, given '"+t+"'")}var u=e.includes("#")?.5:1,l=e.length*o*u;return{keys:s,regex:n,_depth:l,_isSplat:r}}var st=function(e,t){var n=fe(e,t),r=n.keys,o=n.regex,s=n._depth,u=n._isSplat;return{_isSplat:u,_depth:s,match:function(l){var i=l.match(o);if(i)return r.reduce(function(f,c,_){return f[c]=typeof i[_+1]=="string"?decodeURIComponent(i[_+1]):null,f},{})}}};st.push=function(e,t,n,r){var o=t[e]||(t[e]={});return o.pattern||(o.pattern=new st(e,r),o.route=(n||"").replace(/\/$/,"")||"/"),t.keys=t.keys||[],t.keys.includes(e)||(t.keys.push(e),st.sort(t)),o};st.sort=function(e){e.keys.sort(function(t,n){return e[t].pattern._depth-e[n].pattern._depth})};function ae(e,t){return""+(t&&t!=="/"?t:"")+(e||"")}function jt(e,t){var n=e.match(/<[^<>]*\/[^<>]*>/);if(n)throw new TypeError("RegExp cannot contain slashes, given '"+n+"'");var r=e.split(/(?=\/|#)/),o=[];r[0]!=="/"&&r.unshift("/"),r.some(function(s,u){var l=o.slice(1).concat(s).join("")||null,i=r.slice(u+1).join("")||null,f=t(s,l,i?""+(s!=="/"?s:"")+i:null);return o.push(s),f})}function nn(e,t,n){var r={},o=[],s;return jt(e,function(u,l,i){var f;if(!t.keys)throw new gt(e,u);if(t.keys.some(function(c){if(n.includes(c))return!1;var _=t[c].pattern,m=_.match,a=_._isSplat,d=m(a&&i||u);if(d){if(Object.assign(r,d),t[c].route){var p=Object.assign({},t[c].info),h=!1;p.exact?h=i===null:h=!(u&&l===null)||u===l||a||!i,p.matches=h,p.params=Object.assign({},r),p.route=t[c].route,p.path=a&&i||l||u,o.push(p)}return i===null&&!t[c].keys||(c!=="/"&&n.push(c),s=a,t=t[c],f=!0),!0}return!1}),!(f||t.keys.some(function(c){return t[c].pattern.match(u)})))throw new gt(e,u);return s||!f}),o}function de(e,t,n){for(var r=nn.bind(null,e,t),o=[];n>0;){n-=1;try{return r(o)}catch(s){if(n>0)return r(o);throw s}}}function rn(e,t,n,r){var o=ae(e,n),s=t,u;return r&&r.nested!==!0&&(u=r.key,delete r.key),jt(o,function(l,i){s=st.push(l,s,i,o),l!=="/"&&(s.info=s.info||Object.assign({},r))}),s.info=s.info||Object.assign({},r),u&&(s.info.key=u),o}function on(e,t,n){var r=ae(e,n),o=t,s=null,u=null;if(jt(r,function(i){if(!o)return s=null,!0;if(!o.keys)throw new gt(e,i);u=i,s=o,o=o[u]}),!(s&&u))throw new gt(e,u);if(s===t&&(s=t["/"]),s.route!==u){var l=s.keys.indexOf(u);if(l===-1)throw new gt(e,u);s.keys.splice(l,1),st.sort(s),delete s[u]}o.route===s.route&&(!o.info||o.info.key===s.info.key)&&delete s.info}var pe=function(){var e={},t=[];return{resolve:function(n,r){var o=n.split("?")[0],s=[];jt(o,function(u,l,i){try{r(null,de(l,e,1).filter(function(f){return s.includes(f.path)?!1:(s.push(f.path),!0)}))}catch(f){r(f,[])}})},mount:function(n,r){n!=="/"&&t.push(n),r(),t.pop()},find:function(n,r){return de(n,e,r===!0?2:r||1)},add:function(n,r){return rn(n,e,t.join(""),r)},rm:function(n){return on(n,e,t.join(""))}}};pe.matches=function(e,t){return fe(e,t).regex.test(t)};var Rt=pe,_e=ue.parse,he=ue.stringify;var bt={},me=document.getElementsByTagName("base"),sn=me[0]&&me[0].href||"/",$=sn.replace(window.location.origin,""),D=Y({path:"/",query:{},params:{},initial:!0}),yt={},Gt={},ge=window.location.origin==="null";function be(e){return typeof e=="boolean"&&(ge=!!e),ge}Object.defineProperty(D,"hashchange",{set:e=>be(e),get:()=>be(),configurable:!1,enumerable:!1});function Jt(e,t,n){let r=D.hashchange?window.location.hash.replace("#",""):window.location.pathname;e.charAt()!=="/"&&(e=r+e),r+window.location.hash+window.location.search!==e&&t(e),typeof n=="function"&&n()}function I(e,t){return e!=="/"||t?e.replace(/\/$/,""):e}function wt(e,t){let{reload:n,replace:r,params:o,queryParams:s}=t||{};if(!e||typeof e!="string"||e[0]!=="/"&&e[0]!=="#")throw new Error(`Expecting '/${e}' or '#${e}', given '${e}'`);if(o&&(e=e.replace(/:([a-zA-Z][a-zA-Z0-9_-]*)/g,(u,l)=>o[l])),s){let u=he(s);u&&(e+=`?${u}`)}if(D.hashchange){let u=e.replace(/^#|#$/g,"");$!=="/"&&(u=u.replace(I($),"")),window.location.hash=u!=="/"?u:"";return}if(n||!window.history.pushState||!window.dispatchEvent){window.location.href=e;return}Jt(e,u=>{window.history[r?"replaceState":"pushState"](null,"",u),window.dispatchEvent(new Event("popstate"))})}function At(e,t){let{props:n,...r}=e;return t.forEach(o=>{delete r[o]}),{...n,...r}}function Dt(e,t,n){return bt[[e,t,n]]||(n!==!0&&t.indexOf(e)===0?bt[[e,t,n]]=/^[#/?]?$/.test(t.substr(e.length,1)):e.includes("*")||e.includes(":")?bt[[e,t,n]]=Rt.matches(e,t):bt[[e,t,n]]=I(t)===e),bt[[e,t,n]]}function ye(e){return e&&typeof e.then=="function"}function Pt(e){return e&&e.prototype}var lt=new Rt,tt=Y({}),ct={},et={},Vt=[],Tt=0,we,Qt;D.subscribe(e=>{et.router=e});tt.subscribe(e=>{et.routeInfo=e});function $t(e,t){tt.update(n=>({...n,[t]:{...et.router,failure:e}}))}function ln(e,t){let n=[];return e.some(r=>{if(r.key&&r.matches&&!et.routeInfo[r.key]){if(r.redirect&&(r.condition===null||r.condition(et.router)!==!0))return r.exact&&et.router.path!==r.path?!1:(wt(r.redirect),!0);r.exact&&n.push(r.key),Object.assign(t,r.params),tt.update(o=>({...o,[r.key]:{...et.router,...r}}))}return!1}),n}function cn(){let e=D.hashchange?window.location.hash||"/":window.location.href.replace(window.location.origin,""),t;if($!=="/"&&(e=e.replace(I($),"")),/^#[\w-]+$/.test(window.location.hash)&&document.querySelector(window.location.hash)&&Qt===e.split("#")[0])return;let[n,r]=e.replace("/#","#").replace(/^#\//,"/").split("?"),o=n.replace(/\/?$/,"/"),s=_e(r),u={},l=[];tt.set({}),Qt!==e&&(Qt=e,D.set({path:I(o),query:s,params:u})),lt.resolve(o,(c,_)=>{if(c){t=c;return}l.push(...ln(_,u))});let i={};t&&t.path!=="/"?l.reduce((c,_)=>(c[_]=null,c),i):t=null,Vt.forEach(c=>c()),Vt=[];try{lt.find(I(o)).forEach(c=>{c.exact&&!c.matches&&(i[c.key]=null)})}catch(c){}tt.update(c=>({...c,...i}));let f;Object.keys(ct).forEach(c=>{if(Dt(c,o,!1)){let _=ct[c].callback;_(t),Vt.push(_)}!f&&ct[c].fallback&&(f=ct[c].fallback)}),t&&f&&$t(t,f)}function kt(){clearTimeout(we),we=setTimeout(cn)}function ke(e,t,n){return Tt||window.addEventListener("popstate",kt,!1),(!ct[e]||t)&&(ct[e]={fallback:t,callback:n}),Tt+=1,()=>{Tt-=1,Tt||window.removeEventListener("popstate",kt,!1)}}function ve(e){let t,n=e[7].default,r=J(n,e,e[6],null);return{c(){r&&r.c()},m(o,s){r&&r.m(o,s),t=!0},p(o,s){r&&r.p&&(!t||s&64)&&ft(r,n,o,o[6],s,null,null)},i(o){t||(w(r,o),t=!0)},o(o){v(r,o),t=!1},d(o){r&&r.d(o)}}}function un(e){let t,n,r=!e[0]&&ve(e);return{c(){r&&r.c(),t=N()},m(o,s){r&&r.m(o,s),E(o,t,s),n=!0},p(o,[s]){o[0]?r&&(U(),v(r,1,1,()=>{r=null}),M()):r?(r.p(o,s),s&1&&w(r,1)):(r=ve(o),r.c(),w(r,1),r.m(t.parentNode,t))},i(o){n||(w(r),n=!0)},o(o){v(r),n=!1},d(o){r&&r.d(o),o&&x(t)}}}function fn(e){try{lt.rm(e)}catch(t){}kt()}function an(e,t,n){let r,o;W(e,D,b=>n(5,o=b));let{$$slots:s={},$$scope:u}=t,l,i,f,{path:c="/"}=t,{pending:_=null}=t,{disabled:m=!1}=t,{condition:a=null}=t,d=ot(yt),p=d?d.basePath:Y(c);W(e,p,b=>n(11,r=b));let h=r!==c&&r!=="/"?`${r}${c!=="/"?c:""}`:c;function g(b,X,nt){b=b||Math.random().toString(36).substr(2);let Z=!X.substr(1).includes("/"),B={key:b,nested:Z,...nt},z;return lt.mount(h,()=>{z=lt.add(X,B),f=B.fallback&&b||f}),kt(),[b,z]}function F(b){i=b,i&&f&&$t(i,f)}return Bt(()=>{l=ke(h,f,F)}),pt(()=>{l&&l()}),_t(yt,{basePath:p,assignRoute:g,unassignRoute:fn,pendingComponent:_}),e.$$set=b=>{"path"in b&&n(2,c=b.path),"pending"in b&&n(3,_=b.pending),"disabled"in b&&n(0,m=b.disabled),"condition"in b&&n(4,a=b.condition),"$$scope"in b&&n(6,u=b.$$scope)},e.$$.update=()=>{if(e.$$.dirty&48){t:a&&n(0,m=!a(o))}},[m,p,c,_,a,o,u,s]}var Fe=class extends A{constructor(t){super();q(this,t,an,un,S,{path:2,pending:3,disabled:0,condition:4})}},te=Fe;var dn=e=>e&8>0?-1:0,pn=e=>({}),xe=e=>({...e[3]});function Ee(e){let t,n,r,o,s=[mn,hn,_n],u=[];function l(i,f){return i[4]?i[0]?1:2:0}return t=l(e,-1),n=u[t]=s[t](e),{c(){n.c(),r=N()},m(i,f){u[t].m(i,f),E(i,r,f),o=!0},p(i,f){let c=t;t=l(i,f),t===c?u[t].p(i,f):(U(),v(u[c],1,1,()=>{u[c]=null}),M(),n=u[t],n?n.p(i,f):(n=u[t]=s[t](i),n.c()),w(n,1),n.m(r.parentNode,r))},i(i){o||(w(n),o=!0)},o(i){v(n),o=!1},d(i){u[t].d(i),i&&x(r)}}}function _n(e){let t,n=e[16].default,r=J(n,e,e[15],xe);return{c(){r&&r.c()},m(o,s){r&&r.m(o,s),t=!0},p(o,s){r&&r.p&&(!t||s&32776)&&ie(r,n,o,o[15],s,pn,dn,xe)},i(o){t||(w(r,o),t=!0)},o(o){v(r,o),t=!1},d(o){r&&r.d(o)}}}function hn(e){let t,n,r,o=[e[3]];var s=e[0];function u(l){let i={};for(let f=0;f<o.length;f+=1)i=T(i,o[f]);return{props:i}}return s&&(t=new s(u(e))),{c(){t&&R(t.$$.fragment),n=N()},m(l,i){t&&j(t,l,i),E(l,n,i),r=!0},p(l,i){let f=i&8?Q(o,[Ct(l[3])]):{};if(s!==(s=l[0])){if(t){U();let c=t;v(c.$$.fragment,1,0,()=>{C(c,1)}),M()}s?(t=new s(u(l)),R(t.$$.fragment),w(t.$$.fragment,1),j(t,n.parentNode,n)):t=null}else s&&t.$set(f)},i(l){r||(t&&w(t.$$.fragment,l),r=!0)},o(l){t&&v(t.$$.fragment,l),r=!1},d(l){l&&x(n),t&&C(t,l)}}}function mn(e){let t,n,r=(e[1]||e[5])&&Oe(e);return{c(){r&&r.c(),t=N()},m(o,s){r&&r.m(o,s),E(o,t,s),n=!0},p(o,s){o[1]||o[5]?r?(r.p(o,s),s&2&&w(r,1)):(r=Oe(o),r.c(),w(r,1),r.m(t.parentNode,t)):r&&(U(),v(r,1,1,()=>{r=null}),M())},i(o){n||(w(r),n=!0)},o(o){v(r),n=!1},d(o){r&&r.d(o),o&&x(t)}}}function Oe(e){let t,n,r,o,s,u,l=[yn,bn,gn],i=[];function f(c,_){return _&2&&(t=!!Pt(c[1])),t?0:(n==null&&(n=!!Pt(c[5])),n?1:2)}return r=f(e,-1),o=i[r]=l[r](e),{c(){o.c(),s=N()},m(c,_){i[r].m(c,_),E(c,s,_),u=!0},p(c,_){let m=r;r=f(c,_),r===m?i[r].p(c,_):(U(),v(i[m],1,1,()=>{i[m]=null}),M(),o=i[r],o?o.p(c,_):(o=i[r]=l[r](c),o.c()),w(o,1),o.m(s.parentNode,s))},i(c){u||(w(o),u=!0)},o(c){v(o),u=!1},d(c){i[r].d(c),c&&x(s)}}}function gn(e){let t=(e[1]||e[5])+"",n;return{c(){n=K(t)},m(r,o){E(r,n,o)},p(r,o){o&2&&t!==(t=(r[1]||r[5])+"")&&se(n,t)},i:O,o:O,d(r){r&&x(n)}}}function bn(e){let t,n,r,o=[e[3]];var s=e[5];function u(l){let i={};for(let f=0;f<o.length;f+=1)i=T(i,o[f]);return{props:i}}return s&&(t=new s(u(e))),{c(){t&&R(t.$$.fragment),n=N()},m(l,i){t&&j(t,l,i),E(l,n,i),r=!0},p(l,i){let f=i&8?Q(o,[Ct(l[3])]):{};if(s!==(s=l[5])){if(t){U();let c=t;v(c.$$.fragment,1,0,()=>{C(c,1)}),M()}s?(t=new s(u(l)),R(t.$$.fragment),w(t.$$.fragment,1),j(t,n.parentNode,n)):t=null}else s&&t.$set(f)},i(l){r||(t&&w(t.$$.fragment,l),r=!0)},o(l){t&&v(t.$$.fragment,l),r=!1},d(l){l&&x(n),t&&C(t,l)}}}function yn(e){let t,n,r,o=[e[3]];var s=e[1];function u(l){let i={};for(let f=0;f<o.length;f+=1)i=T(i,o[f]);return{props:i}}return s&&(t=new s(u(e))),{c(){t&&R(t.$$.fragment),n=N()},m(l,i){t&&j(t,l,i),E(l,n,i),r=!0},p(l,i){let f=i&8?Q(o,[Ct(l[3])]):{};if(s!==(s=l[1])){if(t){U();let c=t;v(c.$$.fragment,1,0,()=>{C(c,1)}),M()}s?(t=new s(u(l)),R(t.$$.fragment),w(t.$$.fragment,1),j(t,n.parentNode,n)):t=null}else s&&t.$set(f)},i(l){r||(t&&w(t.$$.fragment,l),r=!0)},o(l){t&&v(t.$$.fragment,l),r=!1},d(l){l&&x(n),t&&C(t,l)}}}function wn(e){let t,n,r=e[2]&&Ee(e);return{c(){r&&r.c(),t=N()},m(o,s){r&&r.m(o,s),E(o,t,s),n=!0},p(o,[s]){o[2]?r?(r.p(o,s),s&4&&w(r,1)):(r=Ee(o),r.c(),w(r,1),r.m(t.parentNode,t)):r&&(U(),v(r,1,1,()=>{r=null}),M())},i(o){n||(w(r),n=!0)},o(o){v(r),n=!1},d(o){r&&r.d(o),o&&x(t)}}}function kn(e,t,n){let r,o;W(e,tt,k=>n(14,o=k));let{$$slots:s={},$$scope:u}=t,{key:l=null}=t,{path:i="/"}=t,{exact:f=null}=t,{pending:c=null}=t,{disabled:_=!1}=t,{fallback:m=null}=t,{component:a=null}=t,{condition:d=null}=t,{redirect:p=null}=t,h=["key","path","exact","pending","disabled","fallback","component","condition","redirect"],g=ot(Gt),F=ot(yt),{assignRoute:b,unassignRoute:X,pendingComponent:nt}=F||{},Z=g?g.routePath:Y(i);W(e,Z,k=>n(18,r=k));let B=null,z={},y,P,H=r!==i&&r!=="/"?`${r}${i!=="/"?i:""}`:i;function ut(){let k=i!==H&&H.substr(-1)!=="/"?`${H}/`:H;n(7,[l,y]=b(l,k,{condition:d,redirect:p,fallback:m,exact:f}),l)}return ut(),pt(()=>{X&&X(y)}),_t(Gt,{routePath:Z}),e.$$set=k=>{n(26,t=T(T({},t),rt(k))),"key"in k&&n(7,l=k.key),"path"in k&&n(8,i=k.path),"exact"in k&&n(9,f=k.exact),"pending"in k&&n(1,c=k.pending),"disabled"in k&&n(10,_=k.disabled),"fallback"in k&&n(11,m=k.fallback),"component"in k&&n(0,a=k.component),"condition"in k&&n(12,d=k.condition),"redirect"in k&&n(13,p=k.redirect),"$$scope"in k&&n(15,u=k.$$scope)},e.$$.update=()=>{t:l&&(n(2,B=!_&&o[l]),n(3,z=At(t,h)),n(3,z.router=B,z));if(e.$$.dirty&5){t:B&&(a?Pt(a)?n(4,P=!0):ye(a)?a.then(k=>{n(0,a=k.default),n(4,P=!0)}):a().then(k=>{n(0,a=k.default),n(4,P=!0)}):n(4,P=!0))}},t=rt(t),[a,c,B,z,P,nt,Z,l,i,f,_,m,d,p,o,u,s]}var Ce=class extends A{constructor(t){super();q(this,t,kn,wn,S,{key:7,path:8,exact:9,pending:1,disabled:10,fallback:11,component:0,condition:12,redirect:13})}},Nt=Ce;function vn(e){let t,n,r,o,s,u=e[17].default,l=J(u,e,e[16],null),i=[e[6],{href:n=I(e[5]||e[1])},{class:e[0]},{title:e[2]}],f={};for(let c=0;c<i.length;c+=1)f=T(f,i[c]);return{c(){t=L("a"),l&&l.c(),at(t,f)},m(c,_){E(c,t,_),l&&l.m(t,null),e[19](t),r=!0,o||(s=Ht(t,"click",e[8]),o=!0)},p(c,_){l&&l.p&&(!r||_&65536)&&ft(l,u,c,c[16],_,null,null),at(t,f=Q(i,[_&64&&c[6],(!r||_&34&&n!==(n=I(c[5]||c[1])))&&{href:n},(!r||_&1)&&{class:c[0]},(!r||_&4)&&{title:c[2]}]))},i(c){r||(w(l,c),r=!0)},o(c){v(l,c),r=!1},d(c){c&&x(t),l&&l.d(c),e[19](null),o=!1,s()}}}function Fn(e){let t,n,r,o,s=e[17].default,u=J(s,e,e[16],null),l=[e[6],{class:e[0]},{title:e[2]}],i={};for(let f=0;f<l.length;f+=1)i=T(i,l[f]);return{c(){t=L("button"),u&&u.c(),at(t,i)},m(f,c){E(f,t,c),u&&u.m(t,null),e[18](t),n=!0,r||(o=Ht(t,"click",e[7]),r=!0)},p(f,c){u&&u.p&&(!n||c&65536)&&ft(u,s,f,f[16],c,null,null),at(t,i=Q(l,[c&64&&f[6],(!n||c&1)&&{class:f[0]},(!n||c&4)&&{title:f[2]}]))},i(f){n||(w(u,f),n=!0)},o(f){v(u,f),n=!1},d(f){f&&x(t),u&&u.d(f),e[18](null),r=!1,o()}}}function xn(e){let t,n,r,o,s=[Fn,vn],u=[];function l(i,f){return i[3]?0:1}return t=l(e,-1),n=u[t]=s[t](e),{c(){n.c(),r=N()},m(i,f){u[t].m(i,f),E(i,r,f),o=!0},p(i,[f]){let c=t;t=l(i,f),t===c?u[t].p(i,f):(U(),v(u[c],1,1,()=>{u[c]=null}),M(),n=u[t],n?n.p(i,f):(n=u[t]=s[t](i),n.c()),w(n,1),n.m(r.parentNode,r))},i(i){o||(w(n),o=!0)},o(i){v(n),o=!1},d(i){u[t].d(i),i&&x(r)}}}function En(e,t,n){let r,o;W(e,D,y=>n(15,o=y));let{$$slots:s={},$$scope:u}=t,l,i,{class:f=""}=t,c=null,{go:_=null}=t,{open:m=null}=t,{href:a=""}=t,{title:d=""}=t,{button:p=!1}=t,{exact:h=!1}=t,{reload:g=!1}=t,{replace:F=!1}=t,b=["go","open","href","class","title","button","exact","reload","replace"],X=zt();function nt(y){if(y.preventDefault(),typeof _=="string"&&window.history.length>1){_==="back"?window.history.back():_==="fwd"?window.history.forward():window.history.go(parseInt(_,10));return}if(!c&&a!==""){if(m){let P=typeof m=="string"?m:"",H=P.match(/width=(\d+)/),ut=P.match(/height=(\d+)/);H&&(P+=`,left=${(window.screen.width-H[1])/2}`),ut&&(P+=`,top=${(window.screen.height-ut[1])/2}`),H&&!ut&&(P+=`,height=${H[1]},top=${(window.screen.height-H[1])/2}`);let k=window.open(a,"",P),Ne=setInterval(()=>{k.closed&&(X("close"),clearInterval(Ne))},120)}else window.location.href=a;return}Jt(a,()=>{wt(c||"/",{reload:g,replace:F})},()=>X("click",y))}function Z(y){y.metaKey||y.ctrlKey||y.button!==0||nt(y)}function B(y){mt[y?"unshift":"push"](()=>{l=y,n(4,l)})}function z(y){mt[y?"unshift":"push"](()=>{l=y,n(4,l)})}return e.$$set=y=>{n(22,t=T(T({},t),rt(y))),"class"in y&&n(0,f=y.class),"go"in y&&n(9,_=y.go),"open"in y&&n(10,m=y.open),"href"in y&&n(1,a=y.href),"title"in y&&n(2,d=y.title),"button"in y&&n(3,p=y.button),"exact"in y&&n(11,h=y.exact),"reload"in y&&n(12,g=y.reload),"replace"in y&&n(13,F=y.replace),"$$scope"in y&&n(16,u=y.$$scope)},e.$$.update=()=>{if(e.$$.dirty&2){t:/^(\w+:)?\/\//.test(a)||n(5,c=I($,!0)+I(D.hashchange?`#${a}`:a))}if(e.$$.dirty&51226){t:l&&o.path&&(Dt(a,o.path,h)?i||(n(14,i=!0),l.setAttribute("aria-current","page"),p&&l.setAttribute("disabled",!0)):i&&(n(14,i=!1),l.removeAttribute("disabled"),l.removeAttribute("aria-current")))}t:n(6,r=At(t,b))},t=rt(t),[f,a,d,p,l,c,r,nt,Z,_,m,h,g,F,i,o,u,s,B,z]}var Se=class extends A{constructor(t){super();q(this,t,En,xn,S,{class:0,go:9,open:10,href:1,title:2,button:3,exact:11,reload:12,replace:13})}},Ut=Se;function On(e){let t;return{c(){t=L("h1"),t.textContent="Not found"},m(n,r){E(n,t,r)},p:O,i:O,o:O,d(n){n&&x(t)}}}var je=class extends A{constructor(t){super();q(this,t,null,On,S,{})}},Re=je;function Cn(e){let t;return{c(){t=L("h1"),t.textContent="HOME"},m(n,r){E(n,t,r)},p:O,i:O,o:O,d(n){n&&x(t)}}}var Ae=class extends A{constructor(t){super();q(this,t,null,Cn,S,{})}},De=Ae;function Sn(e){let t;return{c(){t=K("Dashboard")},m(n,r){E(n,t,r)},d(n){n&&x(t)}}}function jn(e){let t;return{c(){t=K("Page not found")},m(n,r){E(n,t,r)},d(n){n&&x(t)}}}function Rn(e){let t,n,r,o,s,u,l,i,f,c,_;return r=new Ut({props:{exact:!0,href:"/admin",$$slots:{default:[Sn]},$$scope:{ctx:e}}}),s=new Ut({props:{exact:!0,href:"/admin/not-found",$$slots:{default:[jn]},$$scope:{ctx:e}}}),i=new Nt({props:{exact:!0,path:"/",component:De}}),c=new Nt({props:{fallback:!0,component:Re}}),{c(){t=L("nav"),n=L("nav"),R(r.$$.fragment),o=K(`
      | `),R(s.$$.fragment),u=It(),l=L("main"),R(i.$$.fragment),f=It(),R(c.$$.fragment)},m(m,a){E(m,t,a),vt(t,n),j(r,n,null),vt(n,o),j(s,n,null),E(m,u,a),E(m,l,a),j(i,l,null),vt(l,f),j(c,l,null),_=!0},p(m,a){let d={};a&1&&(d.$$scope={dirty:a,ctx:m}),r.$set(d);let p={};a&1&&(p.$$scope={dirty:a,ctx:m}),s.$set(p)},i(m){_||(w(r.$$.fragment,m),w(s.$$.fragment,m),w(i.$$.fragment,m),w(c.$$.fragment,m),_=!0)},o(m){v(r.$$.fragment,m),v(s.$$.fragment,m),v(i.$$.fragment,m),v(c.$$.fragment,m),_=!1},d(m){m&&x(t),C(r),C(s),m&&x(u),m&&x(l),C(i),C(c)}}}function An(e){let t,n;return t=new te({props:{path:"/admin",$$slots:{default:[Rn]},$$scope:{ctx:e}}}),{c(){R(t.$$.fragment)},m(r,o){j(t,r,o),n=!0},p(r,[o]){let s={};o&1&&(s.$$scope={dirty:o,ctx:r}),t.$set(s)},i(r){n||(w(t.$$.fragment,r),n=!0)},o(r){v(t.$$.fragment,r),n=!1},d(r){C(t,r)}}}var Pe=class extends A{constructor(t){super();q(this,t,null,An,S,{})}},Te=Pe;new Te({target:document.querySelector("#app")});
//# sourceMappingURL=data:application/json;base64,
