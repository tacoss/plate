function j(){}function q(e,t){for(let n in t)e[n]=t[n];return e}function Wt(e){return e()}function ue(){return Object.create(null)}function Z(e){e.forEach(Wt)}function gt(e){return typeof e=="function"}function P(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function fe(e){return Object.keys(e).length===0}function de(e,...t){if(e==null)return j;let n=e.subscribe(...t);return n.unsubscribe?()=>n.unsubscribe():n}function W(e,t,n){e.$$.on_destroy.push(de(t,n))}function Q(e,t,n,r){if(e){let o=_e(e,t,n,r);return e[0](o)}}function _e(e,t,n,r){return e[1]&&r?q(n.ctx.slice(),e[1](r(t))):n.ctx}function tt(e,t,n,r){if(e[2]&&r){let o=e[2](r(n));if(t.dirty===void 0)return o;if(typeof o=="object"){let c=[],u=Math.max(t.dirty.length,o.length);for(let l=0;l<u;l+=1)c[l]=t.dirty[l]|o[l];return c}return t.dirty|o}return t.dirty}function et(e,t,n,r,o,c){if(o){let u=_e(t,n,r,c);e.p(u,o)}}function nt(e){if(e.ctx.length>32){let t=[],n=e.ctx.length/32;for(let r=0;r<n;r++)t[r]=-1;return t}return-1}function ut(e){let t={};for(let n in e)n[0]!=="$"&&(t[n]=e[n]);return t}var pe=!1;function Le(){pe=!0}function Be(){pe=!1}function Tt(e,t){e.appendChild(t)}function S(e,t,n){e.insertBefore(t,n||null)}function O(e){e.parentNode&&e.parentNode.removeChild(e)}function H(e){return document.createElement(e)}function K(e){return document.createTextNode(e)}function Jt(){return K(" ")}function U(){return K("")}function Kt(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function ze(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}function wt(e,t){let n=Object.getOwnPropertyDescriptors(e.__proto__);for(let r in t)t[r]==null?e.removeAttribute(r):r==="style"?e.style.cssText=t[r]:r==="__value"?e.value=e[r]=t[r]:n[r]&&n[r].set?e[r]=t[r]:ze(e,r,t[r])}function $e(e){return Array.from(e.childNodes)}function he(e,t){t=""+t,e.wholeText!==t&&(e.data=t)}function He(e,t,{bubbles:n=!1,cancelable:r=!1}={}){let o=document.createEvent("CustomEvent");return o.initCustomEvent(e,n,r,t),o}function rt(e,t){return new e(t)}var yt;function mt(e){yt=e}function kt(){if(!yt)throw new Error("Function called outside component initialization");return yt}function Vt(e){kt().$$.on_mount.push(e)}function vt(e){kt().$$.on_destroy.push(e)}function Yt(){let e=kt();return(t,n,{cancelable:r=!1}={})=>{let o=e.$$.callbacks[t];if(o){let c=He(t,n,{cancelable:r});return o.slice().forEach(u=>{u.call(e,c)}),!c.defaultPrevented}return!0}}function Ft(e,t){return kt().$$.context.set(e,t),t}function at(e){return kt().$$.context.get(e)}var lt=[];var bt=[],At=[],ae=[],Xe=Promise.resolve(),Xt=!1;function Ge(){Xt||(Xt=!0,Xe.then(me))}function Gt(e){At.push(e)}var Ht=new Set,ct=0;function me(){if(ct!==0)return;let e=yt;do{try{for(;ct<lt.length;){let t=lt[ct];ct++,mt(t),We(t.$$)}}catch(t){throw lt.length=0,ct=0,t}for(mt(null),lt.length=0,ct=0;bt.length;)bt.pop()();for(let t=0;t<At.length;t+=1){let n=At[t];Ht.has(n)||(Ht.add(n),n())}At.length=0}while(lt.length);for(;ae.length;)ae.pop()();Xt=!1,Ht.clear(),mt(e)}function We(e){if(e.fragment!==null){e.update(),Z(e.before_update);let t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Gt)}}var Nt=new Set,Y;function L(){Y={r:0,c:[],p:Y}}function B(){Y.r||Z(Y.c),Y=Y.p}function F(e,t){e&&e.i&&(Nt.delete(e),e.i(t))}function x(e,t,n,r){if(e&&e.o){if(Nt.has(e))return;Nt.add(e),Y.c.push(()=>{Nt.delete(e),r&&(n&&e.d(1),r())}),e.o(t)}else r&&r()}var qn=typeof window<"u"?window:typeof globalThis<"u"?globalThis:global;function ot(e,t){let n={},r={},o={$$scope:1},c=e.length;for(;c--;){let u=e[c],l=t[c];if(l){for(let i in u)i in l||(r[i]=1);for(let i in l)o[i]||(n[i]=l[i],o[i]=1);e[c]=l}else for(let i in u)o[i]=1}for(let u in r)u in n||(n[u]=void 0);return n}function Dt(e){return typeof e=="object"&&e!==null?e:{}}function I(e){e&&e.c()}function M(e,t,n,r){let{fragment:o,after_update:c}=e.$$;o&&o.m(t,n),r||Gt(()=>{let u=e.$$.on_mount.map(Wt).filter(gt);e.$$.on_destroy?e.$$.on_destroy.push(...u):Z(u),e.$$.on_mount=[]}),c.forEach(Gt)}function N(e,t){let n=e.$$;n.fragment!==null&&(Z(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function Je(e,t){e.$$.dirty[0]===-1&&(lt.push(e),Ge(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function z(e,t,n,r,o,c,u,l=[-1]){let i=yt;mt(e);let s=e.$$={fragment:null,ctx:[],props:c,update:j,not_equal:o,bound:ue(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(i?i.$$.context:[])),callbacks:ue(),dirty:l,skip_bound:!1,root:t.target||i.$$.root};u&&u(s.root);let a=!1;if(s.ctx=n?n(e,t.props||{},(h,m,...k)=>{let v=k.length?k[0]:m;return s.ctx&&o(s.ctx[h],s.ctx[h]=v)&&(!s.skip_bound&&s.bound[h]&&s.bound[h](v),a&&Je(e,h)),m}):[],s.update(),a=!0,Z(s.before_update),s.fragment=r?r(s.ctx):!1,t.target){if(t.hydrate){Le();let h=$e(t.target);s.fragment&&s.fragment.l(h),h.forEach(O)}else s.fragment&&s.fragment.c();t.intro&&F(e.$$.fragment),M(e,t.target,t.anchor,t.customElement),Be(),me()}mt(i)}var Ke;typeof HTMLElement=="function"&&(Ke=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){let{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(Wt).filter(gt);for(let t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(e,t,n){this[e]=n}disconnectedCallback(){Z(this.$$.on_disconnect)}$destroy(){N(this,1),this.$destroy=j}$on(e,t){if(!gt(t))return j;let n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{let r=n.indexOf(t);r!==-1&&n.splice(r,1)}}$set(e){this.$$set&&!fe(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});var D=class{$destroy(){N(this,1),this.$destroy=j}$on(t,n){if(!gt(n))return j;let r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{let o=r.indexOf(n);o!==-1&&r.splice(o,1)}}$set(t){this.$$set&&!fe(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}};var ft=[];function V(e,t=j){let n,r=new Set;function o(l){if(P(e,l)&&(e=l,n)){let i=!ft.length;for(let s of r)s[1](),ft.push(s,e);if(i){for(let s=0;s<ft.length;s+=2)ft[s][0](ft[s+1]);ft.length=0}}}function c(l){o(l(e))}function u(l,i=j){let s=[l,i];return r.add(s),r.size===1&&(n=t(o)||j),l(e),()=>{r.delete(s),r.size===0&&(n(),n=null)}}return{set:o,update:c,subscribe:u}}var Ve=Object.create,ye=Object.defineProperty,Ye=Object.getOwnPropertyDescriptor,Ze=Object.getOwnPropertyNames,Qe=Object.getPrototypeOf,tn=Object.prototype.hasOwnProperty,Et=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),en=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Ze(t))!tn.call(e,o)&&o!==n&&ye(e,o,{get:()=>t[o],enumerable:!(r=Ye(t,o))||r.enumerable});return e},nn=(e,t,n)=>(n=e!=null?Ve(Qe(e)):{},en(t||!e||!e.__esModule?ye(n,"default",{value:e,enumerable:!0}):n,e)),rn=Et((e,t)=>{"use strict";t.exports=n=>encodeURIComponent(n).replace(/[!'()*]/g,r=>`%${r.charCodeAt(0).toString(16).toUpperCase()}`)}),on=Et((e,t)=>{"use strict";var n="%[a-f0-9]{2}",r=new RegExp(n,"gi"),o=new RegExp("("+n+")+","gi");function c(i,s){try{return decodeURIComponent(i.join(""))}catch{}if(i.length===1)return i;s=s||1;var a=i.slice(0,s),h=i.slice(s);return Array.prototype.concat.call([],c(a),c(h))}function u(i){try{return decodeURIComponent(i)}catch{for(var s=i.match(r),a=1;a<s.length;a++)i=c(s,a).join(""),s=i.match(r);return i}}function l(i){for(var s={"%FE%FF":"\uFFFD\uFFFD","%FF%FE":"\uFFFD\uFFFD"},a=o.exec(i);a;){try{s[a[0]]=decodeURIComponent(a[0])}catch{var h=u(a[0]);h!==a[0]&&(s[a[0]]=h)}a=o.exec(i)}s["%C2"]="\uFFFD";for(var m=Object.keys(s),k=0;k<m.length;k++){var v=m[k];i=i.replace(new RegExp(v,"g"),s[v])}return i}t.exports=function(i){if(typeof i!="string")throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof i+"`");try{return i=i.replace(/\+/g," "),decodeURIComponent(i)}catch{return l(i)}}}),sn=Et((e,t)=>{"use strict";t.exports=(n,r)=>{if(!(typeof n=="string"&&typeof r=="string"))throw new TypeError("Expected the arguments to be of type `string`");if(r==="")return[n];let o=n.indexOf(r);return o===-1?[n]:[n.slice(0,o),n.slice(o+r.length)]}}),cn=Et((e,t)=>{"use strict";t.exports=function(n,r){for(var o={},c=Object.keys(n),u=Array.isArray(r),l=0;l<c.length;l++){var i=c[l],s=n[i];(u?r.indexOf(i)!==-1:r(i,s,n))&&(o[i]=s)}return o}}),ln=Et(e=>{"use strict";var t=rn(),n=on(),r=sn(),o=cn(),c=f=>f==null;function u(f){switch(f.arrayFormat){case"index":return d=>(p,_)=>{let g=p.length;return _===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?p:_===null?[...p,[s(d,f),"[",g,"]"].join("")]:[...p,[s(d,f),"[",s(g,f),"]=",s(_,f)].join("")]};case"bracket":return d=>(p,_)=>_===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?p:_===null?[...p,[s(d,f),"[]"].join("")]:[...p,[s(d,f),"[]=",s(_,f)].join("")];case"comma":case"separator":return d=>(p,_)=>_==null||_.length===0?p:p.length===0?[[s(d,f),"=",s(_,f)].join("")]:[[p,s(_,f)].join(f.arrayFormatSeparator)];default:return d=>(p,_)=>_===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?p:_===null?[...p,s(d,f)]:[...p,[s(d,f),"=",s(_,f)].join("")]}}function l(f){let d;switch(f.arrayFormat){case"index":return(p,_,g)=>{if(d=/\[(\d*)\]$/.exec(p),p=p.replace(/\[\d*\]$/,""),!d){g[p]=_;return}g[p]===void 0&&(g[p]={}),g[p][d[1]]=_};case"bracket":return(p,_,g)=>{if(d=/(\[\])$/.exec(p),p=p.replace(/\[\]$/,""),!d){g[p]=_;return}if(g[p]===void 0){g[p]=[_];return}g[p]=[].concat(g[p],_)};case"comma":case"separator":return(p,_,g)=>{let E=typeof _=="string"&&_.includes(f.arrayFormatSeparator),b=typeof _=="string"&&!E&&a(_,f).includes(f.arrayFormatSeparator);_=b?a(_,f):_;let C=E||b?_.split(f.arrayFormatSeparator).map(y=>a(y,f)):_===null?_:a(_,f);g[p]=C};default:return(p,_,g)=>{if(g[p]===void 0){g[p]=_;return}g[p]=[].concat(g[p],_)}}}function i(f){if(typeof f!="string"||f.length!==1)throw new TypeError("arrayFormatSeparator must be single character string")}function s(f,d){return d.encode?d.strict?t(f):encodeURIComponent(f):f}function a(f,d){return d.decode?n(f):f}function h(f){return Array.isArray(f)?f.sort():typeof f=="object"?h(Object.keys(f)).sort((d,p)=>Number(d)-Number(p)).map(d=>f[d]):f}function m(f){let d=f.indexOf("#");return d!==-1&&(f=f.slice(0,d)),f}function k(f){let d="",p=f.indexOf("#");return p!==-1&&(d=f.slice(p)),d}function v(f){f=m(f);let d=f.indexOf("?");return d===-1?"":f.slice(d+1)}function R(f,d){return d.parseNumbers&&!Number.isNaN(Number(f))&&typeof f=="string"&&f.trim()!==""?f=Number(f):d.parseBooleans&&f!==null&&(f.toLowerCase()==="true"||f.toLowerCase()==="false")&&(f=f.toLowerCase()==="true"),f}function A(f,d){d=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},d),i(d.arrayFormatSeparator);let p=l(d),_=Object.create(null);if(typeof f!="string"||(f=f.trim().replace(/^[?#&]/,""),!f))return _;for(let g of f.split("&")){if(g==="")continue;let[E,b]=r(d.decode?g.replace(/\+/g," "):g,"=");b=b===void 0?null:["comma","separator"].includes(d.arrayFormat)?b:a(b,d),p(a(E,d),b,_)}for(let g of Object.keys(_)){let E=_[g];if(typeof E=="object"&&E!==null)for(let b of Object.keys(E))E[b]=R(E[b],d);else _[g]=R(E,d)}return d.sort===!1?_:(d.sort===!0?Object.keys(_).sort():Object.keys(_).sort(d.sort)).reduce((g,E)=>{let b=_[E];return Boolean(b)&&typeof b=="object"&&!Array.isArray(b)?g[E]=h(b):g[E]=b,g},Object.create(null))}e.extract=v,e.parse=A,e.stringify=(f,d)=>{if(!f)return"";d=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},d),i(d.arrayFormatSeparator);let p=b=>d.skipNull&&c(f[b])||d.skipEmptyString&&f[b]==="",_=u(d),g={};for(let b of Object.keys(f))p(b)||(g[b]=f[b]);let E=Object.keys(g);return d.sort!==!1&&E.sort(d.sort),E.map(b=>{let C=f[b];return C===void 0?"":C===null?s(b,d):Array.isArray(C)?C.reduce(_(b),[]).join("&"):s(b,d)+"="+s(C,d)}).filter(b=>b.length>0).join("&")},e.parseUrl=(f,d)=>{d=Object.assign({decode:!0},d);let[p,_]=r(f,"#");return Object.assign({url:p.split("?")[0]||"",query:A(v(f),d)},d&&d.parseFragmentIdentifier&&_?{fragmentIdentifier:a(_,d)}:{})},e.stringifyUrl=(f,d)=>{d=Object.assign({encode:!0,strict:!0},d);let p=m(f.url).split("?")[0]||"",_=e.extract(f.url),g=e.parse(_,{sort:!1}),E=Object.assign(g,f.query),b=e.stringify(E,d);b&&(b=`?${b}`);let C=k(f.url);return f.fragmentIdentifier&&(C=`#${s(f.fragmentIdentifier,d)}`),`${p}${b}${C}`},e.pick=(f,d,p)=>{p=Object.assign({parseFragmentIdentifier:!0},p);let{url:_,query:g,fragmentIdentifier:E}=e.parseUrl(f,p);return e.stringifyUrl({url:_,query:o(g,d),fragmentIdentifier:E},p)},e.exclude=(f,d,p)=>{let _=Array.isArray(d)?g=>!d.includes(g):(g,E)=>!d(g,E);return e.pick(f,_,p)}}),be=nn(ln()),xt=function(e){function t(n,r){var o="Unreachable '"+(n!=="/"?n.replace(/\/$/,""):n)+"', segment '"+r+"' is not defined";e.call(this,o),this.message=o,this.route=n,this.path=r}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);function we(e,t){var n,r,o=-100,c=[];n=e.replace(/[-$.]/g,"\\$&").replace(/\(/g,"(?:").replace(/\)/g,")?").replace(/([:*]\w+)(?:<([^<>]+?)>)?/g,function(i,s,a){return c.push(s.substr(1)),s.charAt()===":"?(o+=100,"((?!#)"+(a||"[^#/]+?")+")"):(r=!0,o+=500,"((?!#)"+(a||"[^#]+?")+")")});try{n=new RegExp("^"+n+"$")}catch{throw new TypeError("Invalid route expression, given '"+t+"'")}var u=e.includes("#")?.5:1,l=e.length*o*u;return{keys:c,regex:n,_depth:l,_isSplat:r}}var dt=function(e,t){var n=we(e,t),r=n.keys,o=n.regex,c=n._depth,u=n._isSplat;function l(i){var s=i.match(o);if(s)return r.reduce(function(a,h,m){return a[h]=typeof s[m+1]=="string"?decodeURIComponent(s[m+1]):null,a},{})}return l.regex=o,l.keys=r,{_isSplat:u,_depth:c,match:l}};dt.push=function(e,t,n,r){var o=t[e]||(t[e]={});return o.pattern||(o.pattern=new dt(e,r),o.route=(n||"").replace(/\/$/,"")||"/"),t.keys=t.keys||[],t.keys.includes(e)||(t.keys.push(e),dt.sort(t)),o};dt.sort=function(e){e.keys.sort(function(t,n){return e[t].pattern._depth-e[n].pattern._depth})};function ke(e,t){return""+(t&&t!=="/"?t:"")+(e||"")}function Pt(e,t){var n=e.match(/<[^<>]*\/[^<>]*>/);if(n)throw new TypeError("RegExp cannot contain slashes, given '"+n+"'");var r=e.split(/(?=\/|#)/),o=[];r[0]!=="/"&&r.unshift("/"),r.some(function(c,u){var l=o.slice(1).concat(c).join("")||null,i=r.slice(u+1).join("")||null,s=t(c,l,i?""+(c!=="/"?c:"")+i:null);return o.push(c),s})}function un(e,t){var n=t.refs,r={},o=[],c;return Pt(e,function(u,l,i){if(!t.keys)throw new xt(e,u);var s;if(t.keys.some(function(a){var h=t[a].pattern,m=h.match,k=h._length,v=h._isSplat,R=m(v&&i||u);if(R){var A=(n[t[a].route]||[]).concat(n[t[a].route+"/"]||[]).concat(n[t[a].route+"#"]||[]);return Object.assign(r,R),A.forEach(function(f){if(!o.some(function(_){return _.key===f})){var d=Object.assign({},n[f]),p=!1;d.exact?p=i===null:p=!(u&&l===null)||u===l||v||!i,d.matches=p,d.params=Object.assign({},r),d.route=d.fullpath,d.depth+=m.keys.length,d.path=v&&i||l||u,delete d.fullpath,o.push(d)}}),i===null&&!t[a].keys?!0:!v&&!i&&t.keys.some(function(f){return f.includes("*")})?!1:(c=v,t=t[a],s=!0,!0)}return!1}),!(s||t.keys.some(function(a){return t[a].pattern.match(u)})))throw new xt(e,u);return c||!s}),o.sort(function(u,l){return l.fallback&&!u.fallback?-1:u.fallback&&!l.fallback?1:l.route.includes("#")&&!u.route.includes("#")?-1:u.route.includes("#")&&!l.route.includes("#")?1:u.depth-l.depth})}function ge(e,t,n){for(var r=un.bind(null,e,t),o=[];n>0;){n-=1;try{return r(o)}catch(c){if(n>0)return r(o);throw c}}}function an(e,t,n,r){var o=ke(e,n),c=o.split(/(?=[#:/*.]\w)/g).length,u=Object.assign({},r,{fullpath:o,depth:c});if(!e||!"#/".includes(e.charAt()))throw new TypeError("Routes should have a valid path, given "+JSON.stringify(e));if(!u.key)throw new TypeError("Routes should have a key, given "+JSON.stringify(u));t.refs[u.key]=u,t.refs[o]=t.refs[o]?t.refs[o].concat(u.key):[u.key];var l=t;return Pt(o,function(i,s){l=dt.push(i,l,s,o)}),o}function fn(e,t,n){var r=ke(e,n),o=t,c=null,u=null;if(Pt(r,function(i){if(!o)return c=null,!0;if(!o.keys)throw new xt(e,i);u=i,c=o,o=o[u]}),!(c&&u))throw new xt(e,u);if(c===t&&(c=t["/"]),c.route!==u){var l=c.keys.indexOf(u);if(l===-1)throw new xt(e,u);c.keys.splice(l,1),dt.sort(c),delete c[u]}c.route===o.route&&delete t.refs[r]}var ve=function(){var e={refs:{}},t=[];return{routes:e,resolve:function(n,r){var o=n.split("?")[0],c=[];Pt(o,function(u,l,i){try{r(null,ge(l,e,2).filter(function(s){return c.includes(s.route)?!1:(c.push(s.route),!0)}),l)}catch(s){r(s,[])}})},mount:function(n,r){n!=="/"&&t.push(n),r(),t.pop()},find:function(n,r){return ge(n,e,r===!0?2:r||1)},add:function(n,r){return an(n,e,t.join(""),r)},rm:function(n){return fn(n,e,t.join(""))}}};ve.matches=function(e,t){return we(e,t).regex.test(t)};var Mt=ve,Fe=be.parse,xe=be.stringify;var Ot={},Ee=document.getElementsByTagName("base"),dn=Ee[0]&&Ee[0].href||"/",it=dn.replace(window.location.origin,""),T=V({path:"/",query:{},params:{},initial:!0}),St={},Zt={},Oe=window.location.origin==="null";function Se(e){return typeof e=="boolean"&&(Oe=!!e),Oe}Object.defineProperty(T,"hashchange",{set:e=>Se(e),get:()=>Se(),configurable:!1,enumerable:!1});function Qt(e,t,n){let r=T.hashchange?window.location.hash.replace("#",""):window.location.pathname;e.charAt()!=="/"&&(e=r+e),r+window.location.hash+window.location.search!==e&&t(e),typeof n=="function"&&n()}function X(e,t){return e!=="/"||t?e.replace(/\/$/,""):e}function Ct(e,t){let{reload:n,replace:r,params:o,queryParams:c}=t||{};if(!e||typeof e!="string"||e[0]!=="/"&&e[0]!=="#")throw new Error(`Expecting '/${e}' or '#${e}', given '${e}'`);if(o&&(e=e.replace(/:([a-zA-Z][a-zA-Z0-9_-]*)/g,(u,l)=>o[l])),c){let u=xe(c);u&&(e+=`?${u}`)}if(T.hashchange){let u=e.replace(/^#|#$/g,"");it!=="/"&&(u=u.replace(X(it),"")),window.location.hash=u!=="/"?u:"";return}if(n||!window.history.pushState||!window.dispatchEvent){window.location.href=e;return}Qt(e,u=>{window.history[r?"replaceState":"pushState"](null,"",u),window.dispatchEvent(new Event("popstate"))})}function It(e,t){let{props:n,...r}=e;return t.forEach(o=>{delete r[o]}),{...n,...r}}function qt(e,t,n){return Ot[[e,t,n]]||(n!==!0&&t.indexOf(e)===0?Ot[[e,t,n]]=/^[#/?]?$/.test(t.substr(e.length,1)):e.includes("*")||e.includes(":")?Ot[[e,t,n]]=Mt.matches(e,t):Ot[[e,t,n]]=X(t)===e),Ot[[e,t,n]]}function Ce(e){return e&&typeof e.then=="function"}function Ut(e){return e&&e.prototype}var pt=new Mt,ht=V({}),_t={},st={},te=[],Lt=0,je,jt;T.subscribe(e=>{st.router=e});ht.subscribe(e=>{st.routeInfo=e});function ee(e,t){ht.update(n=>({...n,[t]:{...st.router,failure:e}}))}function Re(e,t,n){e.some(r=>{if(r.key&&(n||r.matches&&!st.routeInfo[r.key])){if(r.redirect&&(r.condition===null||r.condition(st.router)!==!0))return r.exact&&st.router.path!==r.path?!1:(Ct(r.redirect),!0);if(r.exact&&r.path!==jt&&jt.replace(/[#/]$/,"")!==r.path||n&&r.fallback)return!1;Object.assign(t,r.params),ht.update(o=>({...o,[r.key]:{...st.router,...r}}))}return!1})}function _n(){let e=T.hashchange?window.location.hash||"/":window.location.href.replace(window.location.origin,""),t;if(it!=="/"&&(e=e.replace(X(it),"")),/^#[\w-]+$/.test(window.location.hash)&&document.querySelector(window.location.hash)&&jt===e.split("#")[0])return;let n=e.replace("/#","#").replace(/^#\//,"/"),[r,o]=n.split("?"),c=r.replace(/\/?$/,"/"),u={};if(jt!==n&&(jt=n,T.set({path:X(c),query:Fe(o),params:u})),ht.set({}),pt.resolve(c,(i,s)=>{if(i){t=i;return}Re(s,u)}),!t)try{Re(pt.find(c),u,!0)}catch{}t&&t.path!=="/"?console.debug(t):t=null,te.forEach(i=>i()),te=[];let l;Object.keys(_t).forEach(i=>{if(qt(i,c,!1)){let s=_t[i].callback;s(t),te.push(s)}!l&&_t[i].fallback&&(l=_t[i].fallback)}),t&&l&&ee(t,l)}function Rt(){clearTimeout(je),je=setTimeout(_n)}function Ae(e,t,n){return Lt||window.addEventListener("popstate",Rt,!1),(!_t[e]||t)&&(_t[e]={fallback:t,callback:n}),Lt+=1,()=>{Lt-=1,Lt||window.removeEventListener("popstate",Rt,!1)}}var pn=e=>({router:e&2}),Ne=e=>({router:e[1]});function Te(e){let t,n=e[8].default,r=Q(n,e,e[7],Ne);return{c(){r&&r.c()},m(o,c){r&&r.m(o,c),t=!0},p(o,c){r&&r.p&&(!t||c&130)&&et(r,n,o,o[7],t?tt(n,o[7],c,pn):nt(o[7]),Ne)},i(o){t||(F(r,o),t=!0)},o(o){x(r,o),t=!1},d(o){r&&r.d(o)}}}function hn(e){let t,n,r=!e[0]&&Te(e);return{c(){r&&r.c(),t=U()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,[c]){o[0]?r&&(L(),x(r,1,1,()=>{r=null}),B()):r?(r.p(o,c),c&1&&F(r,1)):(r=Te(o),r.c(),F(r,1),r.m(t.parentNode,t))},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function mn(e){try{pt.rm(e)}catch{}Rt()}function gn(e,t,n){let r,o;W(e,T,_=>n(1,r=_));let{$$slots:c={},$$scope:u}=t,l,i,s,{key:a=""}=t,{path:h="/"}=t,{pending:m=null}=t,{disabled:k=!1}=t,{condition:v=null}=t,R=at(St),A=R?R.basePath:V(h);W(e,A,_=>n(12,o=_));let f=o!==h&&o!=="/"?`${o}${h!=="/"?h:""}`:h;function d(_,g,E){_=_||`route-${Math.random().toString(36).substr(2)}`;let b=[a,_].filter(Boolean).join("."),C={key:b,...E},y;return pt.mount(f,()=>{y=pt.add(g,C),s=C.fallback&&b||s}),Rt(),[b,y]}function p(_){i=_,i&&s&&ee(i,s)}return Vt(()=>{l=Ae(f,s,p)}),vt(()=>{l&&l()}),Ft(St,{basePath:A,assignRoute:d,unassignRoute:mn,pendingComponent:m}),e.$$set=_=>{"key"in _&&n(3,a=_.key),"path"in _&&n(4,h=_.path),"pending"in _&&n(5,m=_.pending),"disabled"in _&&n(0,k=_.disabled),"condition"in _&&n(6,v=_.condition),"$$scope"in _&&n(7,u=_.$$scope)},e.$$.update=()=>{if(e.$$.dirty&66){t:v&&n(0,k=!v(r))}},[k,r,A,a,h,m,v,u,c]}var ne=class extends D{constructor(t){super(),z(this,t,gn,hn,P,{key:3,path:4,pending:5,disabled:0,condition:6})}},re=ne;var yn=e=>e&8,bn=e=>({}),De=e=>({...e[3]});function Pe(e){let t,n,r,o,c=[vn,kn,wn],u=[];function l(i,s){return i[4]?i[0]?1:2:0}return t=l(e,-1),n=u[t]=c[t](e),{c(){n.c(),r=U()},m(i,s){u[t].m(i,s),S(i,r,s),o=!0},p(i,s){let a=t;t=l(i,s),t===a?u[t].p(i,s):(L(),x(u[a],1,1,()=>{u[a]=null}),B(),n=u[t],n?n.p(i,s):(n=u[t]=c[t](i),n.c()),F(n,1),n.m(r.parentNode,r))},i(i){o||(F(n),o=!0)},o(i){x(n),o=!1},d(i){u[t].d(i),i&&O(r)}}}function wn(e){let t,n=e[17].default,r=Q(n,e,e[16],De);return{c(){r&&r.c()},m(o,c){r&&r.m(o,c),t=!0},p(o,c){r&&r.p&&(!t||c&65544)&&et(r,n,o,o[16],yn(c)||!t?nt(o[16]):tt(n,o[16],c,bn),De)},i(o){t||(F(r,o),t=!0)},o(o){x(r,o),t=!1},d(o){r&&r.d(o)}}}function kn(e){let t,n,r,o=[e[3]];var c=e[0];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=q(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=U()},m(l,i){t&&M(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(c!==(c=l[0])){if(t){L();let a=t;x(a.$$.fragment,1,0,()=>{N(a,1)}),B()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),M(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&N(t,l)}}}function vn(e){let t,n,r=(e[1]||e[5])&&Me(e);return{c(){r&&r.c(),t=U()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,c){o[1]||o[5]?r?(r.p(o,c),c&2&&F(r,1)):(r=Me(o),r.c(),F(r,1),r.m(t.parentNode,t)):r&&(L(),x(r,1,1,()=>{r=null}),B())},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function Me(e){let t,n,r,o,c,u,l=[En,xn,Fn],i=[];function s(a,h){return h&2&&(t=null),t==null&&(t=!!Ut(a[1])),t?0:(n==null&&(n=!!Ut(a[5])),n?1:2)}return r=s(e,-1),o=i[r]=l[r](e),{c(){o.c(),c=U()},m(a,h){i[r].m(a,h),S(a,c,h),u=!0},p(a,h){let m=r;r=s(a,h),r===m?i[r].p(a,h):(L(),x(i[m],1,1,()=>{i[m]=null}),B(),o=i[r],o?o.p(a,h):(o=i[r]=l[r](a),o.c()),F(o,1),o.m(c.parentNode,c))},i(a){u||(F(o),u=!0)},o(a){x(o),u=!1},d(a){i[r].d(a),a&&O(c)}}}function Fn(e){let t=(e[1]||e[5])+"",n;return{c(){n=K(t)},m(r,o){S(r,n,o)},p(r,o){o&2&&t!==(t=(r[1]||r[5])+"")&&he(n,t)},i:j,o:j,d(r){r&&O(n)}}}function xn(e){let t,n,r,o=[e[3]];var c=e[5];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=q(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=U()},m(l,i){t&&M(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(c!==(c=l[5])){if(t){L();let a=t;x(a.$$.fragment,1,0,()=>{N(a,1)}),B()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),M(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&N(t,l)}}}function En(e){let t,n,r,o=[e[3]];var c=e[1];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=q(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=U()},m(l,i){t&&M(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(c!==(c=l[1])){if(t){L();let a=t;x(a.$$.fragment,1,0,()=>{N(a,1)}),B()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),M(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&N(t,l)}}}function On(e){let t,n,r=e[2]&&Pe(e);return{c(){r&&r.c(),t=U()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,[c]){o[2]?r?(r.p(o,c),c&4&&F(r,1)):(r=Pe(o),r.c(),F(r,1),r.m(t.parentNode,t)):r&&(L(),x(r,1,1,()=>{r=null}),B())},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function Sn(e,t,n){let r,o,c;W(e,T,w=>n(14,r=w)),W(e,ht,w=>n(15,o=w));let{$$slots:u={},$$scope:l}=t,{key:i=null}=t,{path:s="/"}=t,{exact:a=null}=t,{pending:h=null}=t,{disabled:m=!1}=t,{fallback:k=null}=t,{component:v=null}=t,{condition:R=null}=t,{redirect:A=null}=t,f=["key","path","exact","pending","disabled","fallback","component","condition","redirect"],d=at(Zt),p=at(St),{assignRoute:_,unassignRoute:g,pendingComponent:E}=p||{},b=d?d.routePath:V(s);W(e,b,w=>n(19,c=w));let C=null,y={},G,$,J=c!==s&&c!=="/"?`${c}${s!=="/"?s:""}`:s;function $t(){let w=s!==J&&J.substr(-1)!=="/"?`${J}/`:J;n(7,[i,G]=_(i,w,{condition:R,redirect:A,fallback:k,exact:a}),i)}return $t(),vt(()=>{g&&g(G)}),Ft(Zt,{routePath:b}),e.$$set=w=>{n(27,t=q(q({},t),ut(w))),"key"in w&&n(7,i=w.key),"path"in w&&n(8,s=w.path),"exact"in w&&n(9,a=w.exact),"pending"in w&&n(1,h=w.pending),"disabled"in w&&n(10,m=w.disabled),"fallback"in w&&n(11,k=w.fallback),"component"in w&&n(0,v=w.component),"condition"in w&&n(12,R=w.condition),"redirect"in w&&n(13,A=w.redirect),"$$scope"in w&&n(16,l=w.$$scope)},e.$$.update=()=>{t:i&&(n(2,C=!m&&o[i]),n(3,y=It(t,f)),n(3,y.router=C,y));if(e.$$.dirty&16389){t:if(C){for(let w in r.params)typeof C.params[w]>"u"&&n(2,C.params[w]=r.params[w],C);v?Ut(v)?n(4,$=!0):Ce(v)?v.then(w=>{n(0,v=w.default),n(4,$=!0)}):v().then(w=>{n(0,v=w.default),n(4,$=!0)}):n(4,$=!0)}}},t=ut(t),[v,h,C,y,$,E,b,i,s,a,m,k,R,A,r,o,l,u]}var oe=class extends D{constructor(t){super(),z(this,t,Sn,On,P,{key:7,path:8,exact:9,pending:1,disabled:10,fallback:11,component:0,condition:12,redirect:13})}},Bt=oe;function Cn(e){let t,n,r,o,c,u=e[17].default,l=Q(u,e,e[16],null),i=[e[6],{href:n=X(e[5]||e[1])},{class:e[0]},{title:e[2]}],s={};for(let a=0;a<i.length;a+=1)s=q(s,i[a]);return{c(){t=H("a"),l&&l.c(),wt(t,s)},m(a,h){S(a,t,h),l&&l.m(t,null),e[19](t),r=!0,o||(c=Kt(t,"click",e[8]),o=!0)},p(a,h){l&&l.p&&(!r||h&65536)&&et(l,u,a,a[16],r?tt(u,a[16],h,null):nt(a[16]),null),wt(t,s=ot(i,[h&64&&a[6],(!r||h&34&&n!==(n=X(a[5]||a[1])))&&{href:n},(!r||h&1)&&{class:a[0]},(!r||h&4)&&{title:a[2]}]))},i(a){r||(F(l,a),r=!0)},o(a){x(l,a),r=!1},d(a){a&&O(t),l&&l.d(a),e[19](null),o=!1,c()}}}function jn(e){let t,n,r,o,c=e[17].default,u=Q(c,e,e[16],null),l=[e[6],{class:e[0]},{title:e[2]}],i={};for(let s=0;s<l.length;s+=1)i=q(i,l[s]);return{c(){t=H("button"),u&&u.c(),wt(t,i)},m(s,a){S(s,t,a),u&&u.m(t,null),t.autofocus&&t.focus(),e[18](t),n=!0,r||(o=Kt(t,"click",e[7]),r=!0)},p(s,a){u&&u.p&&(!n||a&65536)&&et(u,c,s,s[16],n?tt(c,s[16],a,null):nt(s[16]),null),wt(t,i=ot(l,[a&64&&s[6],(!n||a&1)&&{class:s[0]},(!n||a&4)&&{title:s[2]}]))},i(s){n||(F(u,s),n=!0)},o(s){x(u,s),n=!1},d(s){s&&O(t),u&&u.d(s),e[18](null),r=!1,o()}}}function Rn(e){let t,n,r,o,c=[jn,Cn],u=[];function l(i,s){return i[3]?0:1}return t=l(e,-1),n=u[t]=c[t](e),{c(){n.c(),r=U()},m(i,s){u[t].m(i,s),S(i,r,s),o=!0},p(i,[s]){let a=t;t=l(i,s),t===a?u[t].p(i,s):(L(),x(u[a],1,1,()=>{u[a]=null}),B(),n=u[t],n?n.p(i,s):(n=u[t]=c[t](i),n.c()),F(n,1),n.m(r.parentNode,r))},i(i){o||(F(n),o=!0)},o(i){x(n),o=!1},d(i){u[t].d(i),i&&O(r)}}}function An(e,t,n){let r,o;W(e,T,y=>n(15,o=y));let{$$slots:c={},$$scope:u}=t,l,i,{class:s=""}=t,a=null,{go:h=null}=t,{open:m=null}=t,{href:k=""}=t,{title:v=""}=t,{button:R=!1}=t,{exact:A=!1}=t,{reload:f=!1}=t,{replace:d=!1}=t,p=["go","open","href","class","title","button","exact","reload","replace"],_=Yt();function g(y){if(y.preventDefault(),typeof h=="string"&&window.history.length>1){h==="back"?window.history.back():h==="fwd"?window.history.forward():window.history.go(parseInt(h,10));return}if(!a&&k!==""){if(m){let G=typeof m=="string"?m:"",$=G.match(/width=(\d+)/),J=G.match(/height=(\d+)/);$&&(G+=`,left=${(window.screen.width-$[1])/2}`),J&&(G+=`,top=${(window.screen.height-J[1])/2}`),$&&!J&&(G+=`,height=${$[1]},top=${(window.screen.height-$[1])/2}`);let $t=window.open(k,"",G),w=setInterval(()=>{$t.closed&&(_("close"),clearInterval(w))},120)}else window.location.href=k;return}Qt(k,()=>{Ct(a||"/",{reload:f,replace:d})},()=>_("click",y))}function E(y){y.metaKey||y.ctrlKey||y.button!==0||g(y)}function b(y){bt[y?"unshift":"push"](()=>{l=y,n(4,l)})}function C(y){bt[y?"unshift":"push"](()=>{l=y,n(4,l)})}return e.$$set=y=>{n(22,t=q(q({},t),ut(y))),"class"in y&&n(0,s=y.class),"go"in y&&n(9,h=y.go),"open"in y&&n(10,m=y.open),"href"in y&&n(1,k=y.href),"title"in y&&n(2,v=y.title),"button"in y&&n(3,R=y.button),"exact"in y&&n(11,A=y.exact),"reload"in y&&n(12,f=y.reload),"replace"in y&&n(13,d=y.replace),"$$scope"in y&&n(16,u=y.$$scope)},e.$$.update=()=>{if(e.$$.dirty&2){t:/^(\w+:)?\/\//.test(k)||n(5,a=X(it,!0)+X(T.hashchange?`#${k}`:k))}if(e.$$.dirty&51226){t:l&&o.path&&(qt(k,o.path,A)?i||(n(14,i=!0),l.setAttribute("aria-current","page"),R&&l.setAttribute("disabled",!0)):i&&(n(14,i=!1),l.removeAttribute("disabled"),l.removeAttribute("aria-current")))}t:n(6,r=It(t,p))},t=ut(t),[s,k,v,R,l,a,r,g,E,h,m,A,f,d,i,o,u,c,b,C]}var ie=class extends D{constructor(t){super(),z(this,t,An,Rn,P,{class:0,go:9,open:10,href:1,title:2,button:3,exact:11,reload:12,replace:13})}},zt=ie;function Nn(e){let t;return{c(){t=H("h1"),t.textContent="Not found"},m(n,r){S(n,t,r)},p:j,i:j,o:j,d(n){n&&O(t)}}}var se=class extends D{constructor(t){super(),z(this,t,null,Nn,P,{})}},Ie=se;function Tn(e){let t;return{c(){t=H("h1"),t.textContent="HOME"},m(n,r){S(n,t,r)},p:j,i:j,o:j,d(n){n&&O(t)}}}var ce=class extends D{constructor(t){super(),z(this,t,null,Tn,P,{})}},qe=ce;function Dn(e){let t;return{c(){t=K("Dashboard")},m(n,r){S(n,t,r)},d(n){n&&O(t)}}}function Pn(e){let t;return{c(){t=K("Page not found")},m(n,r){S(n,t,r)},d(n){n&&O(t)}}}function Mn(e){let t,n,r,o,c,u,l,i,s,a,h;return r=new zt({props:{exact:!0,href:"/admin",$$slots:{default:[Dn]},$$scope:{ctx:e}}}),c=new zt({props:{exact:!0,href:"/admin/not-found",$$slots:{default:[Pn]},$$scope:{ctx:e}}}),i=new Bt({props:{exact:!0,path:"/",component:qe}}),a=new Bt({props:{fallback:!0,component:Ie}}),{c(){t=H("nav"),n=H("nav"),I(r.$$.fragment),o=K(`
      | `),I(c.$$.fragment),u=Jt(),l=H("main"),I(i.$$.fragment),s=Jt(),I(a.$$.fragment)},m(m,k){S(m,t,k),Tt(t,n),M(r,n,null),Tt(n,o),M(c,n,null),S(m,u,k),S(m,l,k),M(i,l,null),Tt(l,s),M(a,l,null),h=!0},p(m,k){let v={};k&1&&(v.$$scope={dirty:k,ctx:m}),r.$set(v);let R={};k&1&&(R.$$scope={dirty:k,ctx:m}),c.$set(R)},i(m){h||(F(r.$$.fragment,m),F(c.$$.fragment,m),F(i.$$.fragment,m),F(a.$$.fragment,m),h=!0)},o(m){x(r.$$.fragment,m),x(c.$$.fragment,m),x(i.$$.fragment,m),x(a.$$.fragment,m),h=!1},d(m){m&&O(t),N(r),N(c),m&&O(u),m&&O(l),N(i),N(a)}}}function In(e){let t,n;return t=new re({props:{path:"/admin",$$slots:{default:[Mn]},$$scope:{ctx:e}}}),{c(){I(t.$$.fragment)},m(r,o){M(t,r,o),n=!0},p(r,[o]){let c={};o&1&&(c.$$scope={dirty:o,ctx:r}),t.$set(c)},i(r){n||(F(t.$$.fragment,r),n=!0)},o(r){x(t.$$.fragment,r),n=!1},d(r){N(t,r)}}}var le=class extends D{constructor(t){super(),z(this,t,null,In,P,{})}},Ue=le;new Ue({target:document.querySelector("#app")});
//# sourceMappingURL=data:application/json;base64,
