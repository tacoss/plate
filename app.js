function j(){}function L(e,t){for(let n in t)e[n]=t[n];return e}function Jt(e){return e()}function ae(){return Object.create(null)}function Z(e){e.forEach(Jt)}function bt(e){return typeof e=="function"}function M(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function de(e){return Object.keys(e).length===0}function _e(e,...t){if(e==null)return j;let n=e.subscribe(...t);return n.unsubscribe?()=>n.unsubscribe():n}function G(e,t,n){e.$$.on_destroy.push(_e(t,n))}function Q(e,t,n,r){if(e){let o=he(e,t,n,r);return e[0](o)}}function he(e,t,n,r){return e[1]&&r?L(n.ctx.slice(),e[1](r(t))):n.ctx}function tt(e,t,n,r){if(e[2]&&r){let o=e[2](r(n));if(t.dirty===void 0)return o;if(typeof o=="object"){let c=[],u=Math.max(t.dirty.length,o.length);for(let l=0;l<u;l+=1)c[l]=t.dirty[l]|o[l];return c}return t.dirty|o}return t.dirty}function et(e,t,n,r,o,c){if(o){let u=he(t,n,r,c);e.p(u,o)}}function nt(e){if(e.ctx.length>32){let t=[],n=e.ctx.length/32;for(let r=0;r<n;r++)t[r]=-1;return t}return-1}function at(e){let t={};for(let n in e)n[0]!=="$"&&(t[n]=e[n]);return t}var pe=typeof window<"u"?window:typeof globalThis<"u"?globalThis:global,Wt=class e{constructor(t){this.options=t,this._listeners="WeakMap"in pe?new WeakMap:void 0}observe(t,n){return this._listeners.set(t,n),this._getObserver().observe(t,this.options),()=>{this._listeners.delete(t),this._observer.unobserve(t)}}_getObserver(){var t;return(t=this._observer)!==null&&t!==void 0?t:this._observer=new ResizeObserver(n=>{var r;for(let o of n)e.entries.set(o.target,o),(r=this._listeners.get(o.target))===null||r===void 0||r(o)})}};Wt.entries="WeakMap"in pe?new WeakMap:void 0;var me=!1;function Be(){me=!0}function $e(){me=!1}function Nt(e,t){e.appendChild(t)}function S(e,t,n){e.insertBefore(t,n||null)}function O(e){e.parentNode&&e.parentNode.removeChild(e)}function H(e){return document.createElement(e)}function K(e){return document.createTextNode(e)}function Kt(){return K(" ")}function q(){return K("")}function Vt(e,t,n,r){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n,r)}function He(e,t,n){n==null?e.removeAttribute(t):e.getAttribute(t)!==n&&e.setAttribute(t,n)}var We=["width","height"];function kt(e,t){let n=Object.getOwnPropertyDescriptors(e.__proto__);for(let r in t)t[r]==null?e.removeAttribute(r):r==="style"?e.style.cssText=t[r]:r==="__value"?e.value=e[r]=t[r]:n[r]&&n[r].set&&We.indexOf(r)===-1?e[r]=t[r]:He(e,r,t[r])}function Xe(e){return Array.from(e.childNodes)}function ge(e,t){t=""+t,e.data!==t&&(e.data=t)}function Ge(e,t,{bubbles:n=!1,cancelable:r=!1}={}){let o=document.createEvent("CustomEvent");return o.initCustomEvent(e,n,r,t),o}function rt(e,t){return new e(t)}var yt;function gt(e){yt=e}function vt(){if(!yt)throw new Error("Function called outside component initialization");return yt}function Yt(e){vt().$$.on_mount.push(e)}function Ft(e){vt().$$.on_destroy.push(e)}function Zt(){let e=vt();return(t,n,{cancelable:r=!1}={})=>{let o=e.$$.callbacks[t];if(o){let c=Ge(t,n,{cancelable:r});return o.slice().forEach(u=>{u.call(e,c)}),!c.defaultPrevented}return!0}}function xt(e,t){return vt().$$.context.set(e,t),t}function ft(e){return vt().$$.context.get(e)}var lt=[];var wt=[],ut=[],fe=[],Je=Promise.resolve(),Xt=!1;function Ke(){Xt||(Xt=!0,Je.then(be))}function Gt(e){ut.push(e)}var Ht=new Set,ct=0;function be(){if(ct!==0)return;let e=yt;do{try{for(;ct<lt.length;){let t=lt[ct];ct++,gt(t),Ve(t.$$)}}catch(t){throw lt.length=0,ct=0,t}for(gt(null),lt.length=0,ct=0;wt.length;)wt.pop()();for(let t=0;t<ut.length;t+=1){let n=ut[t];Ht.has(n)||(Ht.add(n),n())}ut.length=0}while(lt.length);for(;fe.length;)fe.pop()();Xt=!1,Ht.clear(),gt(e)}function Ve(e){if(e.fragment!==null){e.update(),Z(e.before_update);let t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(Gt)}}function Ye(e){let t=[],n=[];ut.forEach(r=>e.indexOf(r)===-1?t.push(r):n.push(r)),n.forEach(r=>r()),ut=t}var Tt=new Set,Y;function U(){Y={r:0,c:[],p:Y}}function z(){Y.r||Z(Y.c),Y=Y.p}function F(e,t){e&&e.i&&(Tt.delete(e),e.i(t))}function x(e,t,n,r){if(e&&e.o){if(Tt.has(e))return;Tt.add(e),Y.c.push(()=>{Tt.delete(e),r&&(n&&e.d(1),r())}),e.o(t)}else r&&r()}function ot(e,t){let n={},r={},o={$$scope:1},c=e.length;for(;c--;){let u=e[c],l=t[c];if(l){for(let i in u)i in l||(r[i]=1);for(let i in l)o[i]||(n[i]=l[i],o[i]=1);e[c]=l}else for(let i in u)o[i]=1}for(let u in r)u in n||(n[u]=void 0);return n}function Dt(e){return typeof e=="object"&&e!==null?e:{}}var Ze=["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","inert","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"],$n=new Set([...Ze]);function I(e){e&&e.c()}function P(e,t,n,r){let{fragment:o,after_update:c}=e.$$;o&&o.m(t,n),r||Gt(()=>{let u=e.$$.on_mount.map(Jt).filter(bt);e.$$.on_destroy?e.$$.on_destroy.push(...u):Z(u),e.$$.on_mount=[]}),c.forEach(Gt)}function T(e,t){let n=e.$$;n.fragment!==null&&(Ye(n.after_update),Z(n.on_destroy),n.fragment&&n.fragment.d(t),n.on_destroy=n.fragment=null,n.ctx=[])}function Qe(e,t){e.$$.dirty[0]===-1&&(lt.push(e),Ke(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function B(e,t,n,r,o,c,u,l=[-1]){let i=yt;gt(e);let s=e.$$={fragment:null,ctx:[],props:c,update:j,not_equal:o,bound:ae(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(i?i.$$.context:[])),callbacks:ae(),dirty:l,skip_bound:!1,root:t.target||i.$$.root};u&&u(s.root);let a=!1;if(s.ctx=n?n(e,t.props||{},(p,m,...k)=>{let v=k.length?k[0]:m;return s.ctx&&o(s.ctx[p],s.ctx[p]=v)&&(!s.skip_bound&&s.bound[p]&&s.bound[p](v),a&&Qe(e,p)),m}):[],s.update(),a=!0,Z(s.before_update),s.fragment=r?r(s.ctx):!1,t.target){if(t.hydrate){Be();let p=Xe(t.target);s.fragment&&s.fragment.l(p),p.forEach(O)}else s.fragment&&s.fragment.c();t.intro&&F(e.$$.fragment),P(e,t.target,t.anchor,t.customElement),$e(),be()}gt(i)}var tn;typeof HTMLElement=="function"&&(tn=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){let{on_mount:e}=this.$$;this.$$.on_disconnect=e.map(Jt).filter(bt);for(let t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(e,t,n){this[e]=n}disconnectedCallback(){Z(this.$$.on_disconnect)}$destroy(){T(this,1),this.$destroy=j}$on(e,t){if(!bt(t))return j;let n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(t),()=>{let r=n.indexOf(t);r!==-1&&n.splice(r,1)}}$set(e){this.$$set&&!de(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}});var D=class{$destroy(){T(this,1),this.$destroy=j}$on(t,n){if(!bt(n))return j;let r=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return r.push(n),()=>{let o=r.indexOf(n);o!==-1&&r.splice(o,1)}}$set(t){this.$$set&&!de(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}};var dt=[];function V(e,t=j){let n,r=new Set;function o(l){if(M(e,l)&&(e=l,n)){let i=!dt.length;for(let s of r)s[1](),dt.push(s,e);if(i){for(let s=0;s<dt.length;s+=2)dt[s][0](dt[s+1]);dt.length=0}}}function c(l){o(l(e))}function u(l,i=j){let s=[l,i];return r.add(s),r.size===1&&(n=t(o)||j),l(e),()=>{r.delete(s),r.size===0&&n&&(n(),n=null)}}return{set:o,update:c,subscribe:u}}var en=Object.create,we=Object.defineProperty,nn=Object.getOwnPropertyDescriptor,rn=Object.getOwnPropertyNames,on=Object.getPrototypeOf,sn=Object.prototype.hasOwnProperty,Ot=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),cn=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of rn(t))!sn.call(e,o)&&o!==n&&we(e,o,{get:()=>t[o],enumerable:!(r=nn(t,o))||r.enumerable});return e},ln=(e,t,n)=>(n=e!=null?en(on(e)):{},cn(t||!e||!e.__esModule?we(n,"default",{value:e,enumerable:!0}):n,e)),un=Ot((e,t)=>{"use strict";t.exports=n=>encodeURIComponent(n).replace(/[!'()*]/g,r=>`%${r.charCodeAt(0).toString(16).toUpperCase()}`)}),an=Ot((e,t)=>{"use strict";var n="%[a-f0-9]{2}",r=new RegExp(n,"gi"),o=new RegExp("("+n+")+","gi");function c(i,s){try{return decodeURIComponent(i.join(""))}catch{}if(i.length===1)return i;s=s||1;var a=i.slice(0,s),p=i.slice(s);return Array.prototype.concat.call([],c(a),c(p))}function u(i){try{return decodeURIComponent(i)}catch{for(var s=i.match(r),a=1;a<s.length;a++)i=c(s,a).join(""),s=i.match(r);return i}}function l(i){for(var s={"%FE%FF":"\uFFFD\uFFFD","%FF%FE":"\uFFFD\uFFFD"},a=o.exec(i);a;){try{s[a[0]]=decodeURIComponent(a[0])}catch{var p=u(a[0]);p!==a[0]&&(s[a[0]]=p)}a=o.exec(i)}s["%C2"]="\uFFFD";for(var m=Object.keys(s),k=0;k<m.length;k++){var v=m[k];i=i.replace(new RegExp(v,"g"),s[v])}return i}t.exports=function(i){if(typeof i!="string")throw new TypeError("Expected `encodedURI` to be of type `string`, got `"+typeof i+"`");try{return i=i.replace(/\+/g," "),decodeURIComponent(i)}catch{return l(i)}}}),fn=Ot((e,t)=>{"use strict";t.exports=(n,r)=>{if(!(typeof n=="string"&&typeof r=="string"))throw new TypeError("Expected the arguments to be of type `string`");if(r==="")return[n];let o=n.indexOf(r);return o===-1?[n]:[n.slice(0,o),n.slice(o+r.length)]}}),dn=Ot((e,t)=>{"use strict";t.exports=function(n,r){for(var o={},c=Object.keys(n),u=Array.isArray(r),l=0;l<c.length;l++){var i=c[l],s=n[i];(u?r.indexOf(i)!==-1:r(i,s,n))&&(o[i]=s)}return o}}),_n=Ot(e=>{"use strict";var t=un(),n=an(),r=fn(),o=dn(),c=f=>f==null;function u(f){switch(f.arrayFormat){case"index":return d=>(h,_)=>{let g=h.length;return _===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?h:_===null?[...h,[s(d,f),"[",g,"]"].join("")]:[...h,[s(d,f),"[",s(g,f),"]=",s(_,f)].join("")]};case"bracket":return d=>(h,_)=>_===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?h:_===null?[...h,[s(d,f),"[]"].join("")]:[...h,[s(d,f),"[]=",s(_,f)].join("")];case"comma":case"separator":return d=>(h,_)=>_==null||_.length===0?h:h.length===0?[[s(d,f),"=",s(_,f)].join("")]:[[h,s(_,f)].join(f.arrayFormatSeparator)];default:return d=>(h,_)=>_===void 0||f.skipNull&&_===null||f.skipEmptyString&&_===""?h:_===null?[...h,s(d,f)]:[...h,[s(d,f),"=",s(_,f)].join("")]}}function l(f){let d;switch(f.arrayFormat){case"index":return(h,_,g)=>{if(d=/\[(\d*)\]$/.exec(h),h=h.replace(/\[\d*\]$/,""),!d){g[h]=_;return}g[h]===void 0&&(g[h]={}),g[h][d[1]]=_};case"bracket":return(h,_,g)=>{if(d=/(\[\])$/.exec(h),h=h.replace(/\[\]$/,""),!d){g[h]=_;return}if(g[h]===void 0){g[h]=[_];return}g[h]=[].concat(g[h],_)};case"comma":case"separator":return(h,_,g)=>{let E=typeof _=="string"&&_.includes(f.arrayFormatSeparator),y=typeof _=="string"&&!E&&a(_,f).includes(f.arrayFormatSeparator);_=y?a(_,f):_;let C=E||y?_.split(f.arrayFormatSeparator).map(b=>a(b,f)):_===null?_:a(_,f);g[h]=C};default:return(h,_,g)=>{if(g[h]===void 0){g[h]=_;return}g[h]=[].concat(g[h],_)}}}function i(f){if(typeof f!="string"||f.length!==1)throw new TypeError("arrayFormatSeparator must be single character string")}function s(f,d){return d.encode?d.strict?t(f):encodeURIComponent(f):f}function a(f,d){return d.decode?n(f):f}function p(f){return Array.isArray(f)?f.sort():typeof f=="object"?p(Object.keys(f)).sort((d,h)=>Number(d)-Number(h)).map(d=>f[d]):f}function m(f){let d=f.indexOf("#");return d!==-1&&(f=f.slice(0,d)),f}function k(f){let d="",h=f.indexOf("#");return h!==-1&&(d=f.slice(h)),d}function v(f){f=m(f);let d=f.indexOf("?");return d===-1?"":f.slice(d+1)}function R(f,d){return d.parseNumbers&&!Number.isNaN(Number(f))&&typeof f=="string"&&f.trim()!==""?f=Number(f):d.parseBooleans&&f!==null&&(f.toLowerCase()==="true"||f.toLowerCase()==="false")&&(f=f.toLowerCase()==="true"),f}function A(f,d){d=Object.assign({decode:!0,sort:!0,arrayFormat:"none",arrayFormatSeparator:",",parseNumbers:!1,parseBooleans:!1},d),i(d.arrayFormatSeparator);let h=l(d),_=Object.create(null);if(typeof f!="string"||(f=f.trim().replace(/^[?#&]/,""),!f))return _;for(let g of f.split("&")){if(g==="")continue;let[E,y]=r(d.decode?g.replace(/\+/g," "):g,"=");y=y===void 0?null:["comma","separator"].includes(d.arrayFormat)?y:a(y,d),h(a(E,d),y,_)}for(let g of Object.keys(_)){let E=_[g];if(typeof E=="object"&&E!==null)for(let y of Object.keys(E))E[y]=R(E[y],d);else _[g]=R(E,d)}return d.sort===!1?_:(d.sort===!0?Object.keys(_).sort():Object.keys(_).sort(d.sort)).reduce((g,E)=>{let y=_[E];return y&&typeof y=="object"&&!Array.isArray(y)?g[E]=p(y):g[E]=y,g},Object.create(null))}e.extract=v,e.parse=A,e.stringify=(f,d)=>{if(!f)return"";d=Object.assign({encode:!0,strict:!0,arrayFormat:"none",arrayFormatSeparator:","},d),i(d.arrayFormatSeparator);let h=y=>d.skipNull&&c(f[y])||d.skipEmptyString&&f[y]==="",_=u(d),g={};for(let y of Object.keys(f))h(y)||(g[y]=f[y]);let E=Object.keys(g);return d.sort!==!1&&E.sort(d.sort),E.map(y=>{let C=f[y];return C===void 0?"":C===null?s(y,d):Array.isArray(C)?C.reduce(_(y),[]).join("&"):s(y,d)+"="+s(C,d)}).filter(y=>y.length>0).join("&")},e.parseUrl=(f,d)=>{d=Object.assign({decode:!0},d);let[h,_]=r(f,"#");return Object.assign({url:h.split("?")[0]||"",query:A(v(f),d)},d&&d.parseFragmentIdentifier&&_?{fragmentIdentifier:a(_,d)}:{})},e.stringifyUrl=(f,d)=>{d=Object.assign({encode:!0,strict:!0},d);let h=m(f.url).split("?")[0]||"",_=e.extract(f.url),g=e.parse(_,{sort:!1}),E=Object.assign(g,f.query),y=e.stringify(E,d);y&&(y=`?${y}`);let C=k(f.url);return f.fragmentIdentifier&&(C=`#${s(f.fragmentIdentifier,d)}`),`${h}${y}${C}`},e.pick=(f,d,h)=>{h=Object.assign({parseFragmentIdentifier:!0},h);let{url:_,query:g,fragmentIdentifier:E}=e.parseUrl(f,h);return e.stringifyUrl({url:_,query:o(g,d),fragmentIdentifier:E},h)},e.exclude=(f,d,h)=>{let _=Array.isArray(d)?g=>!d.includes(g):(g,E)=>!d(g,E);return e.pick(f,_,h)}}),ke=ln(_n()),Et=function(e){function t(n,r){var o="Unreachable '"+(n!=="/"?n.replace(/\/$/,""):n)+"', segment '"+r+"' is not defined";e.call(this,o),this.message=o,this.route=n,this.path=r}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Error);function ve(e,t){var n,r,o=-100,c=[];n=e.replace(/[-$.]/g,"\\$&").replace(/\(/g,"(?:").replace(/\)/g,")?").replace(/([:*]\w+)(?:<([^<>]+?)>)?/g,function(i,s,a){return c.push(s.substr(1)),s.charAt()===":"?(o+=100,"((?!#)"+(a||"[^#/]+?")+")"):(r=!0,o+=500,"((?!#)"+(a||"[^#]+?")+")")});try{n=new RegExp("^"+n+"$")}catch{throw new TypeError("Invalid route expression, given '"+t+"'")}var u=e.includes("#")?.5:1,l=e.length*o*u;return{keys:c,regex:n,_depth:l,_isSplat:r}}var _t=function(e,t){var n=ve(e,t),r=n.keys,o=n.regex,c=n._depth,u=n._isSplat;function l(i){var s=i.match(o);if(s)return r.reduce(function(a,p,m){return a[p]=typeof s[m+1]=="string"?decodeURIComponent(s[m+1]):null,a},{})}return l.regex=o,l.keys=r,{_isSplat:u,_depth:c,match:l}};_t.push=function(e,t,n,r){var o=t[e]||(t[e]={});return o.pattern||(o.pattern=new _t(e,r),o.route=(n||"").replace(/\/$/,"")||"/"),t.keys=t.keys||[],t.keys.includes(e)||(t.keys.push(e),_t.sort(t)),o};_t.sort=function(e){e.keys.sort(function(t,n){return e[t].pattern._depth-e[n].pattern._depth})};function Fe(e,t){return""+(t&&t!=="/"?t:"")+(e||"")}function Mt(e,t){var n=e.match(/<[^<>]*\/[^<>]*>/);if(n)throw new TypeError("RegExp cannot contain slashes, given '"+n+"'");var r=e.split(/(?=\/|#)/),o=[];r[0]!=="/"&&r.unshift("/"),r.some(function(c,u){var l=o.slice(1).concat(c).join("")||null,i=r.slice(u+1).join("")||null,s=t(c,l,i?""+(c!=="/"?c:"")+i:null);return o.push(c),s})}function hn(e,t){var n=t.refs,r={},o=[],c;return Mt(e,function(u,l,i){if(!t.keys)throw new Et(e,u);var s;if(t.keys.some(function(a){var p=t[a].pattern,m=p.match,k=p._length,v=p._isSplat,R=m(v&&i||u);if(R){var A=(n[t[a].route]||[]).concat(n[t[a].route+"/"]||[]).concat(n[t[a].route+"#"]||[]);return Object.assign(r,R),A.forEach(function(f){if(!o.some(function(_){return _.key===f})){var d=Object.assign({},n[f]),h=!1;d.exact?h=i===null:h=!(u&&l===null)||u===l||v||!i,d.matches=h,d.params=Object.assign({},r),d.route=d.fullpath,d.depth+=m.keys.length,d.path=v&&i||l||u,delete d.fullpath,o.push(d)}}),i===null&&!t[a].keys?!0:!v&&!i&&t.keys.some(function(f){return f.includes("*")})?!1:(c=v,t=t[a],s=!0,!0)}return!1}),!(s||t.keys.some(function(a){return t[a].pattern.match(u)})))throw new Et(e,u);return c||!s}),o.sort(function(u,l){return l.fallback&&!u.fallback?-1:u.fallback&&!l.fallback?1:l.route.includes("#")&&!u.route.includes("#")?-1:u.route.includes("#")&&!l.route.includes("#")?1:u.depth-l.depth})}function ye(e,t,n){for(var r=hn.bind(null,e,t),o=[];n>0;){n-=1;try{return r(o)}catch(c){if(n>0)return r(o);throw c}}}function pn(e,t,n,r){var o=Fe(e,n),c=o.split(/(?=[#:/*.]\w)/g).length,u=Object.assign({},r,{fullpath:o,depth:c});if(!e||!"#/".includes(e.charAt()))throw new TypeError("Routes should have a valid path, given "+JSON.stringify(e));if(!u.key)throw new TypeError("Routes should have a key, given "+JSON.stringify(u));t.refs[u.key]=u,t.refs[o]=t.refs[o]?t.refs[o].concat(u.key):[u.key];var l=t;return Mt(o,function(i,s){l=_t.push(i,l,s,o)}),o}function mn(e,t,n){var r=Fe(e,n),o=t,c=null,u=null;if(Mt(r,function(i){if(!o)return c=null,!0;if(!o.keys)throw new Et(e,i);u=i,c=o,o=o[u]}),!(c&&u))throw new Et(e,u);if(c===t&&(c=t["/"]),c.route!==u){var l=c.keys.indexOf(u);if(l===-1)throw new Et(e,u);c.keys.splice(l,1),_t.sort(c),delete c[u]}c.route===o.route&&delete t.refs[r]}var xe=function(){var e={refs:{}},t=[];return{routes:e,resolve:function(n,r){var o=n.split("?")[0],c=[];Mt(o,function(u,l,i){try{r(null,ye(l,e,2).filter(function(s){return c.includes(s.route)?!1:(c.push(s.route),!0)}),l)}catch(s){r(s,[])}})},mount:function(n,r){n!=="/"&&t.push(n),r(),t.pop()},find:function(n,r){return ye(n,e,r===!0?2:r||1)},add:function(n,r){return pn(n,e,t.join(""),r)},rm:function(n){return mn(n,e,t.join(""))}}};xe.matches=function(e,t){return ve(e,t).regex.test(t)};var Pt=xe,Ee=ke.parse,Oe=ke.stringify;var St={},Se=document.getElementsByTagName("base"),gn=Se[0]&&Se[0].href||"/",it=gn.replace(window.location.origin,""),N=V({path:"/",query:{},params:{},initial:!0}),Ct={},Qt={},Ce=window.location.origin==="null";function je(e){return typeof e=="boolean"&&(Ce=!!e),Ce}Object.defineProperty(N,"hashchange",{set:e=>je(e),get:()=>je(),configurable:!1,enumerable:!1});function te(e,t,n){let r=N.hashchange?window.location.hash.replace("#",""):window.location.pathname;e.charAt()!=="/"&&(e=r+e),r+window.location.hash+window.location.search!==e&&t(e),typeof n=="function"&&n()}function W(e,t){return e!=="/"||t?e.replace(/\/$/,""):e}function jt(e,t){let{reload:n,replace:r,params:o,queryParams:c}=t||{};if(!e||typeof e!="string"||e[0]!=="/"&&e[0]!=="#")throw new Error(`Expecting '/${e}' or '#${e}', given '${e}'`);if(o&&(e=e.replace(/:([a-zA-Z][a-zA-Z0-9_-]*)/g,(u,l)=>o[l])),c){let u=Oe(c);u&&(e+=`?${u}`)}if(N.hashchange){let u=e.replace(/^#|#$/g,"");it!=="/"&&(u=u.replace(W(it),"")),window.location.hash=u!=="/"?u:"";return}if(n||!window.history.pushState||!window.dispatchEvent){window.location.href=e;return}te(e,u=>{window.history[r?"replaceState":"pushState"](null,"",u),window.dispatchEvent(new Event("popstate"))})}function It(e,t){let{props:n,...r}=e;return t.forEach(o=>{delete r[o]}),{...n,...r}}function Lt(e,t,n){return St[[e,t,n]]||(n!==!0&&t.indexOf(e)===0?St[[e,t,n]]=/^[#/?]?$/.test(t.substr(e.length,1)):e.includes("*")||e.includes(":")?St[[e,t,n]]=Pt.matches(e,t):St[[e,t,n]]=W(t)===e),St[[e,t,n]]}function Re(e){return e&&typeof e.then=="function"}function qt(e){return e&&e.prototype}var pt=new Pt,mt=V({}),ht={},st={},ee=[],Ut=0,Ae,Rt;N.subscribe(e=>{st.router=e});mt.subscribe(e=>{st.routeInfo=e});function ne(e,t){mt.update(n=>({...n,[t]:{...st.router,failure:e}}))}function Te(e,t,n){e.some(r=>{if(r.key&&(n||r.matches&&!st.routeInfo[r.key])){if(r.redirect&&(r.condition===null||r.condition(st.router)!==!0))return r.exact&&st.router.path!==r.path?!1:(jt(r.redirect),!0);if(r.exact&&r.path!==Rt&&Rt.replace(/[#/]$/,"")!==r.path||n&&r.fallback)return!1;Object.assign(t,r.params),mt.update(o=>({...o,[r.key]:{...st.router,...r}}))}return!1})}function bn(){let e=N.hashchange?window.location.hash||"/":window.location.href.replace(window.location.origin,""),t;if(it!=="/"&&(e=e.replace(W(it),"")),/^#[\w-]+$/.test(window.location.hash)&&document.querySelector(window.location.hash)&&Rt===e.split("#")[0])return;let n=e.replace("/#","#").replace(/^#\//,"/"),[r,o]=n.split("?"),c=r.replace(/\/?$/,"/"),u={};if(Rt!==n&&(Rt=n,N.set({path:W(c),query:Ee(o),params:u})),mt.set({}),pt.resolve(c,(i,s)=>{if(i){t=i;return}Te(s,u)}),!t)try{Te(pt.find(c),u,!0)}catch{}t&&t.path!=="/"?console.debug(t):t=null,ee.forEach(i=>i()),ee=[];let l;Object.keys(ht).forEach(i=>{if(Lt(i,c,!1)){let s=ht[i].callback;s(t),ee.push(s)}!l&&ht[i].fallback&&(l=ht[i].fallback)}),t&&l&&ne(t,l)}function At(){clearTimeout(Ae),Ae=setTimeout(bn)}function Ne(e,t,n){return Ut||window.addEventListener("popstate",At,!1),(!ht[e]||t)&&(ht[e]={fallback:t,callback:n}),Ut+=1,()=>{Ut-=1,Ut||window.removeEventListener("popstate",At,!1)}}var yn=e=>({router:e&2}),De=e=>({router:e[1]});function Me(e){let t,n=e[8].default,r=Q(n,e,e[7],De);return{c(){r&&r.c()},m(o,c){r&&r.m(o,c),t=!0},p(o,c){r&&r.p&&(!t||c&130)&&et(r,n,o,o[7],t?tt(n,o[7],c,yn):nt(o[7]),De)},i(o){t||(F(r,o),t=!0)},o(o){x(r,o),t=!1},d(o){r&&r.d(o)}}}function wn(e){let t,n,r=!e[0]&&Me(e);return{c(){r&&r.c(),t=q()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,[c]){o[0]?r&&(U(),x(r,1,1,()=>{r=null}),z()):r?(r.p(o,c),c&1&&F(r,1)):(r=Me(o),r.c(),F(r,1),r.m(t.parentNode,t))},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function kn(e){try{pt.rm(e)}catch{}At()}function vn(e,t,n){let r,o;G(e,N,_=>n(1,r=_));let{$$slots:c={},$$scope:u}=t,l,i,s,{key:a=""}=t,{path:p="/"}=t,{pending:m=null}=t,{disabled:k=!1}=t,{condition:v=null}=t,R=ft(Ct),A=R?R.basePath:V(p);G(e,A,_=>n(12,o=_));let f=o!==p&&o!=="/"?`${o}${p!=="/"?p:""}`:p;function d(_,g,E){_=_||`route-${Math.random().toString(36).substr(2)}`;let y=[a,_].filter(Boolean).join("."),C={key:y,...E},b;return pt.mount(f,()=>{b=pt.add(g,C),s=C.fallback&&y||s}),At(),[y,b]}function h(_){i=_,i&&s&&ne(i,s)}return Yt(()=>{l=Ne(f,s,h)}),Ft(()=>{l&&l()}),xt(Ct,{basePath:A,assignRoute:d,unassignRoute:kn,pendingComponent:m}),e.$$set=_=>{"key"in _&&n(3,a=_.key),"path"in _&&n(4,p=_.path),"pending"in _&&n(5,m=_.pending),"disabled"in _&&n(0,k=_.disabled),"condition"in _&&n(6,v=_.condition),"$$scope"in _&&n(7,u=_.$$scope)},e.$$.update=()=>{e.$$.dirty&66&&v&&n(0,k=!v(r))},[k,r,A,a,p,m,v,u,c]}var re=class extends D{constructor(t){super(),B(this,t,vn,wn,M,{key:3,path:4,pending:5,disabled:0,condition:6})}},oe=re;var Fn=e=>e&8,xn=e=>({}),Pe=e=>({...e[3]});function Ie(e){let t,n,r,o,c=[Sn,On,En],u=[];function l(i,s){return i[4]?i[0]?1:2:0}return t=l(e,-1),n=u[t]=c[t](e),{c(){n.c(),r=q()},m(i,s){u[t].m(i,s),S(i,r,s),o=!0},p(i,s){let a=t;t=l(i,s),t===a?u[t].p(i,s):(U(),x(u[a],1,1,()=>{u[a]=null}),z(),n=u[t],n?n.p(i,s):(n=u[t]=c[t](i),n.c()),F(n,1),n.m(r.parentNode,r))},i(i){o||(F(n),o=!0)},o(i){x(n),o=!1},d(i){u[t].d(i),i&&O(r)}}}function En(e){let t,n=e[17].default,r=Q(n,e,e[16],Pe);return{c(){r&&r.c()},m(o,c){r&&r.m(o,c),t=!0},p(o,c){r&&r.p&&(!t||c&65544)&&et(r,n,o,o[16],Fn(c)||!t?nt(o[16]):tt(n,o[16],c,xn),Pe)},i(o){t||(F(r,o),t=!0)},o(o){x(r,o),t=!1},d(o){r&&r.d(o)}}}function On(e){let t,n,r,o=[e[3]];var c=e[0];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=L(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=q()},m(l,i){t&&P(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(i&1&&c!==(c=l[0])){if(t){U();let a=t;x(a.$$.fragment,1,0,()=>{T(a,1)}),z()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),P(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&T(t,l)}}}function Sn(e){let t,n,r=(e[1]||e[5])&&Le(e);return{c(){r&&r.c(),t=q()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,c){o[1]||o[5]?r?(r.p(o,c),c&2&&F(r,1)):(r=Le(o),r.c(),F(r,1),r.m(t.parentNode,t)):r&&(U(),x(r,1,1,()=>{r=null}),z())},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function Le(e){let t,n,r,o,c,u,l=[Rn,jn,Cn],i=[];function s(a,p){return p&2&&(t=null),t==null&&(t=!!qt(a[1])),t?0:(n==null&&(n=!!qt(a[5])),n?1:2)}return r=s(e,-1),o=i[r]=l[r](e),{c(){o.c(),c=q()},m(a,p){i[r].m(a,p),S(a,c,p),u=!0},p(a,p){let m=r;r=s(a,p),r===m?i[r].p(a,p):(U(),x(i[m],1,1,()=>{i[m]=null}),z(),o=i[r],o?o.p(a,p):(o=i[r]=l[r](a),o.c()),F(o,1),o.m(c.parentNode,c))},i(a){u||(F(o),u=!0)},o(a){x(o),u=!1},d(a){i[r].d(a),a&&O(c)}}}function Cn(e){let t=(e[1]||e[5])+"",n;return{c(){n=K(t)},m(r,o){S(r,n,o)},p(r,o){o&2&&t!==(t=(r[1]||r[5])+"")&&ge(n,t)},i:j,o:j,d(r){r&&O(n)}}}function jn(e){let t,n,r,o=[e[3]];var c=e[5];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=L(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=q()},m(l,i){t&&P(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(c!==(c=l[5])){if(t){U();let a=t;x(a.$$.fragment,1,0,()=>{T(a,1)}),z()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),P(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&T(t,l)}}}function Rn(e){let t,n,r,o=[e[3]];var c=e[1];function u(l){let i={};for(let s=0;s<o.length;s+=1)i=L(i,o[s]);return{props:i}}return c&&(t=rt(c,u(e))),{c(){t&&I(t.$$.fragment),n=q()},m(l,i){t&&P(t,l,i),S(l,n,i),r=!0},p(l,i){let s=i&8?ot(o,[Dt(l[3])]):{};if(i&2&&c!==(c=l[1])){if(t){U();let a=t;x(a.$$.fragment,1,0,()=>{T(a,1)}),z()}c?(t=rt(c,u(l)),I(t.$$.fragment),F(t.$$.fragment,1),P(t,n.parentNode,n)):t=null}else c&&t.$set(s)},i(l){r||(t&&F(t.$$.fragment,l),r=!0)},o(l){t&&x(t.$$.fragment,l),r=!1},d(l){l&&O(n),t&&T(t,l)}}}function An(e){let t,n,r=e[2]&&Ie(e);return{c(){r&&r.c(),t=q()},m(o,c){r&&r.m(o,c),S(o,t,c),n=!0},p(o,[c]){o[2]?r?(r.p(o,c),c&4&&F(r,1)):(r=Ie(o),r.c(),F(r,1),r.m(t.parentNode,t)):r&&(U(),x(r,1,1,()=>{r=null}),z())},i(o){n||(F(r),n=!0)},o(o){x(r),n=!1},d(o){r&&r.d(o),o&&O(t)}}}function Tn(e,t,n){let r,o,c;G(e,N,w=>n(14,r=w)),G(e,mt,w=>n(15,o=w));let{$$slots:u={},$$scope:l}=t,{key:i=null}=t,{path:s="/"}=t,{exact:a=null}=t,{pending:p=null}=t,{disabled:m=!1}=t,{fallback:k=null}=t,{component:v=null}=t,{condition:R=null}=t,{redirect:A=null}=t,f=["key","path","exact","pending","disabled","fallback","component","condition","redirect"],d=ft(Qt),h=ft(Ct),{assignRoute:_,unassignRoute:g,pendingComponent:E}=h||{},y=d?d.routePath:V(s);G(e,y,w=>n(19,c=w));let C=null,b={},X,$,J=c!==s&&c!=="/"?`${c}${s!=="/"?s:""}`:s;function $t(){let w=s!==J&&J.substr(-1)!=="/"?`${J}/`:J;n(7,[i,X]=_(i,w,{condition:R,redirect:A,fallback:k,exact:a}),i)}return $t(),Ft(()=>{g&&g(X)}),xt(Qt,{routePath:y}),e.$$set=w=>{n(27,t=L(L({},t),at(w))),"key"in w&&n(7,i=w.key),"path"in w&&n(8,s=w.path),"exact"in w&&n(9,a=w.exact),"pending"in w&&n(1,p=w.pending),"disabled"in w&&n(10,m=w.disabled),"fallback"in w&&n(11,k=w.fallback),"component"in w&&n(0,v=w.component),"condition"in w&&n(12,R=w.condition),"redirect"in w&&n(13,A=w.redirect),"$$scope"in w&&n(16,l=w.$$scope)},e.$$.update=()=>{if(i&&(n(2,C=!m&&o[i]),n(3,b=It(t,f)),n(3,b.router=C,b)),e.$$.dirty&16389&&C){for(let w in r.params)typeof C.params[w]>"u"&&n(2,C.params[w]=r.params[w],C);v?qt(v)?n(4,$=!0):Re(v)?v.then(w=>{n(0,v=w.default),n(4,$=!0)}):v().then(w=>{n(0,v=w.default),n(4,$=!0)}):n(4,$=!0)}},t=at(t),[v,p,C,b,$,E,y,i,s,a,m,k,R,A,r,o,l,u]}var ie=class extends D{constructor(t){super(),B(this,t,Tn,An,M,{key:7,path:8,exact:9,pending:1,disabled:10,fallback:11,component:0,condition:12,redirect:13})}},zt=ie;function Nn(e){let t,n,r,o,c,u=e[17].default,l=Q(u,e,e[16],null),i=[e[6],{href:n=W(e[5]||e[1])},{class:e[0]},{title:e[2]}],s={};for(let a=0;a<i.length;a+=1)s=L(s,i[a]);return{c(){t=H("a"),l&&l.c(),kt(t,s)},m(a,p){S(a,t,p),l&&l.m(t,null),e[19](t),r=!0,o||(c=Vt(t,"click",e[8]),o=!0)},p(a,p){l&&l.p&&(!r||p&65536)&&et(l,u,a,a[16],r?tt(u,a[16],p,null):nt(a[16]),null),kt(t,s=ot(i,[p&64&&a[6],(!r||p&34&&n!==(n=W(a[5]||a[1])))&&{href:n},(!r||p&1)&&{class:a[0]},(!r||p&4)&&{title:a[2]}]))},i(a){r||(F(l,a),r=!0)},o(a){x(l,a),r=!1},d(a){a&&O(t),l&&l.d(a),e[19](null),o=!1,c()}}}function Dn(e){let t,n,r,o,c=e[17].default,u=Q(c,e,e[16],null),l=[e[6],{class:e[0]},{title:e[2]}],i={};for(let s=0;s<l.length;s+=1)i=L(i,l[s]);return{c(){t=H("button"),u&&u.c(),kt(t,i)},m(s,a){S(s,t,a),u&&u.m(t,null),t.autofocus&&t.focus(),e[18](t),n=!0,r||(o=Vt(t,"click",e[7]),r=!0)},p(s,a){u&&u.p&&(!n||a&65536)&&et(u,c,s,s[16],n?tt(c,s[16],a,null):nt(s[16]),null),kt(t,i=ot(l,[a&64&&s[6],(!n||a&1)&&{class:s[0]},(!n||a&4)&&{title:s[2]}]))},i(s){n||(F(u,s),n=!0)},o(s){x(u,s),n=!1},d(s){s&&O(t),u&&u.d(s),e[18](null),r=!1,o()}}}function Mn(e){let t,n,r,o,c=[Dn,Nn],u=[];function l(i,s){return i[3]?0:1}return t=l(e,-1),n=u[t]=c[t](e),{c(){n.c(),r=q()},m(i,s){u[t].m(i,s),S(i,r,s),o=!0},p(i,[s]){let a=t;t=l(i,s),t===a?u[t].p(i,s):(U(),x(u[a],1,1,()=>{u[a]=null}),z(),n=u[t],n?n.p(i,s):(n=u[t]=c[t](i),n.c()),F(n,1),n.m(r.parentNode,r))},i(i){o||(F(n),o=!0)},o(i){x(n),o=!1},d(i){u[t].d(i),i&&O(r)}}}function Pn(e,t,n){let r,o;G(e,N,b=>n(15,o=b));let{$$slots:c={},$$scope:u}=t,l,i,{class:s=""}=t,a=null,{go:p=null}=t,{open:m=null}=t,{href:k=""}=t,{title:v=""}=t,{button:R=!1}=t,{exact:A=!1}=t,{reload:f=!1}=t,{replace:d=!1}=t,h=["go","open","href","class","title","button","exact","reload","replace"],_=Zt();function g(b){if(b.preventDefault(),typeof p=="string"&&window.history.length>1){p==="back"?window.history.back():p==="fwd"?window.history.forward():window.history.go(parseInt(p,10));return}if(!a&&k!==""){if(m){let X=typeof m=="string"?m:"",$=X.match(/width=(\d+)/),J=X.match(/height=(\d+)/);$&&(X+=`,left=${(window.screen.width-$[1])/2}`),J&&(X+=`,top=${(window.screen.height-J[1])/2}`),$&&!J&&(X+=`,height=${$[1]},top=${(window.screen.height-$[1])/2}`);let $t=window.open(k,"",X),w=setInterval(()=>{$t.closed&&(_("close"),clearInterval(w))},120)}else window.location.href=k;return}te(k,()=>{jt(a||"/",{reload:f,replace:d})},()=>_("click",b))}function E(b){b.metaKey||b.ctrlKey||b.button!==0||g(b)}function y(b){wt[b?"unshift":"push"](()=>{l=b,n(4,l)})}function C(b){wt[b?"unshift":"push"](()=>{l=b,n(4,l)})}return e.$$set=b=>{n(22,t=L(L({},t),at(b))),"class"in b&&n(0,s=b.class),"go"in b&&n(9,p=b.go),"open"in b&&n(10,m=b.open),"href"in b&&n(1,k=b.href),"title"in b&&n(2,v=b.title),"button"in b&&n(3,R=b.button),"exact"in b&&n(11,A=b.exact),"reload"in b&&n(12,f=b.reload),"replace"in b&&n(13,d=b.replace),"$$scope"in b&&n(16,u=b.$$scope)},e.$$.update=()=>{e.$$.dirty&2&&(/^(\w+:)?\/\//.test(k)||n(5,a=W(it,!0)+W(N.hashchange?`#${k}`:k))),e.$$.dirty&51226&&l&&o.path&&(Lt(k,o.path,A)?i||(n(14,i=!0),l.setAttribute("aria-current","page"),R&&l.setAttribute("disabled",!0)):i&&(n(14,i=!1),l.removeAttribute("disabled"),l.removeAttribute("aria-current"))),n(6,r=It(t,h))},t=at(t),[s,k,v,R,l,a,r,g,E,p,m,A,f,d,i,o,u,c,y,C]}var se=class extends D{constructor(t){super(),B(this,t,Pn,Mn,M,{class:0,go:9,open:10,href:1,title:2,button:3,exact:11,reload:12,replace:13})}},Bt=se;function In(e){let t;return{c(){t=H("h1"),t.textContent="Not found"},m(n,r){S(n,t,r)},p:j,i:j,o:j,d(n){n&&O(t)}}}var ce=class extends D{constructor(t){super(),B(this,t,null,In,M,{})}},qe=ce;function Ln(e){let t;return{c(){t=H("h1"),t.textContent="HOME"},m(n,r){S(n,t,r)},p:j,i:j,o:j,d(n){n&&O(t)}}}var le=class extends D{constructor(t){super(),B(this,t,null,Ln,M,{})}},Ue=le;function qn(e){let t;return{c(){t=K("Dashboard")},m(n,r){S(n,t,r)},d(n){n&&O(t)}}}function Un(e){let t;return{c(){t=K("Page not found")},m(n,r){S(n,t,r)},d(n){n&&O(t)}}}function zn(e){let t,n,r,o,c,u,l,i,s,a,p;return r=new Bt({props:{exact:!0,href:"/admin",$$slots:{default:[qn]},$$scope:{ctx:e}}}),c=new Bt({props:{exact:!0,href:"/admin/not-found",$$slots:{default:[Un]},$$scope:{ctx:e}}}),i=new zt({props:{exact:!0,path:"/",component:Ue}}),a=new zt({props:{fallback:!0,component:qe}}),{c(){t=H("nav"),n=H("nav"),I(r.$$.fragment),o=K(`
      | `),I(c.$$.fragment),u=Kt(),l=H("main"),I(i.$$.fragment),s=Kt(),I(a.$$.fragment)},m(m,k){S(m,t,k),Nt(t,n),P(r,n,null),Nt(n,o),P(c,n,null),S(m,u,k),S(m,l,k),P(i,l,null),Nt(l,s),P(a,l,null),p=!0},p(m,k){let v={};k&1&&(v.$$scope={dirty:k,ctx:m}),r.$set(v);let R={};k&1&&(R.$$scope={dirty:k,ctx:m}),c.$set(R)},i(m){p||(F(r.$$.fragment,m),F(c.$$.fragment,m),F(i.$$.fragment,m),F(a.$$.fragment,m),p=!0)},o(m){x(r.$$.fragment,m),x(c.$$.fragment,m),x(i.$$.fragment,m),x(a.$$.fragment,m),p=!1},d(m){m&&O(t),T(r),T(c),m&&O(u),m&&O(l),T(i),T(a)}}}function Bn(e){let t,n;return t=new oe({props:{path:"/admin",$$slots:{default:[zn]},$$scope:{ctx:e}}}),{c(){I(t.$$.fragment)},m(r,o){P(t,r,o),n=!0},p(r,[o]){let c={};o&1&&(c.$$scope={dirty:o,ctx:r}),t.$set(c)},i(r){n||(F(t.$$.fragment,r),n=!0)},o(r){x(t.$$.fragment,r),n=!1},d(r){T(t,r)}}}var ue=class extends D{constructor(t){super(),B(this,t,null,Bn,M,{})}},ze=ue;new ze({target:document.querySelector("#app")});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL3N2ZWx0ZS9pbnRlcm5hbC9pbmRleC5tanMiLCAibm9kZV9tb2R1bGVzL3N2ZWx0ZS9zdG9yZS9pbmRleC5tanMiLCAibm9kZV9tb2R1bGVzL3lydi9idWlsZC9kaXN0L3ZlbmRvci5qcyIsICJub2RlX21vZHVsZXMveXJ2L2J1aWxkL2Rpc3QvbGliL3V0aWxzLmpzIiwgIm5vZGVfbW9kdWxlcy95cnYvYnVpbGQvZGlzdC9saWIvcm91dGVyLmpzIiwgIm5vZGVfbW9kdWxlcy95cnYvYnVpbGQvZGlzdC9saWIvUm91dGVyLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMveXJ2L2J1aWxkL2Rpc3QvbGliL1JvdXRlLnN2ZWx0ZSIsICJub2RlX21vZHVsZXMveXJ2L2J1aWxkL2Rpc3QvbGliL0xpbmsuc3ZlbHRlIiwgInNyYy9hcHAvY29tcG9uZW50cy9wYWdlcy9Ob3RGb3VuZC5zdmVsdGUiLCAic3JjL2FwcC9jb21wb25lbnRzL3BhZ2VzL0hvbWUuc3ZlbHRlIiwgInNyYy9hcHAvY29tcG9uZW50cy9BcHAuc3ZlbHRlIiwgInNyYy9hcHAvc3JjL2FwcC9pbmRleC5qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy8gRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL3RoZW4vaXMtcHJvbWlzZS9ibG9iL21hc3Rlci9MSUNFTlNFXG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5sZXQgc3JjX3VybF9lcXVhbF9hbmNob3I7XG5mdW5jdGlvbiBzcmNfdXJsX2VxdWFsKGVsZW1lbnRfc3JjLCB1cmwpIHtcbiAgICBpZiAoIXNyY191cmxfZXF1YWxfYW5jaG9yKSB7XG4gICAgICAgIHNyY191cmxfZXF1YWxfYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIH1cbiAgICBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuICAgIHJldHVybiBlbGVtZW50X3NyYyA9PT0gc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZjtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pO1xufVxuZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcbiAgICBpZiAoJCRzY29wZS5jdHgubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgY29uc3QgZGlydHkgPSBbXTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gJCRzY29wZS5jdHgubGVuZ3RoIC8gMzI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRpcnR5W2ldID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcnR5O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5mdW5jdGlvbiBzcGxpdF9jc3NfdW5pdCh2YWx1ZSkge1xuICAgIGNvbnN0IHNwbGl0ID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5tYXRjaCgvXlxccyooLT9bXFxkLl0rKShbXlxcc10qKVxccyokLyk7XG4gICAgcmV0dXJuIHNwbGl0ID8gW3BhcnNlRmxvYXQoc3BsaXRbMV0pLCBzcGxpdFsyXSB8fCAncHgnXSA6IFt2YWx1ZSwgJ3B4J107XG59XG5jb25zdCBjb250ZW50ZWRpdGFibGVfdHJ1dGh5X3ZhbHVlcyA9IFsnJywgdHJ1ZSwgMSwgJ3RydWUnLCAnY29udGVudGVkaXRhYmxlJ107XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xubGV0IG5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xubGV0IHJhZiA9IGlzX2NsaWVudCA/IGNiID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuLy8gdXNlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nXG5mdW5jdGlvbiBzZXRfbm93KGZuKSB7XG4gICAgbm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgcmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xufVxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICovXG5mdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcbiAgICB0YXNrcy5jbGVhcigpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICovXG5mdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG4gICAgbGV0IHRhc2s7XG4gICAgaWYgKHRhc2tzLnNpemUgPT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG4vKipcbiAqIFJlc2l6ZSBvYnNlcnZlciBzaW5nbGV0b24uXG4gKiBPbmUgbGlzdGVuZXIgcGVyIGVsZW1lbnQgb25seSFcbiAqIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vYS9jaHJvbWl1bS5vcmcvZy9ibGluay1kZXYvYy96Nmllbk9OVWI1QS9tL0Y1LVZjVVp0QkFBSlxuICovXG5jbGFzcyBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSAnV2Vha01hcCcgaW4gZ2xvYmFscyA/IG5ldyBXZWFrTWFwKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIG9ic2VydmUoZWxlbWVudCwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnNldChlbGVtZW50LCBsaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX2dldE9ic2VydmVyKCkub2JzZXJ2ZShlbGVtZW50LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmRlbGV0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLnVub2JzZXJ2ZShlbGVtZW50KTsgLy8gdGhpcyBsaW5lIGNhbiBwcm9iYWJseSBiZSByZW1vdmVkXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9nZXRPYnNlcnZlcigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5fb2JzZXJ2ZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0aGlzLl9vYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcykgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICAgICAgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24uZW50cmllcy5zZXQoZW50cnkudGFyZ2V0LCBlbnRyeSk7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5fbGlzdGVuZXJzLmdldChlbnRyeS50YXJnZXQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EoZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfVxufVxuLy8gTmVlZHMgdG8gYmUgd3JpdHRlbiBsaWtlIHRoaXMgdG8gcGFzcyB0aGUgdHJlZS1zaGFrZS10ZXN0XG5SZXNpemVPYnNlcnZlclNpbmdsZXRvbi5lbnRyaWVzID0gJ1dlYWtNYXAnIGluIGdsb2JhbHMgPyBuZXcgV2Vha01hcCgpIDogdW5kZWZpbmVkO1xuXG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gZW5kX2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwcGVyX2JvdW5kKGxvdywgaGlnaCwga2V5LCB2YWx1ZSkge1xuICAgIC8vIFJldHVybiBmaXJzdCBpbmRleCBvZiB2YWx1ZSBsYXJnZXIgdGhhbiBpbnB1dCB2YWx1ZSBpbiB0aGUgcmFuZ2UgW2xvdywgaGlnaClcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICBjb25zdCBtaWQgPSBsb3cgKyAoKGhpZ2ggLSBsb3cpID4+IDEpO1xuICAgICAgICBpZiAoa2V5KG1pZCkgPD0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG59XG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5oeWRyYXRlX2luaXQpXG4gICAgICAgIHJldHVybjtcbiAgICB0YXJnZXQuaHlkcmF0ZV9pbml0ID0gdHJ1ZTtcbiAgICAvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG4gICAgbGV0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkTm9kZXM7XG4gICAgLy8gSWYgdGFyZ2V0IGlzIDxoZWFkPiwgdGhlcmUgbWF5IGJlIGNoaWxkcmVuIHdpdGhvdXQgY2xhaW1fb3JkZXJcbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnSEVBRCcpIHtcbiAgICAgICAgY29uc3QgbXlDaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbXlDaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gbXlDaGlsZHJlbjtcbiAgICB9XG4gICAgLypcbiAgICAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG4gICAgKiBXZSBjYW4gcmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseSBieSBmaW5kaW5nIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIG9mXG4gICAgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuICAgICogc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcbiAgICAqIGNvbXB1dGluZyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIC5jbGFpbV9vcmRlciB2YWx1ZXMuXG4gICAgKlxuICAgICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG4gICAgKiBwb3NzaWJsZS5cbiAgICAqXG4gICAgKiBQcm9vZjpcbiAgICAqIFdlIGtub3cgdGhhdCwgZ2l2ZW4gYSBzZXQgb2YgcmVvcmRlcmluZyBvcGVyYXRpb25zLCB0aGUgbm9kZXMgdGhhdCBkbyBub3QgbW92ZVxuICAgICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG4gICAgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuICAgICogc2V0IG9mIG5vZGVzIHRoYXQgZG8gbm90IG1vdmUgZm9ybSBhIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS5cbiAgICAqL1xuICAgIC8vIENvbXB1dGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgLy8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuICAgIGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcbiAgICAvLyBQcmVkZWNlc3NvciBpbmRpY2VzICsgMVxuICAgIGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuICAgIG1bMF0gPSAtMTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gY2hpbGRyZW5baV0uY2xhaW1fb3JkZXI7XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG4gICAgICAgIC8vIHdpdGggZmFzdCBwYXRoIGZvciB3aGVuIHdlIGFyZSBvbiB0aGUgY3VycmVudCBsb25nZXN0IHN1YnNlcXVlbmNlXG4gICAgICAgIGNvbnN0IHNlcUxlbiA9ICgobG9uZ2VzdCA+IDAgJiYgY2hpbGRyZW5bbVtsb25nZXN0XV0uY2xhaW1fb3JkZXIgPD0gY3VycmVudCkgPyBsb25nZXN0ICsgMSA6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIGlkeCA9PiBjaGlsZHJlblttW2lkeF1dLmNsYWltX29yZGVyLCBjdXJyZW50KSkgLSAxO1xuICAgICAgICBwW2ldID0gbVtzZXFMZW5dICsgMTtcbiAgICAgICAgY29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcbiAgICAgICAgLy8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuICAgICAgICBtW25ld0xlbl0gPSBpO1xuICAgICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcbiAgICB9XG4gICAgLy8gVGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBub2RlcyAoaW5pdGlhbGx5IHJldmVyc2VkKVxuICAgIGNvbnN0IGxpcyA9IFtdO1xuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBub2Rlcywgbm9kZXMgdGhhdCB3aWxsIGJlIG1vdmVkXG4gICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgbGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuICAgICAgICBsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG4gICAgICAgIGZvciAoOyBsYXN0ID49IGN1cjsgbGFzdC0tKSB7XG4gICAgICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC0tO1xuICAgIH1cbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcbiAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgIH1cbiAgICBsaXMucmV2ZXJzZSgpO1xuICAgIC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuICAgIHRvTW92ZS5zb3J0KChhLCBiKSA9PiBhLmNsYWltX29yZGVyIC0gYi5jbGFpbV9vcmRlcik7XG4gICAgLy8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvTW92ZVtpXS5jbGFpbV9vcmRlciA+PSBsaXNbal0uY2xhaW1fb3JkZXIpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodG9Nb3ZlW2ldLCBhbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzKHRhcmdldCwgc3R5bGVfc2hlZXRfaWQsIHN0eWxlcykge1xuICAgIGNvbnN0IGFwcGVuZF9zdHlsZXNfdG8gPSBnZXRfcm9vdF9mb3Jfc3R5bGUodGFyZ2V0KTtcbiAgICBpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuaWQgPSBzdHlsZV9zaGVldF9pZDtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gICAgICAgIGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGlmIChyb290ICYmIHJvb3QuaG9zdCkge1xuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZV9lbGVtZW50ID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICBhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuICAgIHJldHVybiBzdHlsZV9lbGVtZW50LnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlc2hlZXQobm9kZSwgc3R5bGUpIHtcbiAgICBhcHBlbmQobm9kZS5oZWFkIHx8IG5vZGUsIHN0eWxlKTtcbiAgICByZXR1cm4gc3R5bGUuc2hlZXQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSkge1xuICAgIGlmIChpc19oeWRyYXRpbmcpIHtcbiAgICAgICAgaW5pdF9oeWRyYXRlKHRhcmdldCk7XG4gICAgICAgIGlmICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPT09IHVuZGVmaW5lZCkgfHwgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLnBhcmVudE5vZGUgIT09IHRhcmdldCkpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5maXJzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNraXAgbm9kZXMgb2YgdW5kZWZpbmVkIG9yZGVyaW5nXG4gICAgICAgIHdoaWxlICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5jbGFpbV9vcmRlciA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSAhPT0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgaW5zZXJ0IGlmIHRoZSBvcmRlcmluZyBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlIG1vZGlmaWVkIG9yIHRoZSBwYXJlbnQgbm9kZSBpcyBub3QgdGFyZ2V0XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkIHx8IG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG59XG5mdW5jdGlvbiBpbnNlcnRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZyAmJiAhYW5jaG9yKSB7XG4gICAgICAgIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQgfHwgbm9kZS5uZXh0U2libGluZyAhPSBhbmNob3IpIHtcbiAgICAgICAgdGFyZ2V0Lmluc2VydEJlZm9yZShub2RlLCBhbmNob3IgfHwgbnVsbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXN0cm95X2VhY2goaXRlcmF0aW9ucywgZGV0YWNoaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVyYXRpb25zW2ldKVxuICAgICAgICAgICAgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cbmZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAoaGFzX3Byb3Aob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBjb21tZW50KGNvbnRlbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudChjb250ZW50KTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0b3BfaW1tZWRpYXRlX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC5pc1RydXN0ZWQpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuLyoqXG4gKiBMaXN0IG9mIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYWx3YXlzIGJlIHNldCB0aHJvdWdoIHRoZSBhdHRyIG1ldGhvZCxcbiAqIGJlY2F1c2UgdXBkYXRpbmcgdGhlbSB0aHJvdWdoIHRoZSBwcm9wZXJ0eSBzZXR0ZXIgZG9lc24ndCB3b3JrIHJlbGlhYmx5LlxuICogSW4gdGhlIGV4YW1wbGUgb2YgYHdpZHRoYC9gaGVpZ2h0YCwgdGhlIHByb2JsZW0gaXMgdGhhdCB0aGUgc2V0dGVyIG9ubHlcbiAqIGFjY2VwdHMgbnVtZXJpYyB2YWx1ZXMsIGJ1dCB0aGUgYXR0cmlidXRlIGNhbiBhbHNvIGJlIHNldCB0byBhIHN0cmluZyBsaWtlIGA1MCVgLlxuICogSWYgdGhpcyBsaXN0IGJlY29tZXMgdG9vIGJpZywgcmV0aGluayB0aGlzIGFwcHJvYWNoLlxuICovXG5jb25zdCBhbHdheXNfc2V0X3Rocm91Z2hfc2V0X2F0dHJpYnV0ZSA9IFsnd2lkdGgnLCAnaGVpZ2h0J107XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQgJiYgYWx3YXlzX3NldF90aHJvdWdoX3NldF9hdHRyaWJ1dGUuaW5kZXhPZihrZXkpID09PSAtMSkge1xuICAgICAgICAgICAgbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3ZnX2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgYXR0cihub2RlLCBrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwKG5vZGUsIGRhdGFfbWFwKSB7XG4gICAgT2JqZWN0LmtleXMoZGF0YV9tYXApLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBrZXksIGRhdGFfbWFwW2tleV0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEobm9kZSwgcHJvcCwgdmFsdWUpIHtcbiAgICBpZiAocHJvcCBpbiBub2RlKSB7XG4gICAgICAgIG5vZGVbcHJvcF0gPSB0eXBlb2Ygbm9kZVtwcm9wXSA9PT0gJ2Jvb2xlYW4nICYmIHZhbHVlID09PSAnJyA/IHRydWUgOiB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGF0dHIobm9kZSwgcHJvcCwgdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9keW5hbWljX2VsZW1lbnRfZGF0YSh0YWcpIHtcbiAgICByZXR1cm4gKC8tLy50ZXN0KHRhZykpID8gc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwIDogc2V0X2F0dHJpYnV0ZXM7XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGluaXRfYmluZGluZ19ncm91cChncm91cCkge1xuICAgIGxldCBfaW5wdXRzO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qIHB1c2ggKi8gcCguLi5pbnB1dHMpIHtcbiAgICAgICAgICAgIF9pbnB1dHMgPSBpbnB1dHM7XG4gICAgICAgICAgICBfaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gZ3JvdXAucHVzaChpbnB1dCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKiByZW1vdmUgKi8gcigpIHtcbiAgICAgICAgICAgIF9pbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBncm91cC5zcGxpY2UoZ3JvdXAuaW5kZXhPZihpbnB1dCksIDEpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBpbml0X2JpbmRpbmdfZ3JvdXBfZHluYW1pYyhncm91cCwgaW5kZXhlcykge1xuICAgIGxldCBfZ3JvdXAgPSBnZXRfYmluZGluZ19ncm91cChncm91cCk7XG4gICAgbGV0IF9pbnB1dHM7XG4gICAgZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXAoZ3JvdXApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBncm91cCA9IGdyb3VwW2luZGV4ZXNbaV1dID0gZ3JvdXBbaW5kZXhlc1tpXV0gfHwgW107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdXNoKCkge1xuICAgICAgICBfaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gX2dyb3VwLnB1c2goaW5wdXQpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICBfaW5wdXRzLmZvckVhY2goaW5wdXQgPT4gX2dyb3VwLnNwbGljZShfZ3JvdXAuaW5kZXhPZihpbnB1dCksIDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyogdXBkYXRlICovIHUobmV3X2luZGV4ZXMpIHtcbiAgICAgICAgICAgIGluZGV4ZXMgPSBuZXdfaW5kZXhlcztcbiAgICAgICAgICAgIGNvbnN0IG5ld19ncm91cCA9IGdldF9iaW5kaW5nX2dyb3VwKGdyb3VwKTtcbiAgICAgICAgICAgIGlmIChuZXdfZ3JvdXAgIT09IF9ncm91cCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIF9ncm91cCA9IG5ld19ncm91cDtcbiAgICAgICAgICAgICAgICBwdXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8qIHB1c2ggKi8gcCguLi5pbnB1dHMpIHtcbiAgICAgICAgICAgIF9pbnB1dHMgPSBpbnB1dHM7XG4gICAgICAgICAgICBwdXNoKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qIHJlbW92ZSAqLyByOiByZW1vdmVcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9fbnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IG51bGwgOiArdmFsdWU7XG59XG5mdW5jdGlvbiB0aW1lX3Jhbmdlc190b19hcnJheShyYW5nZXMpIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGFycmF5LnB1c2goeyBzdGFydDogcmFuZ2VzLnN0YXJ0KGkpLCBlbmQ6IHJhbmdlcy5lbmQoaSkgfSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cbmZ1bmN0aW9uIGNoaWxkcmVuKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShlbGVtZW50LmNoaWxkTm9kZXMpO1xufVxuZnVuY3Rpb24gaW5pdF9jbGFpbV9pbmZvKG5vZGVzKSB7XG4gICAgaWYgKG5vZGVzLmNsYWltX2luZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvID0geyBsYXN0X2luZGV4OiAwLCB0b3RhbF9jbGFpbWVkOiAwIH07XG4gICAgfVxufVxuZnVuY3Rpb24gY2xhaW1fbm9kZShub2RlcywgcHJlZGljYXRlLCBwcm9jZXNzTm9kZSwgY3JlYXRlTm9kZSwgZG9udFVwZGF0ZUxhc3RJbmRleCA9IGZhbHNlKSB7XG4gICAgLy8gVHJ5IHRvIGZpbmQgbm9kZXMgaW4gYW4gb3JkZXIgc3VjaCB0aGF0IHdlIGxlbmd0aGVuIHRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2VcbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IHJlc3VsdE5vZGUgPSAoKCkgPT4ge1xuICAgICAgICAvLyBXZSBmaXJzdCB0cnkgdG8gZmluZCBhbiBlbGVtZW50IGFmdGVyIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSB0cnkgdG8gZmluZCBvbmUgYmVmb3JlXG4gICAgICAgIC8vIFdlIGl0ZXJhdGUgaW4gcmV2ZXJzZSBzbyB0aGF0IHdlIGRvbid0IGdvIHRvbyBmYXIgYmFja1xuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIHNwbGljZWQgYmVmb3JlIHRoZSBsYXN0X2luZGV4LCB3ZSBkZWNyZWFzZSBpdFxuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhbnkgbWF0Y2hpbmcgbm9kZSwgd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICByZXR1cm4gY3JlYXRlTm9kZSgpO1xuICAgIH0pKCk7XG4gICAgcmVzdWx0Tm9kZS5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICByZXR1cm4gcmVzdWx0Tm9kZTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgY3JlYXRlX2VsZW1lbnQpIHtcbiAgICByZXR1cm4gY2xhaW1fbm9kZShub2RlcywgKG5vZGUpID0+IG5vZGUubm9kZU5hbWUgPT09IG5hbWUsIChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlbW92ZSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gbm9kZS5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVzW2F0dHJpYnV0ZS5uYW1lXSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW1vdmUuZm9yRWFjaCh2ID0+IG5vZGUucmVtb3ZlQXR0cmlidXRlKHYpKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LCAoKSA9PiBjcmVhdGVfZWxlbWVudChuYW1lKSk7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgZWxlbWVudCk7XG59XG5mdW5jdGlvbiBjbGFpbV9zdmdfZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Z19lbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3RleHQobm9kZXMsIGRhdGEpIHtcbiAgICByZXR1cm4gY2xhaW1fbm9kZShub2RlcywgKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDMsIChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFTdHIgPSAnJyArIGRhdGE7XG4gICAgICAgIGlmIChub2RlLmRhdGEuc3RhcnRzV2l0aChkYXRhU3RyKSkge1xuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YS5sZW5ndGggIT09IGRhdGFTdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc3BsaXRUZXh0KGRhdGFTdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuZGF0YSA9IGRhdGFTdHI7XG4gICAgICAgIH1cbiAgICB9LCAoKSA9PiB0ZXh0KGRhdGEpLCB0cnVlIC8vIFRleHQgbm9kZXMgc2hvdWxkIG5vdCB1cGRhdGUgbGFzdCBpbmRleCBzaW5jZSBpdCBpcyBsaWtlbHkgbm90IHdvcnRoIGl0IHRvIGVsaW1pbmF0ZSBhbiBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIGFjdHVhbCBlbGVtZW50c1xuICAgICk7XG59XG5mdW5jdGlvbiBjbGFpbV9zcGFjZShub2Rlcykge1xuICAgIHJldHVybiBjbGFpbV90ZXh0KG5vZGVzLCAnICcpO1xufVxuZnVuY3Rpb24gY2xhaW1fY29tbWVudChub2RlcywgZGF0YSkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gOCwgKG5vZGUpID0+IHtcbiAgICAgICAgbm9kZS5kYXRhID0gJycgKyBkYXRhO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sICgpID0+IGNvbW1lbnQoZGF0YSksIHRydWUpO1xufVxuZnVuY3Rpb24gZmluZF9jb21tZW50KG5vZGVzLCB0ZXh0LCBzdGFydCkge1xuICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8IG5vZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggLyogY29tbWVudCBub2RlICovICYmIG5vZGUudGV4dENvbnRlbnQudHJpbSgpID09PSB0ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm9kZXMubGVuZ3RoO1xufVxuZnVuY3Rpb24gY2xhaW1faHRtbF90YWcobm9kZXMsIGlzX3N2Zykge1xuICAgIC8vIGZpbmQgaHRtbCBvcGVuaW5nIHRhZ1xuICAgIGNvbnN0IHN0YXJ0X2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfU1RBUlQnLCAwKTtcbiAgICBjb25zdCBlbmRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19FTkQnLCBzdGFydF9pbmRleCk7XG4gICAgaWYgKHN0YXJ0X2luZGV4ID09PSBlbmRfaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKHVuZGVmaW5lZCwgaXNfc3ZnKTtcbiAgICB9XG4gICAgaW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcbiAgICBjb25zdCBodG1sX3RhZ19ub2RlcyA9IG5vZGVzLnNwbGljZShzdGFydF9pbmRleCwgZW5kX2luZGV4IC0gc3RhcnRfaW5kZXggKyAxKTtcbiAgICBkZXRhY2goaHRtbF90YWdfbm9kZXNbMF0pO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1todG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxXSk7XG4gICAgY29uc3QgY2xhaW1lZF9ub2RlcyA9IGh0bWxfdGFnX25vZGVzLnNsaWNlKDEsIGh0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDEpO1xuICAgIGZvciAoY29uc3QgbiBvZiBjbGFpbWVkX25vZGVzKSB7XG4gICAgICAgIG4uY2xhaW1fb3JkZXIgPSBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQ7XG4gICAgICAgIG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24oY2xhaW1lZF9ub2RlcywgaXNfc3ZnKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0LmRhdGEgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfY29udGVudGVkaXRhYmxlKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9tYXliZV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSwgYXR0cl92YWx1ZSkge1xuICAgIGlmICh+Y29udGVudGVkaXRhYmxlX3RydXRoeV92YWx1ZXMuaW5kZXhPZihhdHRyX3ZhbHVlKSkge1xuICAgICAgICBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGUodGV4dCwgZGF0YSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRfZGF0YSh0ZXh0LCBkYXRhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShrZXkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyAnaW1wb3J0YW50JyA6ICcnKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUsIG1vdW50aW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIW1vdW50aW5nIHx8IHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSAtMTsgLy8gbm8gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZFxuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb25zKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB+dmFsdWUuaW5kZXhPZihvcHRpb24uX192YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X3ZhbHVlKHNlbGVjdCkge1xuICAgIGNvbnN0IHNlbGVjdGVkX29wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCc6Y2hlY2tlZCcpO1xuICAgIHJldHVybiBzZWxlY3RlZF9vcHRpb24gJiYgc2VsZWN0ZWRfb3B0aW9uLl9fdmFsdWU7XG59XG5mdW5jdGlvbiBzZWxlY3RfbXVsdGlwbGVfdmFsdWUoc2VsZWN0KSB7XG4gICAgcmV0dXJuIFtdLm1hcC5jYWxsKHNlbGVjdC5xdWVyeVNlbGVjdG9yQWxsKCc6Y2hlY2tlZCcpLCBvcHRpb24gPT4gb3B0aW9uLl9fdmFsdWUpO1xufVxuLy8gdW5mb3J0dW5hdGVseSB0aGlzIGNhbid0IGJlIGEgY29uc3RhbnQgYXMgdGhhdCB3b3VsZG4ndCBiZSB0cmVlLXNoYWtlYWJsZVxuLy8gc28gd2UgY2FjaGUgdGhlIHJlc3VsdCBpbnN0ZWFkXG5sZXQgY3Jvc3NvcmlnaW47XG5mdW5jdGlvbiBpc19jcm9zc29yaWdpbigpIHtcbiAgICBpZiAoY3Jvc3NvcmlnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjcm9zc29yaWdpbiA9IGZhbHNlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB2b2lkIHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjcm9zc29yaWdpbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNyb3Nzb3JpZ2luO1xufVxuZnVuY3Rpb24gYWRkX2lmcmFtZV9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6IC0xOycpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGFuIGluaXRpYWwgcmVzaXplIGV2ZW50IGlzIGZpcmVkIF9hZnRlcl8gdGhlIGlmcmFtZSBpcyBsb2FkZWQgKHdoaWNoIGlzIGFzeW5jaHJvbm91cylcbiAgICAgICAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy80MjMzXG4gICAgICAgICAgICBmbigpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9jb250ZW50X2JveCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24oeyBib3g6ICdjb250ZW50LWJveCcgfSk7XG5jb25zdCByZXNpemVfb2JzZXJ2ZXJfYm9yZGVyX2JveCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24oeyBib3g6ICdib3JkZXItYm94JyB9KTtcbmNvbnN0IHJlc2l6ZV9vYnNlcnZlcl9kZXZpY2VfcGl4ZWxfY29udGVudF9ib3ggPSAvKiBAX19QVVJFX18gKi8gbmV3IFJlc2l6ZU9ic2VydmVyU2luZ2xldG9uKHsgYm94OiAnZGV2aWNlLXBpeGVsLWNvbnRlbnQtYm94JyB9KTtcbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gaGVhZF9zZWxlY3Rvcihub2RlSWQsIGhlYWQpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgc3RhcnRlZCA9IDA7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIGhlYWQuY2hpbGROb2Rlcykge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSBub2RlLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fRU5EYCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgLT0gMTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1lbnQgPT09IGBIRUFEXyR7bm9kZUlkfV9TVEFSVGApIHtcbiAgICAgICAgICAgICAgICBzdGFydGVkICs9IDE7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhcnRlZCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jbGFzcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3Rvcihpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmlzX3N2ZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzX3N2ZyA9IGlzX3N2ZztcbiAgICAgICAgdGhpcy5lID0gdGhpcy5uID0gbnVsbDtcbiAgICB9XG4gICAgYyhodG1sKSB7XG4gICAgICAgIHRoaXMuaChodG1sKTtcbiAgICB9XG4gICAgbShodG1sLCB0YXJnZXQsIGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX3N2ZylcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBzdmdfZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgLyoqICM3MzY0ICB0YXJnZXQgZm9yIDx0ZW1wbGF0ZT4gbWF5IGJlIHByb3ZpZGVkIGFzICNkb2N1bWVudC1mcmFnbWVudCgxMSkgKi9cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KCh0YXJnZXQubm9kZVR5cGUgPT09IDExID8gJ1RFTVBMQVRFJyA6IHRhcmdldC5ub2RlTmFtZSkpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0LnRhZ05hbWUgIT09ICdURU1QTEFURScgPyB0YXJnZXQgOiB0YXJnZXQuY29udGVudDtcbiAgICAgICAgICAgIHRoaXMuYyhodG1sKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmkoYW5jaG9yKTtcbiAgICB9XG4gICAgaChodG1sKSB7XG4gICAgICAgIHRoaXMuZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLm4gPSBBcnJheS5mcm9tKHRoaXMuZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJyA/IHRoaXMuZS5jb250ZW50LmNoaWxkTm9kZXMgOiB0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cbmNsYXNzIEh0bWxUYWdIeWRyYXRpb24gZXh0ZW5kcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzLCBpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICBzdXBlcihpc19zdmcpO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgICAgICB0aGlzLmwgPSBjbGFpbWVkX25vZGVzO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMubCkge1xuICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuYyhodG1sKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0X2h5ZHJhdGlvbih0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZV90b19vYmplY3QoYXR0cmlidXRlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMoZWxlbWVudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGVsZW1lbnQuY2hpbGROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIHJlc3VsdFtub2RlLnNsb3QgfHwgJ2RlZmF1bHQnXSA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50KGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgICByZXR1cm4gbmV3IGNvbXBvbmVudChwcm9wcyk7XG59XG5cbi8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGZvciBtdWx0aXBsZSBkb2N1bWVudHMgYmVjYXVzZSBhIFN2ZWx0ZSBhcHBsaWNhdGlvbiBjb3VsZCBhbHNvIGNvbnRhaW4gaWZyYW1lc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMzYyNFxuY29uc3QgbWFuYWdlZF9zdHlsZXMgPSBuZXcgTWFwKCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKSB7XG4gICAgY29uc3QgaW5mbyA9IHsgc3R5bGVzaGVldDogYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSksIHJ1bGVzOiB7fSB9O1xuICAgIG1hbmFnZWRfc3R5bGVzLnNldChkb2MsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSk7XG4gICAgY29uc3QgeyBzdHlsZXNoZWV0LCBydWxlcyB9ID0gbWFuYWdlZF9zdHlsZXMuZ2V0KGRvYykgfHwgY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSk7XG4gICAgaWYgKCFydWxlc1tuYW1lXSkge1xuICAgICAgICBydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgb3duZXJOb2RlIH0gPSBpbmZvLnN0eWxlc2hlZXQ7XG4gICAgICAgICAgICAvLyB0aGVyZSBpcyBubyBvd25lck5vZGUgaWYgaXQgcnVucyBvbiBqc2RvbS5cbiAgICAgICAgICAgIGlmIChvd25lck5vZGUpXG4gICAgICAgICAgICAgICAgZGV0YWNoKG93bmVyTm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uJyk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuLyoqXG4gKiBTY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBjb21wb25lbnQgaXMgdXBkYXRlZCBhZnRlciBhbnkgc3RhdGUgY2hhbmdlLlxuICpcbiAqIFRoZSBmaXJzdCB0aW1lIHRoZSBjYWxsYmFjayBydW5zIHdpbGwgYmUgYmVmb3JlIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1iZWZvcmV1cGRhdGVcbiAqL1xuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbi8qKlxuICogVGhlIGBvbk1vdW50YCBmdW5jdGlvbiBzY2hlZHVsZXMgYSBjYWxsYmFjayB0byBydW4gYXMgc29vbiBhcyB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgdG8gdGhlIERPTS5cbiAqIEl0IG11c3QgYmUgY2FsbGVkIGR1cmluZyB0aGUgY29tcG9uZW50J3MgaW5pdGlhbGlzYXRpb24gKGJ1dCBkb2Vzbid0IG5lZWQgdG8gbGl2ZSAqaW5zaWRlKiB0aGUgY29tcG9uZW50O1xuICogaXQgY2FuIGJlIGNhbGxlZCBmcm9tIGFuIGV4dGVybmFsIG1vZHVsZSkuXG4gKlxuICogYG9uTW91bnRgIGRvZXMgbm90IHJ1biBpbnNpZGUgYSBbc2VydmVyLXNpZGUgY29tcG9uZW50XSgvZG9jcyNydW4tdGltZS1zZXJ2ZXItc2lkZS1jb21wb25lbnQtYXBpKS5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtb25tb3VudFxuICovXG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBhZnRlciB0aGUgY29tcG9uZW50IGhhcyBiZWVuIHVwZGF0ZWQuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBhZnRlciB0aGUgaW5pdGlhbCBgb25Nb3VudGBcbiAqL1xuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuXG4gKlxuICogT3V0IG9mIGBvbk1vdW50YCwgYGJlZm9yZVVwZGF0ZWAsIGBhZnRlclVwZGF0ZWAgYW5kIGBvbkRlc3Ryb3lgLCB0aGlzIGlzIHRoZVxuICogb25seSBvbmUgdGhhdCBydW5zIGluc2lkZSBhIHNlcnZlci1zaWRlIGNvbXBvbmVudC5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtb25kZXN0cm95XG4gKi9cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gZXZlbnQgZGlzcGF0Y2hlciB0aGF0IGNhbiBiZSB1c2VkIHRvIGRpc3BhdGNoIFtjb21wb25lbnQgZXZlbnRzXSgvZG9jcyN0ZW1wbGF0ZS1zeW50YXgtY29tcG9uZW50LWRpcmVjdGl2ZXMtb24tZXZlbnRuYW1lKS5cbiAqIEV2ZW50IGRpc3BhdGNoZXJzIGFyZSBmdW5jdGlvbnMgdGhhdCBjYW4gdGFrZSB0d28gYXJndW1lbnRzOiBgbmFtZWAgYW5kIGBkZXRhaWxgLlxuICpcbiAqIENvbXBvbmVudCBldmVudHMgY3JlYXRlZCB3aXRoIGBjcmVhdGVFdmVudERpc3BhdGNoZXJgIGNyZWF0ZSBhXG4gKiBbQ3VzdG9tRXZlbnRdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DdXN0b21FdmVudCkuXG4gKiBUaGVzZSBldmVudHMgZG8gbm90IFtidWJibGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTGVhcm4vSmF2YVNjcmlwdC9CdWlsZGluZ19ibG9ja3MvRXZlbnRzI0V2ZW50X2J1YmJsaW5nX2FuZF9jYXB0dXJlKS5cbiAqIFRoZSBgZGV0YWlsYCBhcmd1bWVudCBjb3JyZXNwb25kcyB0byB0aGUgW0N1c3RvbUV2ZW50LmRldGFpbF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50L2RldGFpbClcbiAqIHByb3BlcnR5IGFuZCBjYW4gY29udGFpbiBhbnkgdHlwZSBvZiBkYXRhLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1jcmVhdGVldmVudGRpc3BhdGNoZXJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbi8qKlxuICogQXNzb2NpYXRlcyBhbiBhcmJpdHJhcnkgYGNvbnRleHRgIG9iamVjdCB3aXRoIHRoZSBjdXJyZW50IGNvbXBvbmVudCBhbmQgdGhlIHNwZWNpZmllZCBga2V5YFxuICogYW5kIHJldHVybnMgdGhhdCBvYmplY3QuIFRoZSBjb250ZXh0IGlzIHRoZW4gYXZhaWxhYmxlIHRvIGNoaWxkcmVuIG9mIHRoZSBjb21wb25lbnRcbiAqIChpbmNsdWRpbmcgc2xvdHRlZCBjb250ZW50KSB3aXRoIGBnZXRDb250ZXh0YC5cbiAqXG4gKiBMaWtlIGxpZmVjeWNsZSBmdW5jdGlvbnMsIHRoaXMgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIGNvbXBvbmVudCBpbml0aWFsaXNhdGlvbi5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtc2V0Y29udGV4dFxuICovXG5mdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGNvbnRleHQ7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29udGV4dCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudCB3aXRoIHRoZSBzcGVjaWZpZWQgYGtleWAuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1nZXRjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgd2hvbGUgY29udGV4dCBtYXAgdGhhdCBiZWxvbmdzIHRvIHRoZSBjbG9zZXN0IHBhcmVudCBjb21wb25lbnQuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLiBVc2VmdWwsIGZvciBleGFtcGxlLCBpZiB5b3VcbiAqIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGEgY29tcG9uZW50IGFuZCB3YW50IHRvIHBhc3MgdGhlIGV4aXN0aW5nIGNvbnRleHQgdG8gaXQuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWdldGFsbGNvbnRleHRzXG4gKi9cbmZ1bmN0aW9uIGdldEFsbENvbnRleHRzKCkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0O1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIGdpdmVuIGBrZXlgIGhhcyBiZWVuIHNldCBpbiB0aGUgY29udGV4dCBvZiBhIHBhcmVudCBjb21wb25lbnQuXG4gKiBNdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1oYXNjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmNvbnN0IGludHJvcyA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbmNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5sZXQgcmVuZGVyX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgZmx1c2hfY2FsbGJhY2tzID0gW107XG5jb25zdCByZXNvbHZlZF9wcm9taXNlID0gLyogQF9fUFVSRV9fICovIFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuLy8gZmx1c2goKSBjYWxscyBjYWxsYmFja3MgaW4gdGhpcyBvcmRlcjpcbi8vIDEuIEFsbCBiZWZvcmVVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW5cbi8vIDIuIEFsbCBiaW5kOnRoaXMgY2FsbGJhY2tzLCBpbiByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIDMuIEFsbCBhZnRlclVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlbi4gRVhDRVBUXG4vLyAgICBmb3IgYWZ0ZXJVcGRhdGVzIGNhbGxlZCBkdXJpbmcgdGhlIGluaXRpYWwgb25Nb3VudCwgd2hpY2ggYXJlIGNhbGxlZCBpblxuLy8gICAgcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyBTaW5jZSBjYWxsYmFja3MgbWlnaHQgdXBkYXRlIGNvbXBvbmVudCB2YWx1ZXMsIHdoaWNoIGNvdWxkIHRyaWdnZXIgYW5vdGhlclxuLy8gY2FsbCB0byBmbHVzaCgpLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGd1YXJkIGFnYWluc3QgdGhpczpcbi8vIDEuIER1cmluZyBiZWZvcmVVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vICAgIGRpcnR5X2NvbXBvbmVudHMgYXJyYXkgYW5kIHdpbGwgY2F1c2UgYSByZWVudHJhbnQgY2FsbCB0byBmbHVzaCgpLiBCZWNhdXNlXG4vLyAgICB0aGUgZmx1c2ggaW5kZXggaXMga2VwdCBvdXRzaWRlIHRoZSBmdW5jdGlvbiwgdGhlIHJlZW50cmFudCBjYWxsIHdpbGwgcGlja1xuLy8gICAgdXAgd2hlcmUgdGhlIGVhcmxpZXIgY2FsbCBsZWZ0IG9mZiBhbmQgZ28gdGhyb3VnaCBhbGwgZGlydHkgY29tcG9uZW50cy4gVGhlXG4vLyAgICBjdXJyZW50X2NvbXBvbmVudCB2YWx1ZSBpcyBzYXZlZCBhbmQgcmVzdG9yZWQgc28gdGhhdCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbFxuLy8gICAgbm90IGludGVyZmVyZSB3aXRoIHRoZSBcInBhcmVudFwiIGZsdXNoKCkgY2FsbC5cbi8vIDIuIGJpbmQ6dGhpcyBjYWxsYmFja3MgY2Fubm90IHRyaWdnZXIgbmV3IGZsdXNoKCkgY2FsbHMuXG4vLyAzLiBEdXJpbmcgYWZ0ZXJVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBOT1QgaGF2ZSB0aGVpciBhZnRlclVwZGF0ZVxuLy8gICAgY2FsbGJhY2sgY2FsbGVkIGEgc2Vjb25kIHRpbWU7IHRoZSBzZWVuX2NhbGxiYWNrcyBzZXQsIG91dHNpZGUgdGhlIGZsdXNoKClcbi8vICAgIGZ1bmN0aW9uLCBndWFyYW50ZWVzIHRoaXMgYmVoYXZpb3IuXG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmxldCBmbHVzaGlkeCA9IDA7IC8vIERvICpub3QqIG1vdmUgdGhpcyBpbnNpZGUgdGhlIGZsdXNoKCkgZnVuY3Rpb25cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIC8vIERvIG5vdCByZWVudGVyIGZsdXNoIHdoaWxlIGRpcnR5IGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGFzIHRoaXMgY2FuXG4gICAgLy8gcmVzdWx0IGluIGFuIGluZmluaXRlIGxvb3AuIEluc3RlYWQsIGxldCB0aGUgaW5uZXIgZmx1c2ggaGFuZGxlIGl0LlxuICAgIC8vIFJlZW50cmFuY3kgaXMgb2sgYWZ0ZXJ3YXJkcyBmb3IgYmluZGluZ3MgZXRjLlxuICAgIGlmIChmbHVzaGlkeCAhPT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tmbHVzaGlkeF07XG4gICAgICAgICAgICAgICAgZmx1c2hpZHgrKztcbiAgICAgICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgICAgICB1cGRhdGUoY29tcG9uZW50LiQkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gcmVzZXQgZGlydHkgc3RhdGUgdG8gbm90IGVuZCB1cCBpbiBhIGRlYWRsb2NrZWQgc3RhdGUgYW5kIHRoZW4gcmV0aHJvd1xuICAgICAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgZmx1c2hpZHggPSAwO1xuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoID0gMDtcbiAgICAgICAgZmx1c2hpZHggPSAwO1xuICAgICAgICB3aGlsZSAoYmluZGluZ19jYWxsYmFja3MubGVuZ3RoKVxuICAgICAgICAgICAgYmluZGluZ19jYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgLy8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG4gICAgICAgIC8vIGFmdGVyVXBkYXRlIGZ1bmN0aW9ucy4gVGhpcyBtYXkgY2F1c2VcbiAgICAgICAgLy8gc3Vic2VxdWVudCB1cGRhdGVzLi4uXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgaWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgfSB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpO1xuICAgIHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGZsdXNoX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgIH1cbiAgICB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgc2Vlbl9jYWxsYmFja3MuY2xlYXIoKTtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoc2F2ZWRfY29tcG9uZW50KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZSgkJCkge1xuICAgIGlmICgkJC5mcmFnbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAkJC51cGRhdGUoKTtcbiAgICAgICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAgICAgY29uc3QgZGlydHkgPSAkJC5kaXJ0eTtcbiAgICAgICAgJCQuZGlydHkgPSBbLTFdO1xuICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5wKCQkLmN0eCwgZGlydHkpO1xuICAgICAgICAkJC5hZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbiAgICB9XG59XG4vKipcbiAqIFVzZWZ1bCBmb3IgZXhhbXBsZSB0byBleGVjdXRlIHJlbWFpbmluZyBgYWZ0ZXJVcGRhdGVgIGNhbGxiYWNrcyBiZWZvcmUgZXhlY3V0aW5nIGBkZXN0cm95YC5cbiAqL1xuZnVuY3Rpb24gZmx1c2hfcmVuZGVyX2NhbGxiYWNrcyhmbnMpIHtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IFtdO1xuICAgIGNvbnN0IHRhcmdldHMgPSBbXTtcbiAgICByZW5kZXJfY2FsbGJhY2tzLmZvckVhY2goKGMpID0+IGZucy5pbmRleE9mKGMpID09PSAtMSA/IGZpbHRlcmVkLnB1c2goYykgOiB0YXJnZXRzLnB1c2goYykpO1xuICAgIHRhcmdldHMuZm9yRWFjaCgoYykgPT4gYygpKTtcbiAgICByZW5kZXJfY2FsbGJhY2tzID0gZmlsdGVyZWQ7XG59XG5cbmxldCBwcm9taXNlO1xuZnVuY3Rpb24gd2FpdCgpIHtcbiAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoKG5vZGUsIGRpcmVjdGlvbiwga2luZCkge1xuICAgIG5vZGUuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQoYCR7ZGlyZWN0aW9uID8gJ2ludHJvJyA6ICdvdXRybyd9JHtraW5kfWApKTtcbn1cbmNvbnN0IG91dHJvaW5nID0gbmV3IFNldCgpO1xubGV0IG91dHJvcztcbmZ1bmN0aW9uIGdyb3VwX291dHJvcygpIHtcbiAgICBvdXRyb3MgPSB7XG4gICAgICAgIHI6IDAsXG4gICAgICAgIGM6IFtdLFxuICAgICAgICBwOiBvdXRyb3MgLy8gcGFyZW50IGdyb3VwXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNoZWNrX291dHJvcygpIHtcbiAgICBpZiAoIW91dHJvcy5yKSB7XG4gICAgICAgIHJ1bl9hbGwob3V0cm9zLmMpO1xuICAgIH1cbiAgICBvdXRyb3MgPSBvdXRyb3MucDtcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25faW4oYmxvY2ssIGxvY2FsKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLmkpIHtcbiAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgYmxvY2suaShsb2NhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9vdXQoYmxvY2ssIGxvY2FsLCBkZXRhY2gsIGNhbGxiYWNrKSB7XG4gICAgaWYgKGJsb2NrICYmIGJsb2NrLm8pIHtcbiAgICAgICAgaWYgKG91dHJvaW5nLmhhcyhibG9jaykpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIG91dHJvaW5nLmFkZChibG9jayk7XG4gICAgICAgIG91dHJvcy5jLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgb3V0cm9pbmcuZGVsZXRlKGJsb2NrKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChkZXRhY2gpXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrLmQoMSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJsb2NrLm8obG9jYWwpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cbn1cbmNvbnN0IG51bGxfdHJhbnNpdGlvbiA9IHsgZHVyYXRpb246IDAgfTtcbmZ1bmN0aW9uIGNyZWF0ZV9pbl90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBjb25zdCBvcHRpb25zID0geyBkaXJlY3Rpb246ICdpbicgfTtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICBsZXQgcnVubmluZyA9IGZhbHNlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBsZXQgdGFzaztcbiAgICBsZXQgdWlkID0gMDtcbiAgICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzLCB1aWQrKyk7XG4gICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRhc2spXG4gICAgICAgICAgICB0YXNrLmFib3J0KCk7XG4gICAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIHRydWUsICdzdGFydCcpKTtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCB0cnVlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZClcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnb3V0JyB9O1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgZGlyZWN0aW9uOiAnYm90aCcgfTtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gKHByb2dyYW0uYiAtIHQpO1xuICAgICAgICBkdXJhdGlvbiAqPSBNYXRoLmFicyhkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGE6IHQsXG4gICAgICAgICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgICAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oYikge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG5vdygpICsgZGVsYXksXG4gICAgICAgICAgICBiXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIHByb2dyYW0uZ3JvdXAgPSBvdXRyb3M7XG4gICAgICAgICAgICBvdXRyb3MuciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIFx1MjAxNCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIFx1MjAxNCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrc1tpXSA9PT0gYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICAgICAgaWYgKCFpbmZvLmhhc0NhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaChpbmZvLCBjdHgsIGRpcnR5KSB7XG4gICAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gICAgY29uc3QgeyByZXNvbHZlZCB9ID0gaW5mbztcbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8udmFsdWVdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8uY2F0Y2gpIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8uZXJyb3JdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGluZm8uYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCBkeW5hbWljLCBjdHgsIGxpc3QsIGxvb2t1cCwgbm9kZSwgZGVzdHJveSwgY3JlYXRlX2VhY2hfYmxvY2ssIG5leHQsIGdldF9jb250ZXh0KSB7XG4gICAgbGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcbiAgICBsZXQgbiA9IGxpc3QubGVuZ3RoO1xuICAgIGxldCBpID0gbztcbiAgICBjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG4gICAgY29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuICAgIGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSBbXTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICAvLyBkZWZlciB1cGRhdGVzIHVudGlsIGFsbCB0aGUgRE9NIHNodWZmbGluZyBpcyBkb25lXG4gICAgICAgICAgICB1cGRhdGVzLnB1c2goKCkgPT4gYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgICAgICBpZiAoa2V5IGluIG9sZF9pbmRleGVzKVxuICAgICAgICAgICAgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG4gICAgfVxuICAgIGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgIGJsb2NrLm0obm9kZSwgbmV4dCk7XG4gICAgICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgICAgIG5leHQgPSBibG9jay5maXJzdDtcbiAgICAgICAgbi0tO1xuICAgIH1cbiAgICB3aGlsZSAobyAmJiBuKSB7XG4gICAgICAgIGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcbiAgICAgICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgICAgIGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuICAgICAgICBpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGJsb2NrXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuICAgICAgICAgICAgZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChvLS0pIHtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcbiAgICAgICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgIH1cbiAgICB3aGlsZSAobilcbiAgICAgICAgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcbiAgICBydW5fYWxsKHVwZGF0ZXMpO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2gnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuY29uc3QgX2Jvb2xlYW5fYXR0cmlidXRlcyA9IFtcbiAgICAnYWxsb3dmdWxsc2NyZWVuJyxcbiAgICAnYWxsb3dwYXltZW50cmVxdWVzdCcsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXV0b2ZvY3VzJyxcbiAgICAnYXV0b3BsYXknLFxuICAgICdjaGVja2VkJyxcbiAgICAnY29udHJvbHMnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZGVmZXInLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Zvcm1ub3ZhbGlkYXRlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaW5lcnQnLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dO1xuLyoqXG4gKiBMaXN0IG9mIEhUTUwgYm9vbGVhbiBhdHRyaWJ1dGVzIChlLmcuIGA8aW5wdXQgZGlzYWJsZWQ+YCkuXG4gKiBTb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuICovXG5jb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFsuLi5fYm9vbGVhbl9hdHRyaWJ1dGVzXSk7XG5cbi8qKiByZWdleCBvZiBhbGwgaHRtbCB2b2lkIGVsZW1lbnQgbmFtZXMgKi9cbmNvbnN0IHZvaWRfZWxlbWVudF9uYW1lcyA9IC9eKD86YXJlYXxiYXNlfGJyfGNvbHxjb21tYW5kfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnIpJC87XG5mdW5jdGlvbiBpc192b2lkKG5hbWUpIHtcbiAgICByZXR1cm4gdm9pZF9lbGVtZW50X25hbWVzLnRlc3QobmFtZSkgfHwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnIWRvY3R5cGUnO1xufVxuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzLCBhdHRyc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGF0dHJzX3RvX2FkZCkge1xuICAgICAgICBjb25zdCBjbGFzc2VzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5jbGFzc2VzO1xuICAgICAgICBjb25zdCBzdHlsZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLnN0eWxlcztcbiAgICAgICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyArPSAnICcgKyBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlc190b19hZGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcobWVyZ2Vfc3NyX3N0eWxlcyhhdHRyaWJ1dGVzLnN0eWxlLCBzdHlsZXNfdG9fYWRkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHIgKz0gYCAke25hbWV9PVwiJHt2YWx1ZX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gbWVyZ2Vfc3NyX3N0eWxlcyhzdHlsZV9hdHRyaWJ1dGUsIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgIGNvbnN0IHN0eWxlX29iamVjdCA9IHt9O1xuICAgIGZvciAoY29uc3QgaW5kaXZpZHVhbF9zdHlsZSBvZiBzdHlsZV9hdHRyaWJ1dGUuc3BsaXQoJzsnKSkge1xuICAgICAgICBjb25zdCBjb2xvbl9pbmRleCA9IGluZGl2aWR1YWxfc3R5bGUuaW5kZXhPZignOicpO1xuICAgICAgICBjb25zdCBuYW1lID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZSgwLCBjb2xvbl9pbmRleCkudHJpbSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoY29sb25faW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgIGlmICghbmFtZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlX2RpcmVjdGl2ZVtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZV9vYmplY3RbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlX29iamVjdDtcbn1cbmNvbnN0IEFUVFJfUkVHRVggPSAvWyZcIl0vZztcbmNvbnN0IENPTlRFTlRfUkVHRVggPSAvWyY8XS9nO1xuLyoqXG4gKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyBwZXJmb3JtYW5jZSBzZW5zaXRpdmUgYW5kIGhhcyBiZWVuIG9wdGltaXplZFxuICogaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzU3MDFcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHZhbHVlLCBpc19hdHRyID0gZmFsc2UpIHtcbiAgICBjb25zdCBzdHIgPSBTdHJpbmcodmFsdWUpO1xuICAgIGNvbnN0IHBhdHRlcm4gPSBpc19hdHRyID8gQVRUUl9SRUdFWCA6IENPTlRFTlRfUkVHRVg7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgIGxldCBlc2NhcGVkID0gJyc7XG4gICAgbGV0IGxhc3QgPSAwO1xuICAgIHdoaWxlIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuICAgICAgICBjb25zdCBpID0gcGF0dGVybi5sYXN0SW5kZXggLSAxO1xuICAgICAgICBjb25zdCBjaCA9IHN0cltpXTtcbiAgICAgICAgZXNjYXBlZCArPSBzdHIuc3Vic3RyaW5nKGxhc3QsIGkpICsgKGNoID09PSAnJicgPyAnJmFtcDsnIDogKGNoID09PSAnXCInID8gJyZxdW90OycgOiAnJmx0OycpKTtcbiAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gZXNjYXBlZCArIHN0ci5zdWJzdHJpbmcobGFzdCk7XG59XG5mdW5jdGlvbiBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKHZhbHVlKSB7XG4gICAgLy8ga2VlcCBib29sZWFucywgbnVsbCwgYW5kIHVuZGVmaW5lZCBmb3IgdGhlIHNha2Ugb2YgYHNwcmVhZGBcbiAgICBjb25zdCBzaG91bGRfZXNjYXBlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG4gICAgcmV0dXJuIHNob3VsZF9lc2NhcGUgPyBlc2NhcGUodmFsdWUsIHRydWUpIDogdmFsdWU7XG59XG5mdW5jdGlvbiBlc2NhcGVfb2JqZWN0KG9iaikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlcy4gT3RoZXJ3aXNlIHlvdSBtYXkgbmVlZCB0byBmaXggYSA8JHtuYW1lfT4uYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChjb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgeyAkJHNsb3RzID0ge30sIGNvbnRleHQgPSBuZXcgTWFwKCkgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sICQkc2xvdHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSAoYm9vbGVhbiAmJiB2YWx1ZSA9PT0gdHJ1ZSkgPyAnJyA6IGA9XCIke2VzY2FwZSh2YWx1ZSwgdHJ1ZSl9XCJgO1xuICAgIHJldHVybiBgICR7bmFtZX0ke2Fzc2lnbm1lbnR9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke2VzY2FwZV9hdHRyaWJ1dGVfdmFsdWUoc3R5bGVfb2JqZWN0W2tleV0pfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gY29tcG9uZW50LiQkLm9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBpZiB0aGUgY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIC8vIGl0IHdpbGwgdXBkYXRlIHRoZSBgJCQub25fZGVzdHJveWAgcmVmZXJlbmNlIHRvIGBudWxsYC5cbiAgICAgICAgICAgIC8vIHRoZSBkZXN0cnVjdHVyZWQgb25fZGVzdHJveSBtYXkgc3RpbGwgcmVmZXJlbmNlIHRvIHRoZSBvbGQgYXJyYXlcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuJCQub25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgICAgIHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIGZsdXNoX3JlbmRlcl9jYWxsYmFja3MoJCQuYWZ0ZXJfdXBkYXRlKTtcbiAgICAgICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuICAgICAgICAvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG4gICAgICAgIC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcbiAgICAgICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgJCQuY3R4ID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgICBpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAoMSA8PCAoaSAlIDMxKSk7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wcywgYXBwZW5kX3N0eWxlcywgZGlydHkgPSBbLTFdKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBbXSxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHVwZGF0ZTogbm9vcCxcbiAgICAgICAgbm90X2VxdWFsLFxuICAgICAgICBib3VuZDogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIC8vIGxpZmVjeWNsZVxuICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgIG9uX2Rlc3Ryb3k6IFtdLFxuICAgICAgICBvbl9kaXNjb25uZWN0OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAob3B0aW9ucy5jb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIGRpcnR5LFxuICAgICAgICBza2lwX2JvdW5kOiBmYWxzZSxcbiAgICAgICAgcm9vdDogb3B0aW9ucy50YXJnZXQgfHwgcGFyZW50X2NvbXBvbmVudC4kJC5yb290XG4gICAgfTtcbiAgICBhcHBlbmRfc3R5bGVzICYmIGFwcGVuZF9zdHlsZXMoJCQucm9vdCk7XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG4gICAgJCQuY3R4ID0gaW5zdGFuY2VcbiAgICAgICAgPyBpbnN0YW5jZShjb21wb25lbnQsIG9wdGlvbnMucHJvcHMgfHwge30sIChpLCByZXQsIC4uLnJlc3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuICAgICAgICAgICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAkJC5jdHhbaV0gPSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoISQkLnNraXBfYm91bmQgJiYgJCQuYm91bmRbaV0pXG4gICAgICAgICAgICAgICAgICAgICQkLmJvdW5kW2ldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZHkpXG4gICAgICAgICAgICAgICAgICAgIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pXG4gICAgICAgIDogW107XG4gICAgJCQudXBkYXRlKCk7XG4gICAgcmVhZHkgPSB0cnVlO1xuICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgLy8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG4gICAgJCQuZnJhZ21lbnQgPSBjcmVhdGVfZnJhZ21lbnQgPyBjcmVhdGVfZnJhZ21lbnQoJCQuY3R4KSA6IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgICAgICBzdGFydF9oeWRyYXRpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVzID0gY2hpbGRyZW4ob3B0aW9ucy50YXJnZXQpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50Lmwobm9kZXMpO1xuICAgICAgICAgICAgbm9kZXMuZm9yRWFjaChkZXRhY2gpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pbnRybylcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oY29tcG9uZW50LiQkLmZyYWdtZW50KTtcbiAgICAgICAgbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgb3B0aW9ucy50YXJnZXQsIG9wdGlvbnMuYW5jaG9yLCBvcHRpb25zLmN1c3RvbUVsZW1lbnQpO1xuICAgICAgICBlbmRfaHlkcmF0aW5nKCk7XG4gICAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cbmxldCBTdmVsdGVFbGVtZW50O1xuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFN2ZWx0ZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICBjb25zdCB7IG9uX21vdW50IH0gPSB0aGlzLiQkO1xuICAgICAgICAgICAgdGhpcy4kJC5vbl9kaXNjb25uZWN0ID0gb25fbW91bnQubWFwKHJ1bikuZmlsdGVyKGlzX2Z1bmN0aW9uKTtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLiQkLnNsb3R0ZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQodGhpcy4kJC5zbG90dGVkW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhdHRyLCBfb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzW2F0dHJdID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICBydW5fYWxsKHRoaXMuJCQub25fZGlzY29ubmVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgJGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBkZXN0cm95X2NvbXBvbmVudCh0aGlzLCAxKTtcbiAgICAgICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgICAgICB9XG4gICAgICAgICRvbih0eXBlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gVE9ETyBzaG91bGQgdGhpcyBkZWxlZ2F0ZSB0byBhZGRFdmVudExpc3RlbmVyP1xuICAgICAgICAgICAgaWYgKCFpc19mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFpc19mdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuNTkuMicgfSwgZGV0YWlsKSwgeyBidWJibGVzOiB0cnVlIH0pKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uLCBoYXNfc3RvcF9pbW1lZGlhdGVfcHJvcGFnYXRpb24pIHtcbiAgICBjb25zdCBtb2RpZmllcnMgPSBvcHRpb25zID09PSB0cnVlID8gWydjYXB0dXJlJ10gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgaWYgKGhhc19zdG9wX2ltbWVkaWF0ZV9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldEF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRQcm9wZXJ0eScsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YXNldCcsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0LmRhdGEgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGEnLCB7IG5vZGU6IHRleHQsIGRhdGEgfSk7XG4gICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2NvbnRlbnRlZGl0YWJsZV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ID09PSBkYXRhKVxuICAgICAgICByZXR1cm47XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXREYXRhJywgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9tYXliZV9jb250ZW50ZWRpdGFibGVfZGV2KHRleHQsIGRhdGEsIGF0dHJfdmFsdWUpIHtcbiAgICBpZiAofmNvbnRlbnRlZGl0YWJsZV90cnV0aHlfdmFsdWVzLmluZGV4T2YoYXR0cl92YWx1ZSkpIHtcbiAgICAgICAgc2V0X2RhdGFfY29udGVudGVkaXRhYmxlX2Rldih0ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9keW5hbWljX2VsZW1lbnQodGFnKSB7XG4gICAgY29uc3QgaXNfc3RyaW5nID0gdHlwZW9mIHRhZyA9PT0gJ3N0cmluZyc7XG4gICAgaWYgKHRhZyAmJiAhaXNfc3RyaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignPHN2ZWx0ZTplbGVtZW50PiBleHBlY3RzIFwidGhpc1wiIGF0dHJpYnV0ZSB0byBiZSBhIHN0cmluZy4nKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV92b2lkX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcbiAgICBpZiAodGFnICYmIGlzX3ZvaWQodGFnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oYDxzdmVsdGU6ZWxlbWVudCB0aGlzPVwiJHt0YWd9XCI+IGlzIHNlbGYtY2xvc2luZyBhbmQgY2Fubm90IGhhdmUgY29udGVudC5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudF9kZXYoY29tcG9uZW50LCBwcm9wcykge1xuICAgIGNvbnN0IGVycm9yX21lc3NhZ2UgPSAndGhpcz17Li4ufSBvZiA8c3ZlbHRlOmNvbXBvbmVudD4gc2hvdWxkIHNwZWNpZnkgYSBTdmVsdGUgY29tcG9uZW50Lic7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgY29tcG9uZW50KHByb3BzKTtcbiAgICAgICAgaWYgKCFpbnN0YW5jZS4kJCB8fCAhaW5zdGFuY2UuJHNldCB8fCAhaW5zdGFuY2UuJG9uIHx8ICFpbnN0YW5jZS4kZGVzdHJveSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yX21lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zdCB7IG1lc3NhZ2UgfSA9IGVycjtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyAmJiBtZXNzYWdlLmluZGV4T2YoJ2lzIG5vdCBhIGNvbnN0cnVjdG9yJykgIT09IC0xKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIFN2ZWx0ZSBjb21wb25lbnRzIHdpdGggc29tZSBtaW5vciBkZXYtZW5oYW5jZW1lbnRzLiBVc2VkIHdoZW4gZGV2PXRydWUuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudERldiBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgKCFvcHRpb25zLnRhcmdldCAmJiAhb3B0aW9ucy4kJGlubGluZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIid0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgICRkZXN0cm95KCkge1xuICAgICAgICBzdXBlci4kZGVzdHJveSgpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb21wb25lbnQgd2FzIGFscmVhZHkgZGVzdHJveWVkJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgICB9O1xuICAgIH1cbiAgICAkY2FwdHVyZV9zdGF0ZSgpIHsgfVxuICAgICRpbmplY3Rfc3RhdGUoKSB7IH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyB0byBjcmVhdGUgc3Ryb25nbHkgdHlwZWQgU3ZlbHRlIGNvbXBvbmVudHMuXG4gKiBUaGlzIG9ubHkgZXhpc3RzIGZvciB0eXBpbmcgcHVycG9zZXMgYW5kIHNob3VsZCBiZSB1c2VkIGluIGAuZC50c2AgZmlsZXMuXG4gKlxuICogIyMjIEV4YW1wbGU6XG4gKlxuICogWW91IGhhdmUgY29tcG9uZW50IGxpYnJhcnkgb24gbnBtIGNhbGxlZCBgY29tcG9uZW50LWxpYnJhcnlgLCBmcm9tIHdoaWNoXG4gKiB5b3UgZXhwb3J0IGEgY29tcG9uZW50IGNhbGxlZCBgTXlDb21wb25lbnRgLiBGb3IgU3ZlbHRlK1R5cGVTY3JpcHQgdXNlcnMsXG4gKiB5b3Ugd2FudCB0byBwcm92aWRlIHR5cGluZ3MuIFRoZXJlZm9yZSB5b3UgY3JlYXRlIGEgYGluZGV4LmQudHNgOlxuICogYGBgdHNcbiAqIGltcG9ydCB7IFN2ZWx0ZUNvbXBvbmVudFR5cGVkIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICogZXhwb3J0IGNsYXNzIE15Q29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50VHlwZWQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGBgYFxuICogVHlwaW5nIHRoaXMgbWFrZXMgaXQgcG9zc2libGUgZm9yIElERXMgbGlrZSBWUyBDb2RlIHdpdGggdGhlIFN2ZWx0ZSBleHRlbnNpb25cbiAqIHRvIHByb3ZpZGUgaW50ZWxsaXNlbnNlIGFuZCB0byB1c2UgdGhlIGNvbXBvbmVudCBsaWtlIHRoaXMgaW4gYSBTdmVsdGUgZmlsZVxuICogd2l0aCBUeXBlU2NyaXB0OlxuICogYGBgc3ZlbHRlXG4gKiA8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICogXHRpbXBvcnQgeyBNeUNvbXBvbmVudCB9IGZyb20gXCJjb21wb25lbnQtbGlicmFyeVwiO1xuICogPC9zY3JpcHQ+XG4gKiA8TXlDb21wb25lbnQgZm9vPXsnYmFyJ30gLz5cbiAqIGBgYFxuICpcbiAqICMjIyMgV2h5IG5vdCBtYWtlIHRoaXMgcGFydCBvZiBgU3ZlbHRlQ29tcG9uZW50KERldilgP1xuICogQmVjYXVzZVxuICogYGBgdHNcbiAqIGNsYXNzIEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50PHtmb286IHN0cmluZ30+IHt9XG4gKiBjb25zdCBjb21wb25lbnQ6IHR5cGVvZiBTdmVsdGVDb21wb25lbnQgPSBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudDtcbiAqIGBgYFxuICogd2lsbCB0aHJvdyBhIHR5cGUgZXJyb3IsIHNvIHdlIG5lZWQgdG8gc2VwYXJhdGUgdGhlIG1vcmUgc3RyaWN0bHkgdHlwZWQgY2xhc3MuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkIGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50RGV2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvb3BfZ3VhcmQodGltZW91dCkge1xuICAgIGNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXJ0ID4gdGltZW91dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmZpbml0ZSBsb29wIGRldGVjdGVkJyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBIdG1sVGFnLCBIdG1sVGFnSHlkcmF0aW9uLCBSZXNpemVPYnNlcnZlclNpbmdsZXRvbiwgU3ZlbHRlQ29tcG9uZW50LCBTdmVsdGVDb21wb25lbnREZXYsIFN2ZWx0ZUNvbXBvbmVudFR5cGVkLCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfaWZyYW1lX3Jlc2l6ZV9saXN0ZW5lciwgYWRkX2xvY2F0aW9uLCBhZGRfcmVuZGVyX2NhbGxiYWNrLCBhZGRfc3R5bGVzLCBhZGRfdHJhbnNmb3JtLCBhZnRlclVwZGF0ZSwgYXBwZW5kLCBhcHBlbmRfZGV2LCBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldCwgYXBwZW5kX2h5ZHJhdGlvbiwgYXBwZW5kX2h5ZHJhdGlvbl9kZXYsIGFwcGVuZF9zdHlsZXMsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGF0dHJpYnV0ZV90b19vYmplY3QsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21tZW50LCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX2h0bWxfdGFnLCBjbGFpbV9zcGFjZSwgY2xhaW1fc3ZnX2VsZW1lbnQsIGNsYWltX3RleHQsIGNsZWFyX2xvb3BzLCBjb21tZW50LCBjb21wb25lbnRfc3Vic2NyaWJlLCBjb21wdXRlX3Jlc3RfcHJvcHMsIGNvbXB1dGVfc2xvdHMsIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50LCBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudF9kZXYsIGNvbnRlbnRlZGl0YWJsZV90cnV0aHlfdmFsdWVzLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9jb21wb25lbnQsIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVuZF9oeWRyYXRpbmcsIGVzY2FwZSwgZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZSwgZXNjYXBlX29iamVjdCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBmbHVzaF9yZW5kZXJfY2FsbGJhY2tzLCBnZXRBbGxDb250ZXh0cywgZ2V0Q29udGV4dCwgZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlLCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzLCBnZXRfcm9vdF9mb3Jfc3R5bGUsIGdldF9zbG90X2NoYW5nZXMsIGdldF9zcHJlYWRfb2JqZWN0LCBnZXRfc3ByZWFkX3VwZGF0ZSwgZ2V0X3N0b3JlX3ZhbHVlLCBnbG9iYWxzLCBncm91cF9vdXRyb3MsIGhhbmRsZV9wcm9taXNlLCBoYXNDb250ZXh0LCBoYXNfcHJvcCwgaGVhZF9zZWxlY3RvciwgaWRlbnRpdHksIGluaXQsIGluaXRfYmluZGluZ19ncm91cCwgaW5pdF9iaW5kaW5nX2dyb3VwX2R5bmFtaWMsIGluc2VydCwgaW5zZXJ0X2RldiwgaW5zZXJ0X2h5ZHJhdGlvbiwgaW5zZXJ0X2h5ZHJhdGlvbl9kZXYsIGludHJvcywgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIsIGlzX2NsaWVudCwgaXNfY3Jvc3NvcmlnaW4sIGlzX2VtcHR5LCBpc19mdW5jdGlvbiwgaXNfcHJvbWlzZSwgaXNfdm9pZCwgbGlzdGVuLCBsaXN0ZW5fZGV2LCBsb29wLCBsb29wX2d1YXJkLCBtZXJnZV9zc3Jfc3R5bGVzLCBtaXNzaW5nX2NvbXBvbmVudCwgbW91bnRfY29tcG9uZW50LCBub29wLCBub3RfZXF1YWwsIG5vdywgbnVsbF90b19lbXB0eSwgb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcywgb25EZXN0cm95LCBvbk1vdW50LCBvbmNlLCBvdXRyb19hbmRfZGVzdHJveV9ibG9jaywgcHJldmVudF9kZWZhdWx0LCBwcm9wX2RldiwgcXVlcnlfc2VsZWN0b3JfYWxsLCByYWYsIHJlc2l6ZV9vYnNlcnZlcl9ib3JkZXJfYm94LCByZXNpemVfb2JzZXJ2ZXJfY29udGVudF9ib3gsIHJlc2l6ZV9vYnNlcnZlcl9kZXZpY2VfcGl4ZWxfY29udGVudF9ib3gsIHJ1biwgcnVuX2FsbCwgc2FmZV9ub3RfZXF1YWwsIHNjaGVkdWxlX3VwZGF0ZSwgc2VsZWN0X211bHRpcGxlX3ZhbHVlLCBzZWxlY3Rfb3B0aW9uLCBzZWxlY3Rfb3B0aW9ucywgc2VsZWN0X3ZhbHVlLCBzZWxmLCBzZXRDb250ZXh0LCBzZXRfYXR0cmlidXRlcywgc2V0X2N1cnJlbnRfY29tcG9uZW50LCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YSwgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGFfbWFwLCBzZXRfZGF0YSwgc2V0X2RhdGFfY29udGVudGVkaXRhYmxlLCBzZXRfZGF0YV9jb250ZW50ZWRpdGFibGVfZGV2LCBzZXRfZGF0YV9kZXYsIHNldF9kYXRhX21heWJlX2NvbnRlbnRlZGl0YWJsZSwgc2V0X2RhdGFfbWF5YmVfY29udGVudGVkaXRhYmxlX2Rldiwgc2V0X2R5bmFtaWNfZWxlbWVudF9kYXRhLCBzZXRfaW5wdXRfdHlwZSwgc2V0X2lucHV0X3ZhbHVlLCBzZXRfbm93LCBzZXRfcmFmLCBzZXRfc3RvcmVfdmFsdWUsIHNldF9zdHlsZSwgc2V0X3N2Z19hdHRyaWJ1dGVzLCBzcGFjZSwgc3BsaXRfY3NzX3VuaXQsIHNwcmVhZCwgc3JjX3VybF9lcXVhbCwgc3RhcnRfaHlkcmF0aW5nLCBzdG9wX2ltbWVkaWF0ZV9wcm9wYWdhdGlvbiwgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdHJ1c3RlZCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9iYXNlLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50LCB4bGlua19hdHRyIH07XG4iLCAiaW1wb3J0IHsgbm9vcCwgc2FmZV9ub3RfZXF1YWwsIHN1YnNjcmliZSwgcnVuX2FsbCwgaXNfZnVuY3Rpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuZXhwb3J0IHsgZ2V0X3N0b3JlX3ZhbHVlIGFzIGdldCB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbmNvbnN0IHN1YnNjcmliZXJfcXVldWUgPSBbXTtcbi8qKlxuICogQ3JlYXRlcyBhIGBSZWFkYWJsZWAgc3RvcmUgdGhhdCBhbGxvd3MgcmVhZGluZyBieSBzdWJzY3JpcHRpb24uXG4gKiBAcGFyYW0gdmFsdWUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcn0gW3N0YXJ0XVxuICovXG5mdW5jdGlvbiByZWFkYWJsZSh2YWx1ZSwgc3RhcnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmU6IHdyaXRhYmxlKHZhbHVlLCBzdGFydCkuc3Vic2NyaWJlXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgYFdyaXRhYmxlYCBzdG9yZSB0aGF0IGFsbG93cyBib3RoIHVwZGF0aW5nIGFuZCByZWFkaW5nIGJ5IHN1YnNjcmlwdGlvbi5cbiAqIEBwYXJhbSB7Kj19dmFsdWUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcj19IHN0YXJ0XG4gKi9cbmZ1bmN0aW9uIHdyaXRhYmxlKHZhbHVlLCBzdGFydCA9IG5vb3ApIHtcbiAgICBsZXQgc3RvcDtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlKSB7XG4gICAgICAgIGlmIChzYWZlX25vdF9lcXVhbCh2YWx1ZSwgbmV3X3ZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBuZXdfdmFsdWU7XG4gICAgICAgICAgICBpZiAoc3RvcCkgeyAvLyBzdG9yZSBpcyByZWFkeVxuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bl9xdWV1ZSA9ICFzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2Ygc3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlclsxXSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlLnB1c2goc3Vic2NyaWJlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVuX3F1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZVtpXVswXShzdWJzY3JpYmVyX3F1ZXVlW2kgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGUoZm4pIHtcbiAgICAgICAgc2V0KGZuKHZhbHVlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShydW4sIGludmFsaWRhdGUgPSBub29wKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSBbcnVuLCBpbnZhbGlkYXRlXTtcbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgc3RvcCA9IHN0YXJ0KHNldCkgfHwgbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBydW4odmFsdWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDAgJiYgc3RvcCkge1xuICAgICAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgICAgICAgICBzdG9wID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc2V0LCB1cGRhdGUsIHN1YnNjcmliZSB9O1xufVxuZnVuY3Rpb24gZGVyaXZlZChzdG9yZXMsIGZuLCBpbml0aWFsX3ZhbHVlKSB7XG4gICAgY29uc3Qgc2luZ2xlID0gIUFycmF5LmlzQXJyYXkoc3RvcmVzKTtcbiAgICBjb25zdCBzdG9yZXNfYXJyYXkgPSBzaW5nbGVcbiAgICAgICAgPyBbc3RvcmVzXVxuICAgICAgICA6IHN0b3JlcztcbiAgICBjb25zdCBhdXRvID0gZm4ubGVuZ3RoIDwgMjtcbiAgICByZXR1cm4gcmVhZGFibGUoaW5pdGlhbF92YWx1ZSwgKHNldCkgPT4ge1xuICAgICAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IHBlbmRpbmcgPSAwO1xuICAgICAgICBsZXQgY2xlYW51cCA9IG5vb3A7XG4gICAgICAgIGNvbnN0IHN5bmMgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKHNpbmdsZSA/IHZhbHVlc1swXSA6IHZhbHVlcywgc2V0KTtcbiAgICAgICAgICAgIGlmIChhdXRvKSB7XG4gICAgICAgICAgICAgICAgc2V0KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwID0gaXNfZnVuY3Rpb24ocmVzdWx0KSA/IHJlc3VsdCA6IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlcnMgPSBzdG9yZXNfYXJyYXkubWFwKChzdG9yZSwgaSkgPT4gc3Vic2NyaWJlKHN0b3JlLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgcGVuZGluZyAmPSB+KDEgPDwgaSk7XG4gICAgICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIHN5bmMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgKCkgPT4ge1xuICAgICAgICAgICAgcGVuZGluZyB8PSAoMSA8PCBpKTtcbiAgICAgICAgfSkpO1xuICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgc3luYygpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodW5zdWJzY3JpYmVycyk7XG4gICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHNldCB0aGlzIHRvIGZhbHNlIGJlY2F1c2UgY2FsbGJhY2tzIGNhbiBzdGlsbCBoYXBwZW4gZGVzcGl0ZSBoYXZpbmcgdW5zdWJzY3JpYmVkOlxuICAgICAgICAgICAgLy8gQ2FsbGJhY2tzIG1pZ2h0IGFscmVhZHkgYmUgcGxhY2VkIGluIHRoZSBxdWV1ZSB3aGljaCBkb2Vzbid0IGtub3cgaXQgc2hvdWxkIG5vIGxvbmdlclxuICAgICAgICAgICAgLy8gaW52b2tlIHRoaXMgZGVyaXZlZCBzdG9yZS5cbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8qKlxuICogVGFrZXMgYSBzdG9yZSBhbmQgcmV0dXJucyBhIG5ldyBvbmUgZGVyaXZlZCBmcm9tIHRoZSBvbGQgb25lIHRoYXQgaXMgcmVhZGFibGUuXG4gKlxuICogQHBhcmFtIHN0b3JlIC0gc3RvcmUgdG8gbWFrZSByZWFkb25seVxuICovXG5mdW5jdGlvbiByZWFkb25seShzdG9yZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmliZTogc3RvcmUuc3Vic2NyaWJlLmJpbmQoc3RvcmUpXG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZGVyaXZlZCwgcmVhZGFibGUsIHJlYWRvbmx5LCB3cml0YWJsZSB9O1xuIiwgInZhciBycj1PYmplY3QuY3JlYXRlO3ZhciBFPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgZXI9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgdHI9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIG5yPU9iamVjdC5nZXRQcm90b3R5cGVPZixhcj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBGPShyLGUpPT4oKT0+KGV8fHIoKGU9e2V4cG9ydHM6e319KS5leHBvcnRzLGUpLGUuZXhwb3J0cyk7dmFyIGNyPShyLGUsdCxuKT0+e2lmKGUmJnR5cGVvZiBlPT1cIm9iamVjdFwifHx0eXBlb2YgZT09XCJmdW5jdGlvblwiKWZvcihsZXQgYSBvZiB0cihlKSkhYXIuY2FsbChyLGEpJiZhIT09dCYmRShyLGEse2dldDooKT0+ZVthXSxlbnVtZXJhYmxlOiEobj1lcihlLGEpKXx8bi5lbnVtZXJhYmxlfSk7cmV0dXJuIHJ9O3ZhciBpcj0ocixlLHQpPT4odD1yIT1udWxsP3JyKG5yKHIpKTp7fSxjcihlfHwhcnx8IXIuX19lc01vZHVsZT9FKHQsXCJkZWZhdWx0XCIse3ZhbHVlOnIsZW51bWVyYWJsZTohMH0pOnQscikpO3ZhciBrPUYoKHZyLEEpPT57XCJ1c2Ugc3RyaWN0XCI7QS5leHBvcnRzPXI9PmVuY29kZVVSSUNvbXBvbmVudChyKS5yZXBsYWNlKC9bIScoKSpdL2csZT0+YCUke2UuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX1gKX0pO3ZhciBVPUYoKGJyLFIpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyICQ9XCIlW2EtZjAtOV17Mn1cIixDPW5ldyBSZWdFeHAoJCxcImdpXCIpLE49bmV3IFJlZ0V4cChcIihcIiskK1wiKStcIixcImdpXCIpO2Z1bmN0aW9uIHgocixlKXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyLmpvaW4oXCJcIikpfWNhdGNoe31pZihyLmxlbmd0aD09PTEpcmV0dXJuIHI7ZT1lfHwxO3ZhciB0PXIuc2xpY2UoMCxlKSxuPXIuc2xpY2UoZSk7cmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuY2FsbChbXSx4KHQpLHgobikpfWZ1bmN0aW9uIHNyKHIpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHIpfWNhdGNoe2Zvcih2YXIgZT1yLm1hdGNoKEMpLHQ9MTt0PGUubGVuZ3RoO3QrKylyPXgoZSx0KS5qb2luKFwiXCIpLGU9ci5tYXRjaChDKTtyZXR1cm4gcn19ZnVuY3Rpb24gZnIocil7Zm9yKHZhciBlPXtcIiVGRSVGRlwiOlwiXFx1RkZGRFxcdUZGRkRcIixcIiVGRiVGRVwiOlwiXFx1RkZGRFxcdUZGRkRcIn0sdD1OLmV4ZWMocik7dDspe3RyeXtlW3RbMF1dPWRlY29kZVVSSUNvbXBvbmVudCh0WzBdKX1jYXRjaHt2YXIgbj1zcih0WzBdKTtuIT09dFswXSYmKGVbdFswXV09bil9dD1OLmV4ZWMocil9ZVtcIiVDMlwiXT1cIlxcdUZGRkRcIjtmb3IodmFyIGE9T2JqZWN0LmtleXMoZSksaT0wO2k8YS5sZW5ndGg7aSsrKXt2YXIgYz1hW2ldO3I9ci5yZXBsYWNlKG5ldyBSZWdFeHAoYyxcImdcIiksZVtjXSl9cmV0dXJuIHJ9Ui5leHBvcnRzPWZ1bmN0aW9uKHIpe2lmKHR5cGVvZiByIT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGBcIit0eXBlb2YgcitcImBcIik7dHJ5e3JldHVybiByPXIucmVwbGFjZSgvXFwrL2csXCIgXCIpLGRlY29kZVVSSUNvbXBvbmVudChyKX1jYXRjaHtyZXR1cm4gZnIocil9fX0pO3ZhciBUPUYoKGpyLHEpPT57XCJ1c2Ugc3RyaWN0XCI7cS5leHBvcnRzPShyLGUpPT57aWYoISh0eXBlb2Ygcj09XCJzdHJpbmdcIiYmdHlwZW9mIGU9PVwic3RyaW5nXCIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJFeHBlY3RlZCB0aGUgYXJndW1lbnRzIHRvIGJlIG9mIHR5cGUgYHN0cmluZ2BcIik7aWYoZT09PVwiXCIpcmV0dXJuW3JdO2xldCB0PXIuaW5kZXhPZihlKTtyZXR1cm4gdD09PS0xP1tyXTpbci5zbGljZSgwLHQpLHIuc2xpY2UodCtlLmxlbmd0aCldfX0pO3ZhciBJPUYoKFNyLEQpPT57XCJ1c2Ugc3RyaWN0XCI7RC5leHBvcnRzPWZ1bmN0aW9uKHIsZSl7Zm9yKHZhciB0PXt9LG49T2JqZWN0LmtleXMociksYT1BcnJheS5pc0FycmF5KGUpLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIGM9bltpXSxzPXJbY107KGE/ZS5pbmRleE9mKGMpIT09LTE6ZShjLHMscikpJiYodFtjXT1zKX1yZXR1cm4gdH19KTt2YXIgUT1GKG89PntcInVzZSBzdHJpY3RcIjt2YXIgdXI9aygpLGxyPVUoKSxCPVQoKSxvcj1JKCksZHI9cj0+cj09bnVsbDtmdW5jdGlvbiBocihyKXtzd2l0Y2goci5hcnJheUZvcm1hdCl7Y2FzZVwiaW5kZXhcIjpyZXR1cm4gZT0+KHQsbik9PntsZXQgYT10Lmxlbmd0aDtyZXR1cm4gbj09PXZvaWQgMHx8ci5za2lwTnVsbCYmbj09PW51bGx8fHIuc2tpcEVtcHR5U3RyaW5nJiZuPT09XCJcIj90Om49PT1udWxsP1suLi50LFtsKGUsciksXCJbXCIsYSxcIl1cIl0uam9pbihcIlwiKV06Wy4uLnQsW2woZSxyKSxcIltcIixsKGEsciksXCJdPVwiLGwobixyKV0uam9pbihcIlwiKV19O2Nhc2VcImJyYWNrZXRcIjpyZXR1cm4gZT0+KHQsbik9Pm49PT12b2lkIDB8fHIuc2tpcE51bGwmJm49PT1udWxsfHxyLnNraXBFbXB0eVN0cmluZyYmbj09PVwiXCI/dDpuPT09bnVsbD9bLi4udCxbbChlLHIpLFwiW11cIl0uam9pbihcIlwiKV06Wy4uLnQsW2woZSxyKSxcIltdPVwiLGwobixyKV0uam9pbihcIlwiKV07Y2FzZVwiY29tbWFcIjpjYXNlXCJzZXBhcmF0b3JcIjpyZXR1cm4gZT0+KHQsbik9Pm49PW51bGx8fG4ubGVuZ3RoPT09MD90OnQubGVuZ3RoPT09MD9bW2woZSxyKSxcIj1cIixsKG4scildLmpvaW4oXCJcIildOltbdCxsKG4scildLmpvaW4oci5hcnJheUZvcm1hdFNlcGFyYXRvcildO2RlZmF1bHQ6cmV0dXJuIGU9Pih0LG4pPT5uPT09dm9pZCAwfHxyLnNraXBOdWxsJiZuPT09bnVsbHx8ci5za2lwRW1wdHlTdHJpbmcmJm49PT1cIlwiP3Q6bj09PW51bGw/Wy4uLnQsbChlLHIpXTpbLi4udCxbbChlLHIpLFwiPVwiLGwobixyKV0uam9pbihcIlwiKV19fWZ1bmN0aW9uIGdyKHIpe2xldCBlO3N3aXRjaChyLmFycmF5Rm9ybWF0KXtjYXNlXCJpbmRleFwiOnJldHVybih0LG4sYSk9PntpZihlPS9cXFsoXFxkKilcXF0kLy5leGVjKHQpLHQ9dC5yZXBsYWNlKC9cXFtcXGQqXFxdJC8sXCJcIiksIWUpe2FbdF09bjtyZXR1cm59YVt0XT09PXZvaWQgMCYmKGFbdF09e30pLGFbdF1bZVsxXV09bn07Y2FzZVwiYnJhY2tldFwiOnJldHVybih0LG4sYSk9PntpZihlPS8oXFxbXFxdKSQvLmV4ZWModCksdD10LnJlcGxhY2UoL1xcW1xcXSQvLFwiXCIpLCFlKXthW3RdPW47cmV0dXJufWlmKGFbdF09PT12b2lkIDApe2FbdF09W25dO3JldHVybn1hW3RdPVtdLmNvbmNhdChhW3RdLG4pfTtjYXNlXCJjb21tYVwiOmNhc2VcInNlcGFyYXRvclwiOnJldHVybih0LG4sYSk9PntsZXQgaT10eXBlb2Ygbj09XCJzdHJpbmdcIiYmbi5pbmNsdWRlcyhyLmFycmF5Rm9ybWF0U2VwYXJhdG9yKSxjPXR5cGVvZiBuPT1cInN0cmluZ1wiJiYhaSYmZyhuLHIpLmluY2x1ZGVzKHIuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO249Yz9nKG4scik6bjtsZXQgcz1pfHxjP24uc3BsaXQoci5hcnJheUZvcm1hdFNlcGFyYXRvcikubWFwKGY9PmcoZixyKSk6bj09PW51bGw/bjpnKG4scik7YVt0XT1zfTtkZWZhdWx0OnJldHVybih0LG4sYSk9PntpZihhW3RdPT09dm9pZCAwKXthW3RdPW47cmV0dXJufWFbdF09W10uY29uY2F0KGFbdF0sbil9fX1mdW5jdGlvbiBMKHIpe2lmKHR5cGVvZiByIT1cInN0cmluZ1wifHxyLmxlbmd0aCE9PTEpdGhyb3cgbmV3IFR5cGVFcnJvcihcImFycmF5Rm9ybWF0U2VwYXJhdG9yIG11c3QgYmUgc2luZ2xlIGNoYXJhY3RlciBzdHJpbmdcIil9ZnVuY3Rpb24gbChyLGUpe3JldHVybiBlLmVuY29kZT9lLnN0cmljdD91cihyKTplbmNvZGVVUklDb21wb25lbnQocik6cn1mdW5jdGlvbiBnKHIsZSl7cmV0dXJuIGUuZGVjb2RlP2xyKHIpOnJ9ZnVuY3Rpb24gSChyKXtyZXR1cm4gQXJyYXkuaXNBcnJheShyKT9yLnNvcnQoKTp0eXBlb2Ygcj09XCJvYmplY3RcIj9IKE9iamVjdC5rZXlzKHIpKS5zb3J0KChlLHQpPT5OdW1iZXIoZSktTnVtYmVyKHQpKS5tYXAoZT0+cltlXSk6cn1mdW5jdGlvbiBKKHIpe2xldCBlPXIuaW5kZXhPZihcIiNcIik7cmV0dXJuIGUhPT0tMSYmKHI9ci5zbGljZSgwLGUpKSxyfWZ1bmN0aW9uIHlyKHIpe2xldCBlPVwiXCIsdD1yLmluZGV4T2YoXCIjXCIpO3JldHVybiB0IT09LTEmJihlPXIuc2xpY2UodCkpLGV9ZnVuY3Rpb24gUChyKXtyPUoocik7bGV0IGU9ci5pbmRleE9mKFwiP1wiKTtyZXR1cm4gZT09PS0xP1wiXCI6ci5zbGljZShlKzEpfWZ1bmN0aW9uIE0ocixlKXtyZXR1cm4gZS5wYXJzZU51bWJlcnMmJiFOdW1iZXIuaXNOYU4oTnVtYmVyKHIpKSYmdHlwZW9mIHI9PVwic3RyaW5nXCImJnIudHJpbSgpIT09XCJcIj9yPU51bWJlcihyKTplLnBhcnNlQm9vbGVhbnMmJnIhPT1udWxsJiYoci50b0xvd2VyQ2FzZSgpPT09XCJ0cnVlXCJ8fHIudG9Mb3dlckNhc2UoKT09PVwiZmFsc2VcIikmJihyPXIudG9Mb3dlckNhc2UoKT09PVwidHJ1ZVwiKSxyfWZ1bmN0aW9uIFYocixlKXtlPU9iamVjdC5hc3NpZ24oe2RlY29kZTohMCxzb3J0OiEwLGFycmF5Rm9ybWF0Olwibm9uZVwiLGFycmF5Rm9ybWF0U2VwYXJhdG9yOlwiLFwiLHBhcnNlTnVtYmVyczohMSxwYXJzZUJvb2xlYW5zOiExfSxlKSxMKGUuYXJyYXlGb3JtYXRTZXBhcmF0b3IpO2xldCB0PWdyKGUpLG49T2JqZWN0LmNyZWF0ZShudWxsKTtpZih0eXBlb2YgciE9XCJzdHJpbmdcInx8KHI9ci50cmltKCkucmVwbGFjZSgvXls/IyZdLyxcIlwiKSwhcikpcmV0dXJuIG47Zm9yKGxldCBhIG9mIHIuc3BsaXQoXCImXCIpKXtpZihhPT09XCJcIiljb250aW51ZTtsZXRbaSxjXT1CKGUuZGVjb2RlP2EucmVwbGFjZSgvXFwrL2csXCIgXCIpOmEsXCI9XCIpO2M9Yz09PXZvaWQgMD9udWxsOltcImNvbW1hXCIsXCJzZXBhcmF0b3JcIl0uaW5jbHVkZXMoZS5hcnJheUZvcm1hdCk/YzpnKGMsZSksdChnKGksZSksYyxuKX1mb3IobGV0IGEgb2YgT2JqZWN0LmtleXMobikpe2xldCBpPW5bYV07aWYodHlwZW9mIGk9PVwib2JqZWN0XCImJmkhPT1udWxsKWZvcihsZXQgYyBvZiBPYmplY3Qua2V5cyhpKSlpW2NdPU0oaVtjXSxlKTtlbHNlIG5bYV09TShpLGUpfXJldHVybiBlLnNvcnQ9PT0hMT9uOihlLnNvcnQ9PT0hMD9PYmplY3Qua2V5cyhuKS5zb3J0KCk6T2JqZWN0LmtleXMobikuc29ydChlLnNvcnQpKS5yZWR1Y2UoKGEsaSk9PntsZXQgYz1uW2ldO3JldHVybiBCb29sZWFuKGMpJiZ0eXBlb2YgYz09XCJvYmplY3RcIiYmIUFycmF5LmlzQXJyYXkoYyk/YVtpXT1IKGMpOmFbaV09YyxhfSxPYmplY3QuY3JlYXRlKG51bGwpKX1vLmV4dHJhY3Q9UDtvLnBhcnNlPVY7by5zdHJpbmdpZnk9KHIsZSk9PntpZighcilyZXR1cm5cIlwiO2U9T2JqZWN0LmFzc2lnbih7ZW5jb2RlOiEwLHN0cmljdDohMCxhcnJheUZvcm1hdDpcIm5vbmVcIixhcnJheUZvcm1hdFNlcGFyYXRvcjpcIixcIn0sZSksTChlLmFycmF5Rm9ybWF0U2VwYXJhdG9yKTtsZXQgdD1jPT5lLnNraXBOdWxsJiZkcihyW2NdKXx8ZS5za2lwRW1wdHlTdHJpbmcmJnJbY109PT1cIlwiLG49aHIoZSksYT17fTtmb3IobGV0IGMgb2YgT2JqZWN0LmtleXMocikpdChjKXx8KGFbY109cltjXSk7bGV0IGk9T2JqZWN0LmtleXMoYSk7cmV0dXJuIGUuc29ydCE9PSExJiZpLnNvcnQoZS5zb3J0KSxpLm1hcChjPT57bGV0IHM9cltjXTtyZXR1cm4gcz09PXZvaWQgMD9cIlwiOnM9PT1udWxsP2woYyxlKTpBcnJheS5pc0FycmF5KHMpP3MucmVkdWNlKG4oYyksW10pLmpvaW4oXCImXCIpOmwoYyxlKStcIj1cIitsKHMsZSl9KS5maWx0ZXIoYz0+Yy5sZW5ndGg+MCkuam9pbihcIiZcIil9O28ucGFyc2VVcmw9KHIsZSk9PntlPU9iamVjdC5hc3NpZ24oe2RlY29kZTohMH0sZSk7bGV0W3Qsbl09QihyLFwiI1wiKTtyZXR1cm4gT2JqZWN0LmFzc2lnbih7dXJsOnQuc3BsaXQoXCI/XCIpWzBdfHxcIlwiLHF1ZXJ5OlYoUChyKSxlKX0sZSYmZS5wYXJzZUZyYWdtZW50SWRlbnRpZmllciYmbj97ZnJhZ21lbnRJZGVudGlmaWVyOmcobixlKX06e30pfTtvLnN0cmluZ2lmeVVybD0ocixlKT0+e2U9T2JqZWN0LmFzc2lnbih7ZW5jb2RlOiEwLHN0cmljdDohMH0sZSk7bGV0IHQ9SihyLnVybCkuc3BsaXQoXCI/XCIpWzBdfHxcIlwiLG49by5leHRyYWN0KHIudXJsKSxhPW8ucGFyc2Uobix7c29ydDohMX0pLGk9T2JqZWN0LmFzc2lnbihhLHIucXVlcnkpLGM9by5zdHJpbmdpZnkoaSxlKTtjJiYoYz1gPyR7Y31gKTtsZXQgcz15cihyLnVybCk7cmV0dXJuIHIuZnJhZ21lbnRJZGVudGlmaWVyJiYocz1gIyR7bChyLmZyYWdtZW50SWRlbnRpZmllcixlKX1gKSxgJHt0fSR7Y30ke3N9YH07by5waWNrPShyLGUsdCk9Pnt0PU9iamVjdC5hc3NpZ24oe3BhcnNlRnJhZ21lbnRJZGVudGlmaWVyOiEwfSx0KTtsZXR7dXJsOm4scXVlcnk6YSxmcmFnbWVudElkZW50aWZpZXI6aX09by5wYXJzZVVybChyLHQpO3JldHVybiBvLnN0cmluZ2lmeVVybCh7dXJsOm4scXVlcnk6b3IoYSxlKSxmcmFnbWVudElkZW50aWZpZXI6aX0sdCl9O28uZXhjbHVkZT0ocixlLHQpPT57bGV0IG49QXJyYXkuaXNBcnJheShlKT9hPT4hZS5pbmNsdWRlcyhhKTooYSxpKT0+IWUoYSxpKTtyZXR1cm4gby5waWNrKHIsbix0KX19KTt2YXIgWD1pcihRKCkpO3ZhciB3PWZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGUodCxuKXt2YXIgYT1cIlVucmVhY2hhYmxlICdcIisodCE9PVwiL1wiP3QucmVwbGFjZSgvXFwvJC8sXCJcIik6dCkrXCInLCBzZWdtZW50ICdcIituK1wiJyBpcyBub3QgZGVmaW5lZFwiO3IuY2FsbCh0aGlzLGEpLHRoaXMubWVzc2FnZT1hLHRoaXMucm91dGU9dCx0aGlzLnBhdGg9bn1yZXR1cm4gciYmKGUuX19wcm90b19fPXIpLGUucHJvdG90eXBlPU9iamVjdC5jcmVhdGUociYmci5wcm90b3R5cGUpLGUucHJvdG90eXBlLmNvbnN0cnVjdG9yPWUsZX0oRXJyb3IpO2Z1bmN0aW9uIEcocixlKXt2YXIgdCxuLGE9LTEwMCxpPVtdO3Q9ci5yZXBsYWNlKC9bLSQuXS9nLFwiXFxcXCQmXCIpLnJlcGxhY2UoL1xcKC9nLFwiKD86XCIpLnJlcGxhY2UoL1xcKS9nLFwiKT9cIikucmVwbGFjZSgvKFs6Kl1cXHcrKSg/OjwoW148Pl0rPyk+KT8vZyxmdW5jdGlvbihmLGQsdSl7cmV0dXJuIGkucHVzaChkLnN1YnN0cigxKSksZC5jaGFyQXQoKT09PVwiOlwiPyhhKz0xMDAsXCIoKD8hIylcIisodXx8XCJbXiMvXSs/XCIpK1wiKVwiKToobj0hMCxhKz01MDAsXCIoKD8hIylcIisodXx8XCJbXiNdKz9cIikrXCIpXCIpfSk7dHJ5e3Q9bmV3IFJlZ0V4cChcIl5cIit0K1wiJFwiKX1jYXRjaHt0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCByb3V0ZSBleHByZXNzaW9uLCBnaXZlbiAnXCIrZStcIidcIil9dmFyIGM9ci5pbmNsdWRlcyhcIiNcIik/LjU6MSxzPXIubGVuZ3RoKmEqYztyZXR1cm57a2V5czppLHJlZ2V4OnQsX2RlcHRoOnMsX2lzU3BsYXQ6bn19dmFyIG09ZnVuY3Rpb24oZSx0KXt2YXIgbj1HKGUsdCksYT1uLmtleXMsaT1uLnJlZ2V4LGM9bi5fZGVwdGgscz1uLl9pc1NwbGF0O2Z1bmN0aW9uIGYoZCl7dmFyIHU9ZC5tYXRjaChpKTtpZih1KXJldHVybiBhLnJlZHVjZShmdW5jdGlvbih5LE8sail7cmV0dXJuIHlbT109dHlwZW9mIHVbaisxXT09XCJzdHJpbmdcIj9kZWNvZGVVUklDb21wb25lbnQodVtqKzFdKTpudWxsLHl9LHt9KX1yZXR1cm4gZi5yZWdleD1pLGYua2V5cz1hLHtfaXNTcGxhdDpzLF9kZXB0aDpjLG1hdGNoOmZ9fTttLnB1c2g9ZnVuY3Rpb24oZSx0LG4sYSl7dmFyIGk9dFtlXXx8KHRbZV09e30pO3JldHVybiBpLnBhdHRlcm58fChpLnBhdHRlcm49bmV3IG0oZSxhKSxpLnJvdXRlPShufHxcIlwiKS5yZXBsYWNlKC9cXC8kLyxcIlwiKXx8XCIvXCIpLHQua2V5cz10LmtleXN8fFtdLHQua2V5cy5pbmNsdWRlcyhlKXx8KHQua2V5cy5wdXNoKGUpLG0uc29ydCh0KSksaX07bS5zb3J0PWZ1bmN0aW9uKGUpe2Uua2V5cy5zb3J0KGZ1bmN0aW9uKHQsbil7cmV0dXJuIGVbdF0ucGF0dGVybi5fZGVwdGgtZVtuXS5wYXR0ZXJuLl9kZXB0aH0pfTtmdW5jdGlvbiBLKHIsZSl7cmV0dXJuXCJcIisoZSYmZSE9PVwiL1wiP2U6XCJcIikrKHJ8fFwiXCIpfWZ1bmN0aW9uIGIocixlKXt2YXIgdD1yLm1hdGNoKC88W148Pl0qXFwvW148Pl0qPi8pO2lmKHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJlZ0V4cCBjYW5ub3QgY29udGFpbiBzbGFzaGVzLCBnaXZlbiAnXCIrdCtcIidcIik7dmFyIG49ci5zcGxpdCgvKD89XFwvfCMpLyksYT1bXTtuWzBdIT09XCIvXCImJm4udW5zaGlmdChcIi9cIiksbi5zb21lKGZ1bmN0aW9uKGksYyl7dmFyIHM9YS5zbGljZSgxKS5jb25jYXQoaSkuam9pbihcIlwiKXx8bnVsbCxmPW4uc2xpY2UoYysxKS5qb2luKFwiXCIpfHxudWxsLGQ9ZShpLHMsZj9cIlwiKyhpIT09XCIvXCI/aTpcIlwiKStmOm51bGwpO3JldHVybiBhLnB1c2goaSksZH0pfWZ1bmN0aW9uIG1yKHIsZSl7dmFyIHQ9ZS5yZWZzLG49e30sYT1bXSxpO3JldHVybiBiKHIsZnVuY3Rpb24oYyxzLGYpe2lmKCFlLmtleXMpdGhyb3cgbmV3IHcocixjKTt2YXIgZDtpZihlLmtleXMuc29tZShmdW5jdGlvbih1KXt2YXIgeT1lW3VdLnBhdHRlcm4sTz15Lm1hdGNoLGo9eS5fbGVuZ3RoLHA9eS5faXNTcGxhdCxfPU8ocCYmZnx8Yyk7aWYoXyl7dmFyIFk9KHRbZVt1XS5yb3V0ZV18fFtdKS5jb25jYXQodFtlW3VdLnJvdXRlK1wiL1wiXXx8W10pLmNvbmNhdCh0W2VbdV0ucm91dGUrXCIjXCJdfHxbXSk7cmV0dXJuIE9iamVjdC5hc3NpZ24obixfKSxZLmZvckVhY2goZnVuY3Rpb24odil7aWYoIWEuc29tZShmdW5jdGlvbihaKXtyZXR1cm4gWi5rZXk9PT12fSkpe3ZhciBoPU9iamVjdC5hc3NpZ24oe30sdFt2XSksUz0hMTtoLmV4YWN0P1M9Zj09PW51bGw6Uz0hKGMmJnM9PT1udWxsKXx8Yz09PXN8fHB8fCFmLGgubWF0Y2hlcz1TLGgucGFyYW1zPU9iamVjdC5hc3NpZ24oe30sbiksaC5yb3V0ZT1oLmZ1bGxwYXRoLGguZGVwdGgrPU8ua2V5cy5sZW5ndGgsaC5wYXRoPXAmJmZ8fHN8fGMsZGVsZXRlIGguZnVsbHBhdGgsYS5wdXNoKGgpfX0pLGY9PT1udWxsJiYhZVt1XS5rZXlzPyEwOiFwJiYhZiYmZS5rZXlzLnNvbWUoZnVuY3Rpb24odil7cmV0dXJuIHYuaW5jbHVkZXMoXCIqXCIpfSk/ITE6KGk9cCxlPWVbdV0sZD0hMCwhMCl9cmV0dXJuITF9KSwhKGR8fGUua2V5cy5zb21lKGZ1bmN0aW9uKHUpe3JldHVybiBlW3VdLnBhdHRlcm4ubWF0Y2goYyl9KSkpdGhyb3cgbmV3IHcocixjKTtyZXR1cm4gaXx8IWR9KSxhLnNvcnQoZnVuY3Rpb24oYyxzKXtyZXR1cm4gcy5mYWxsYmFjayYmIWMuZmFsbGJhY2s/LTE6Yy5mYWxsYmFjayYmIXMuZmFsbGJhY2s/MTpzLnJvdXRlLmluY2x1ZGVzKFwiI1wiKSYmIWMucm91dGUuaW5jbHVkZXMoXCIjXCIpPy0xOmMucm91dGUuaW5jbHVkZXMoXCIjXCIpJiYhcy5yb3V0ZS5pbmNsdWRlcyhcIiNcIik/MTpjLmRlcHRoLXMuZGVwdGh9KX1mdW5jdGlvbiB6KHIsZSx0KXtmb3IodmFyIG49bXIuYmluZChudWxsLHIsZSksYT1bXTt0PjA7KXt0LT0xO3RyeXtyZXR1cm4gbihhKX1jYXRjaChpKXtpZih0PjApcmV0dXJuIG4oYSk7dGhyb3cgaX19fWZ1bmN0aW9uIHByKHIsZSx0LG4pe3ZhciBhPUsocix0KSxpPWEuc3BsaXQoLyg/PVsjOi8qLl1cXHcpL2cpLmxlbmd0aCxjPU9iamVjdC5hc3NpZ24oe30sbix7ZnVsbHBhdGg6YSxkZXB0aDppfSk7aWYoIXJ8fCFcIiMvXCIuaW5jbHVkZXMoci5jaGFyQXQoKSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJvdXRlcyBzaG91bGQgaGF2ZSBhIHZhbGlkIHBhdGgsIGdpdmVuIFwiK0pTT04uc3RyaW5naWZ5KHIpKTtpZighYy5rZXkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlJvdXRlcyBzaG91bGQgaGF2ZSBhIGtleSwgZ2l2ZW4gXCIrSlNPTi5zdHJpbmdpZnkoYykpO2UucmVmc1tjLmtleV09YyxlLnJlZnNbYV09ZS5yZWZzW2FdP2UucmVmc1thXS5jb25jYXQoYy5rZXkpOltjLmtleV07dmFyIHM9ZTtyZXR1cm4gYihhLGZ1bmN0aW9uKGYsZCl7cz1tLnB1c2goZixzLGQsYSl9KSxhfWZ1bmN0aW9uIEZyKHIsZSx0KXt2YXIgbj1LKHIsdCksYT1lLGk9bnVsbCxjPW51bGw7aWYoYihuLGZ1bmN0aW9uKGYpe2lmKCFhKXJldHVybiBpPW51bGwsITA7aWYoIWEua2V5cyl0aHJvdyBuZXcgdyhyLGYpO2M9ZixpPWEsYT1hW2NdfSksIShpJiZjKSl0aHJvdyBuZXcgdyhyLGMpO2lmKGk9PT1lJiYoaT1lW1wiL1wiXSksaS5yb3V0ZSE9PWMpe3ZhciBzPWkua2V5cy5pbmRleE9mKGMpO2lmKHM9PT0tMSl0aHJvdyBuZXcgdyhyLGMpO2kua2V5cy5zcGxpY2UocywxKSxtLnNvcnQoaSksZGVsZXRlIGlbY119aS5yb3V0ZT09PWEucm91dGUmJmRlbGV0ZSBlLnJlZnNbbl19dmFyIFc9ZnVuY3Rpb24oKXt2YXIgZT17cmVmczp7fX0sdD1bXTtyZXR1cm57cm91dGVzOmUscmVzb2x2ZTpmdW5jdGlvbihuLGEpe3ZhciBpPW4uc3BsaXQoXCI/XCIpWzBdLGM9W107YihpLGZ1bmN0aW9uKHMsZixkKXt0cnl7YShudWxsLHooZixlLDIpLmZpbHRlcihmdW5jdGlvbih1KXtyZXR1cm4gYy5pbmNsdWRlcyh1LnJvdXRlKT8hMTooYy5wdXNoKHUucm91dGUpLCEwKX0pLGYpfWNhdGNoKHUpe2EodSxbXSl9fSl9LG1vdW50OmZ1bmN0aW9uKG4sYSl7biE9PVwiL1wiJiZ0LnB1c2gobiksYSgpLHQucG9wKCl9LGZpbmQ6ZnVuY3Rpb24obixhKXtyZXR1cm4geihuLGUsYT09PSEwPzI6YXx8MSl9LGFkZDpmdW5jdGlvbihuLGEpe3JldHVybiBwcihuLGUsdC5qb2luKFwiXCIpLGEpfSxybTpmdW5jdGlvbihuKXtyZXR1cm4gRnIobixlLHQuam9pbihcIlwiKSl9fX07Vy5tYXRjaGVzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEcoZSx0KS5yZWdleC50ZXN0KHQpfTt2YXIgd3I9Vzt2YXIgZXhwb3J0X3BhcnNlPVgucGFyc2U7dmFyIGV4cG9ydF9zdHJpbmdpZnk9WC5zdHJpbmdpZnk7ZXhwb3J0e3dyIGFzIFJvdXRlcixleHBvcnRfcGFyc2UgYXMgcGFyc2UsZXhwb3J0X3N0cmluZ2lmeSBhcyBzdHJpbmdpZnl9O1xuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbmltcG9ydCB7IFJvdXRlciwgc3RyaW5naWZ5IH0gZnJvbSAnLi4vdmVuZG9yJztcblxuY29uc3QgY2FjaGUgPSB7fTtcbmNvbnN0IGJhc2VUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpO1xuY29uc3QgYmFzZVByZWZpeCA9IChiYXNlVGFnWzBdICYmIGJhc2VUYWdbMF0uaHJlZikgfHwgJy8nO1xuXG5leHBvcnQgY29uc3QgUk9PVF9VUkwgPSBiYXNlUHJlZml4LnJlcGxhY2Uod2luZG93LmxvY2F0aW9uLm9yaWdpbiwgJycpO1xuXG5leHBvcnQgY29uc3Qgcm91dGVyID0gd3JpdGFibGUoe1xuICBwYXRoOiAnLycsXG4gIHF1ZXJ5OiB7fSxcbiAgcGFyYW1zOiB7fSxcbiAgaW5pdGlhbDogdHJ1ZSxcbn0pO1xuXG5leHBvcnQgY29uc3QgQ1RYX1JPVVRFUiA9IHt9O1xuZXhwb3J0IGNvbnN0IENUWF9ST1VURSA9IHt9O1xuXG4vLyB1c2UgbG9jYXRpb24uaGFzaCBvbiBlbWJlZGRlZCBwYWdlcywgZS5nLiBTdmVsdGUgUkVQTFxubGV0IEhBU0hDSEFOR0UgPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luID09PSAnbnVsbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNoY2hhbmdlRW5hYmxlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIEhBU0hDSEFOR0UgPSAhIXZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIEhBU0hDSEFOR0U7XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb3V0ZXIsICdoYXNoY2hhbmdlJywge1xuICBzZXQ6IHZhbHVlID0+IGhhc2hjaGFuZ2VFbmFibGUodmFsdWUpLFxuICBnZXQ6ICgpID0+IGhhc2hjaGFuZ2VFbmFibGUoKSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgZW51bWVyYWJsZTogZmFsc2UsXG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZpeGVkTG9jYXRpb24ocGF0aCwgY2FsbGJhY2ssIGRvRmluYWxseSkge1xuICBjb25zdCBiYXNlVXJpID0gcm91dGVyLmhhc2hjaGFuZ2UgPyB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpIDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuXG4gIC8vIHRoaXMgd2lsbCByZWJhc2UgYW5jaG9ycyB0byBhdm9pZCBsb2NhdGlvbiBjaGFuZ2VzXG4gIGlmIChwYXRoLmNoYXJBdCgpICE9PSAnLycpIHtcbiAgICBwYXRoID0gYmFzZVVyaSArIHBhdGg7XG4gIH1cblxuICBjb25zdCBjdXJyZW50VVJMID0gYmFzZVVyaSArIHdpbmRvdy5sb2NhdGlvbi5oYXNoICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaDtcblxuICAvLyBkbyBub3QgY2hhbmdlIGxvY2F0aW9uIGV0IGFsbC4uLlxuICBpZiAoY3VycmVudFVSTCAhPT0gcGF0aCkge1xuICAgIGNhbGxiYWNrKHBhdGgpO1xuICB9XG5cbiAgLy8gaW52b2tlIGZpbmFsIGd1YXJkIHJlZ2FyZGxlc3Mgb2YgcHJldmlvdXMgcmVzdWx0XG4gIGlmICh0eXBlb2YgZG9GaW5hbGx5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZG9GaW5hbGx5KCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuUGF0aCh1cmksIGZpeCkge1xuICByZXR1cm4gdXJpICE9PSAnLycgfHwgZml4ID8gdXJpLnJlcGxhY2UoL1xcLyQvLCAnJykgOiB1cmk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZVRvKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3Qge1xuICAgIHJlbG9hZCwgcmVwbGFjZSxcbiAgICBwYXJhbXMsIHF1ZXJ5UGFyYW1zLFxuICB9ID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBJZiBwYXRoIGVtcHR5IG9yIG5vIHN0cmluZywgdGhyb3dzIGVycm9yXG4gIGlmICghcGF0aCB8fCB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgfHwgKHBhdGhbMF0gIT09ICcvJyAmJiBwYXRoWzBdICE9PSAnIycpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RpbmcgJy8ke3BhdGh9JyBvciAnIyR7cGF0aH0nLCBnaXZlbiAnJHtwYXRofSdgKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMpIHtcbiAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC86KFthLXpBLVpdW2EtekEtWjAtOV8tXSopL2csIChfLCBrZXkpID0+IHBhcmFtc1trZXldKTtcbiAgfVxuXG4gIGlmIChxdWVyeVBhcmFtcykge1xuICAgIGNvbnN0IHFzID0gc3RyaW5naWZ5KHF1ZXJ5UGFyYW1zKTtcblxuICAgIGlmIChxcykge1xuICAgICAgcGF0aCArPSBgPyR7cXN9YDtcbiAgICB9XG4gIH1cblxuICBpZiAocm91dGVyLmhhc2hjaGFuZ2UpIHtcbiAgICBsZXQgZml4ZWRVUkwgPSBwYXRoLnJlcGxhY2UoL14jfCMkL2csICcnKTtcblxuICAgIGlmIChST09UX1VSTCAhPT0gJy8nKSB7XG4gICAgICBmaXhlZFVSTCA9IGZpeGVkVVJMLnJlcGxhY2UoY2xlYW5QYXRoKFJPT1RfVVJMKSwgJycpO1xuICAgIH1cblxuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gZml4ZWRVUkwgIT09ICcvJyA/IGZpeGVkVVJMIDogJyc7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgbm8gSGlzdG9yeSBBUEkgc3VwcG9ydCwgZmFsbGJhY2tzIHRvIFVSTCByZWRpcmVjdFxuICBpZiAocmVsb2FkIHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgfHwgIXdpbmRvdy5kaXNwYXRjaEV2ZW50KSB7XG4gICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBwYXRoO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIElmIGhhcyBIaXN0b3J5IEFQSSBzdXBwb3J0LCB1c2VzIGl0XG4gIGZpeGVkTG9jYXRpb24ocGF0aCwgbmV4dFVSTCA9PiB7XG4gICAgd2luZG93Lmhpc3RvcnlbcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKG51bGwsICcnLCBuZXh0VVJMKTtcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3BvcHN0YXRlJykpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFByb3BzKGdpdmVuLCByZXF1aXJlZCkge1xuICBjb25zdCB7IHByb3BzOiBzdWIsIC4uLm90aGVycyB9ID0gZ2l2ZW47XG5cbiAgLy8gcHJ1bmUgYWxsIGRlY2xhcmVkIHByb3BzIGZyb20gdGhpcyBjb21wb25lbnRcbiAgcmVxdWlyZWQuZm9yRWFjaChrID0+IHtcbiAgICBkZWxldGUgb3RoZXJzW2tdO1xuICB9KTtcblxuICByZXR1cm4ge1xuICAgIC4uLnN1YixcbiAgICAuLi5vdGhlcnMsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FjdGl2ZSh1cmksIHBhdGgsIGV4YWN0KSB7XG4gIGlmICghY2FjaGVbW3VyaSwgcGF0aCwgZXhhY3RdXSkge1xuICAgIGlmIChleGFjdCAhPT0gdHJ1ZSAmJiBwYXRoLmluZGV4T2YodXJpKSA9PT0gMCkge1xuICAgICAgY2FjaGVbW3VyaSwgcGF0aCwgZXhhY3RdXSA9IC9eWyMvP10/JC8udGVzdChwYXRoLnN1YnN0cih1cmkubGVuZ3RoLCAxKSk7XG4gICAgfSBlbHNlIGlmICh1cmkuaW5jbHVkZXMoJyonKSB8fCB1cmkuaW5jbHVkZXMoJzonKSkge1xuICAgICAgY2FjaGVbW3VyaSwgcGF0aCwgZXhhY3RdXSA9IFJvdXRlci5tYXRjaGVzKHVyaSwgcGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlW1t1cmksIHBhdGgsIGV4YWN0XV0gPSBjbGVhblBhdGgocGF0aCkgPT09IHVyaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2FjaGVbW3VyaSwgcGF0aCwgZXhhY3RdXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZShvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiB0eXBlb2Ygb2JqZWN0LnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N2ZWx0ZUNvbXBvbmVudChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBvYmplY3QucHJvdG90eXBlO1xufVxuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbmltcG9ydCB7IFJvdXRlciwgcGFyc2UgfSBmcm9tICcuLi92ZW5kb3InO1xuXG5pbXBvcnQge1xuICBST09UX1VSTCwgbmF2aWdhdGVUbywgY2xlYW5QYXRoLCBpc0FjdGl2ZSwgcm91dGVyLFxufSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGJhc2VSb3V0ZXIgPSBuZXcgUm91dGVyKCk7XG5leHBvcnQgY29uc3Qgcm91dGVJbmZvID0gd3JpdGFibGUoe30pO1xuXG4vLyBwcml2YXRlIHJlZ2lzdHJpZXNcbmNvbnN0IG9uRXJyb3IgPSB7fTtcbmNvbnN0IHNoYXJlZCA9IHt9O1xuXG5sZXQgZXJyb3JzID0gW107XG5sZXQgcm91dGVycyA9IDA7XG5sZXQgaW50ZXJ2YWw7XG5sZXQgY3VycmVudFVSTDtcblxuLy8gdGFrZSBzbmFwc2hvdCBmcm9tIGN1cnJlbnQgc3RhdGUuLi5cbnJvdXRlci5zdWJzY3JpYmUodmFsdWUgPT4geyBzaGFyZWQucm91dGVyID0gdmFsdWU7IH0pO1xucm91dGVJbmZvLnN1YnNjcmliZSh2YWx1ZSA9PiB7IHNoYXJlZC5yb3V0ZUluZm8gPSB2YWx1ZTsgfSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb0ZhbGxiYWNrKGZhaWx1cmUsIGZhbGxiYWNrKSB7XG4gIHJvdXRlSW5mby51cGRhdGUoZGVmYXVsdHMgPT4gKHtcbiAgICAuLi5kZWZhdWx0cyxcbiAgICBbZmFsbGJhY2tdOiB7XG4gICAgICAuLi5zaGFyZWQucm91dGVyLFxuICAgICAgZmFpbHVyZSxcbiAgICB9LFxuICB9KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVSb3V0ZXMobWFwLCBwYXJhbXMsIGVuZm9yY2UpIHtcbiAgbWFwLnNvbWUoeCA9PiB7XG4gICAgaWYgKHgua2V5ICYmIChlbmZvcmNlIHx8ICh4Lm1hdGNoZXMgJiYgIXNoYXJlZC5yb3V0ZUluZm9beC5rZXldKSkpIHtcbiAgICAgIGlmICh4LnJlZGlyZWN0ICYmICh4LmNvbmRpdGlvbiA9PT0gbnVsbCB8fCB4LmNvbmRpdGlvbihzaGFyZWQucm91dGVyKSAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgaWYgKHguZXhhY3QgJiYgc2hhcmVkLnJvdXRlci5wYXRoICE9PSB4LnBhdGgpIHJldHVybiBmYWxzZTtcbiAgICAgICAgbmF2aWdhdGVUbyh4LnJlZGlyZWN0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmV4YWN0ICYmIHgucGF0aCAhPT0gY3VycmVudFVSTCkge1xuICAgICAgICBpZiAoY3VycmVudFVSTC5yZXBsYWNlKC9bIy9dJC8sICcnKSAhPT0geC5wYXRoKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbmZvcmNlICYmIHguZmFsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKHBhcmFtcywgeC5wYXJhbXMpO1xuXG4gICAgICAvLyB1cGdyYWRlIG1hdGNoaW5nIHJvdXRlcyFcbiAgICAgIHJvdXRlSW5mby51cGRhdGUoZGVmYXVsdHMgPT4gKHtcbiAgICAgICAgLi4uZGVmYXVsdHMsXG4gICAgICAgIFt4LmtleV06IHtcbiAgICAgICAgICAuLi5zaGFyZWQucm91dGVyLFxuICAgICAgICAgIC4uLngsXG4gICAgICAgIH0sXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV2dEhhbmRsZXIoKSB7XG4gIGxldCBiYXNlVXJpID0gIXJvdXRlci5oYXNoY2hhbmdlID8gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSh3aW5kb3cubG9jYXRpb24ub3JpZ2luLCAnJykgOiB3aW5kb3cubG9jYXRpb24uaGFzaCB8fCAnLyc7XG4gIGxldCBmYWlsdXJlO1xuXG4gIC8vIHVucHJlZml4IGFjdGl2ZSBVUkxcbiAgaWYgKFJPT1RfVVJMICE9PSAnLycpIHtcbiAgICBiYXNlVXJpID0gYmFzZVVyaS5yZXBsYWNlKGNsZWFuUGF0aChST09UX1VSTCksICcnKTtcbiAgfVxuXG4gIC8vIHNraXAgZ2l2ZW4gYW5jaG9ycyBpZiBhbHJlYWR5IGV4aXN0cyBvbiBkb2N1bWVudCwgc2VlICM0M1xuICBpZiAoXG4gICAgL14jW1xcdy1dKyQvLnRlc3Qod2luZG93LmxvY2F0aW9uLmhhc2gpXG4gICAgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih3aW5kb3cubG9jYXRpb24uaGFzaClcbiAgICAmJiBjdXJyZW50VVJMID09PSBiYXNlVXJpLnNwbGl0KCcjJylbMF1cbiAgKSByZXR1cm47XG5cbiAgLy8gdHJhaWxpbmcgc2xhc2ggaXMgcmVxdWlyZWQgdG8ga2VlcCByb3V0ZS1pbmZvIG9uIG5lc3RlZCByb3V0ZXMhXG4gIC8vIHNlZTogaHR0cHM6Ly9naXRodWIuY29tL3BhdGVrZXRydWVrZS9hYnN0cmFjdC1uZXN0ZWQtcm91dGVyL2NvbW1pdC8wZjMzODM4NGJkZGNmYmFlZTMwZjNlYTJjNGViMGMyNGNmNTE3NGNkXG4gIGNvbnN0IG5vcm1hbGl6ZWRVUkwgPSBiYXNlVXJpLnJlcGxhY2UoJy8jJywgJyMnKS5yZXBsYWNlKC9eI1xcLy8sICcvJyk7XG4gIGNvbnN0IFtwYXRoLCBxc10gPSBub3JtYWxpemVkVVJMLnNwbGl0KCc/Jyk7XG4gIGNvbnN0IGZ1bGxwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC8/JC8sICcvJyk7XG4gIGNvbnN0IHBhcmFtcyA9IHt9O1xuXG4gIGlmIChjdXJyZW50VVJMICE9PSBub3JtYWxpemVkVVJMKSB7XG4gICAgY3VycmVudFVSTCA9IG5vcm1hbGl6ZWRVUkw7XG4gICAgcm91dGVyLnNldCh7XG4gICAgICBwYXRoOiBjbGVhblBhdGgoZnVsbHBhdGgpLFxuICAgICAgcXVlcnk6IHBhcnNlKHFzKSxcbiAgICAgIHBhcmFtcyxcbiAgICB9KTtcbiAgfVxuXG4gIHJvdXRlSW5mby5zZXQoe30pO1xuXG4gIC8vIGxvYWQgYWxsIG1hdGNoaW5nIHJvdXRlcy4uLlxuICBiYXNlUm91dGVyLnJlc29sdmUoZnVsbHBhdGgsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGZhaWx1cmUgPSBlcnI7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaGFuZGxlUm91dGVzKHJlc3VsdCwgcGFyYW1zKTtcbiAgfSk7XG5cbiAgaWYgKCFmYWlsdXJlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGhhbmRsZVJvdXRlcyhiYXNlUm91dGVyLmZpbmQoZnVsbHBhdGgpLCBwYXJhbXMsIHRydWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vb3BcbiAgICB9XG4gIH1cblxuICAvLyBpdCdzIGZpbmUgdG8gb21pdCBmYWlsdXJlcyBmb3IgJy8nIHBhdGhzXG4gIGlmIChmYWlsdXJlICYmIGZhaWx1cmUucGF0aCAhPT0gJy8nKSB7XG4gICAgY29uc29sZS5kZWJ1ZyhmYWlsdXJlKTtcbiAgfSBlbHNlIHtcbiAgICBmYWlsdXJlID0gbnVsbDtcbiAgfVxuXG4gIC8vIGNsZWFyIHByZXZpb3VzbHkgZmFpbGVkIGhhbmRsZXJzXG4gIGVycm9ycy5mb3JFYWNoKGNiID0+IGNiKCkpO1xuICBlcnJvcnMgPSBbXTtcblxuICBsZXQgZmFsbGJhY2s7XG5cbiAgLy8gaW52b2tlIGVycm9yLWhhbmRsZXJzIHRvIGNsZWFyIG91dCBwcmV2aW91cyBzdGF0ZSFcbiAgT2JqZWN0LmtleXMob25FcnJvcikuZm9yRWFjaChyb290ID0+IHtcbiAgICBpZiAoaXNBY3RpdmUocm9vdCwgZnVsbHBhdGgsIGZhbHNlKSkge1xuICAgICAgY29uc3QgZm4gPSBvbkVycm9yW3Jvb3RdLmNhbGxiYWNrO1xuXG4gICAgICBmbihmYWlsdXJlKTtcbiAgICAgIGVycm9ycy5wdXNoKGZuKTtcbiAgICB9XG5cbiAgICBpZiAoIWZhbGxiYWNrICYmIG9uRXJyb3Jbcm9vdF0uZmFsbGJhY2spIHtcbiAgICAgIGZhbGxiYWNrID0gb25FcnJvcltyb290XS5mYWxsYmFjaztcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGhhbmRsZSB1bm1hdGNoZWQgZmFsbGJhY2tzXG4gIGlmIChmYWlsdXJlICYmIGZhbGxiYWNrKSB7XG4gICAgZG9GYWxsYmFjayhmYWlsdXJlLCBmYWxsYmFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmRSb3V0ZXMoKSB7XG4gIGNsZWFyVGltZW91dChpbnRlcnZhbCk7XG4gIGludGVydmFsID0gc2V0VGltZW91dChldnRIYW5kbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFJvdXRlcihyb290LCBmYWxsYmFjaywgY2FsbGJhY2spIHtcbiAgaWYgKCFyb3V0ZXJzKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZmluZFJvdXRlcywgZmFsc2UpO1xuICB9XG5cbiAgLy8gcmVnaXN0ZXIgZXJyb3ItaGFuZGxlcnNcbiAgaWYgKCFvbkVycm9yW3Jvb3RdIHx8IGZhbGxiYWNrKSB7XG4gICAgb25FcnJvcltyb290XSA9IHsgZmFsbGJhY2ssIGNhbGxiYWNrIH07XG4gIH1cblxuICByb3V0ZXJzICs9IDE7XG5cbiAgcmV0dXJuICgpID0+IHtcbiAgICByb3V0ZXJzIC09IDE7XG5cbiAgICBpZiAoIXJvdXRlcnMpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGZpbmRSb3V0ZXMsIGZhbHNlKTtcbiAgICB9XG4gIH07XG59XG4iLCAiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcbiAgaW1wb3J0IHsgQ1RYX1JPVVRFUiwgcm91dGVyIH0gZnJvbSAnLi91dGlscyc7XG4gIGltcG9ydCB7XG4gICAgYmFzZVJvdXRlciwgYWRkUm91dGVyLCBmaW5kUm91dGVzLCBkb0ZhbGxiYWNrLFxuICB9IGZyb20gJy4vcm91dGVyJztcblxuICAvLyBjb25zdCBfX0NBQ0hFRF9ST1VURVNfXyA9IG5ldyBNYXAoKTtcbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuICBpbXBvcnQge1xuICAgIG9uTW91bnQsIG9uRGVzdHJveSwgZ2V0Q29udGV4dCwgc2V0Q29udGV4dCxcbiAgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGxldCBjbGVhbnVwO1xuICBsZXQgZmFpbHVyZTtcbiAgbGV0IGZhbGxiYWNrO1xuXG4gIGV4cG9ydCBsZXQga2V5ID0gJyc7XG4gIGV4cG9ydCBsZXQgcGF0aCA9ICcvJztcbiAgZXhwb3J0IGxldCBwZW5kaW5nID0gbnVsbDtcbiAgZXhwb3J0IGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGNvbmRpdGlvbiA9IG51bGw7XG5cblxuXG5cblxuICBjb25zdCByb3V0ZXJDb250ZXh0ID0gZ2V0Q29udGV4dChDVFhfUk9VVEVSKTtcbiAgY29uc3QgYmFzZVBhdGggPSByb3V0ZXJDb250ZXh0ID8gcm91dGVyQ29udGV4dC5iYXNlUGF0aCA6IHdyaXRhYmxlKHBhdGgpO1xuXG4gIGNvbnN0IGZpeGVkUm9vdCA9ICRiYXNlUGF0aCAhPT0gcGF0aCAmJiAkYmFzZVBhdGggIT09ICcvJ1xuICAgID8gYCR7JGJhc2VQYXRofSR7cGF0aCAhPT0gJy8nID8gcGF0aCA6ICcnfWBcbiAgICA6IHBhdGg7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gIGZ1bmN0aW9uIGFzc2lnblJvdXRlKF9rZXksIHJvdXRlLCBkZXRhaWwpIHtcbiAgICBfa2V5ID0gX2tleSB8fCBgcm91dGUtJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMil9YDtcblxuICAgIGNvbnN0ICRrZXkgPSBba2V5LCBfa2V5XS5maWx0ZXIoQm9vbGVhbikuam9pbignLicpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB7IGtleTogJGtleSwgLi4uZGV0YWlsIH07XG5cbiAgICBsZXQgZnVsbHBhdGg7XG4gICAgYmFzZVJvdXRlci5tb3VudChmaXhlZFJvb3QsICgpID0+IHtcbiAgICAgIGZ1bGxwYXRoID0gYmFzZVJvdXRlci5hZGQocm91dGUsIGhhbmRsZXIpO1xuICAgICAgZmFsbGJhY2sgPSAoaGFuZGxlci5mYWxsYmFjayAmJiAka2V5KSB8fCBmYWxsYmFjaztcbiAgICB9KTtcblxuICAgIGZpbmRSb3V0ZXMoKTtcblxuICAgIHJldHVybiBbJGtleSwgZnVsbHBhdGhdO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5hc3NpZ25Sb3V0ZShyb3V0ZSkge1xuICAgIHRyeSB7XG4gICAgICBiYXNlUm91dGVyLnJtKHJvdXRlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyDwn5SlIHRoaXMgaXMgZmluZS4uLlxuICAgIH1cbiAgICBmaW5kUm91dGVzKCk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkVycm9yKGVycikge1xuICAgIGZhaWx1cmUgPSBlcnI7XG5cbiAgICBpZiAoZmFpbHVyZSAmJiBmYWxsYmFjaykge1xuICAgICAgZG9GYWxsYmFjayhmYWlsdXJlLCBmYWxsYmFjayk7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgY2xlYW51cCA9IGFkZFJvdXRlcihmaXhlZFJvb3QsIGZhbGxiYWNrLCBvbkVycm9yKTtcbiAgfSk7XG5cbiAgb25EZXN0cm95KCgpID0+IHtcbiAgICBpZiAoY2xlYW51cCkgY2xlYW51cCgpO1xuICB9KTtcblxuICBzZXRDb250ZXh0KENUWF9ST1VURVIsIHtcbiAgICBiYXNlUGF0aCxcbiAgICBhc3NpZ25Sb3V0ZSxcbiAgICB1bmFzc2lnblJvdXRlLFxuICAgIHBlbmRpbmdDb21wb25lbnQ6IHBlbmRpbmcsXG4gIH0pO1xuXG4gICQ6IGlmIChjb25kaXRpb24pIHtcbiAgICBkaXNhYmxlZCA9ICFjb25kaXRpb24oJHJvdXRlcik7XG4gIH1cbjwvc2NyaXB0PlxuXG57I2lmICFkaXNhYmxlZH1cbiAgPHNsb3Qgcm91dGVyPXskcm91dGVyfSAvPlxuey9pZn1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiIsICI8c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tICdzdmVsdGUvc3RvcmUnO1xuICBpbXBvcnQgeyByb3V0ZUluZm8gfSBmcm9tICcuL3JvdXRlcic7XG4gIGltcG9ydCB7XG4gICAgQ1RYX1JPVVRFUiwgQ1RYX1JPVVRFLCByb3V0ZXIsIGdldFByb3BzLCBpc1Byb21pc2UsIGlzU3ZlbHRlQ29tcG9uZW50LFxuICB9IGZyb20gJy4vdXRpbHMnO1xuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uRGVzdHJveSwgZ2V0Q29udGV4dCwgc2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSc7XG5cbiAgZXhwb3J0IGxldCBrZXkgPSBudWxsO1xuICBleHBvcnQgbGV0IHBhdGggPSAnLyc7XG4gIGV4cG9ydCBsZXQgZXhhY3QgPSBudWxsO1xuICBleHBvcnQgbGV0IHBlbmRpbmcgPSBudWxsO1xuICBleHBvcnQgbGV0IGRpc2FibGVkID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgZmFsbGJhY2sgPSBudWxsO1xuICBleHBvcnQgbGV0IGNvbXBvbmVudCA9IG51bGw7XG4gIGV4cG9ydCBsZXQgY29uZGl0aW9uID0gbnVsbDtcbiAgZXhwb3J0IGxldCByZWRpcmVjdCA9IG51bGw7XG5cbiAgLy8gcmVwbGFjZW1lbnQgZm9yIGBPYmplY3Qua2V5cyhhcmd1bWVudHNbMF0uJCQucHJvcHMpYFxuICBjb25zdCB0aGlzUHJvcHMgPSBbJ2tleScsICdwYXRoJywgJ2V4YWN0JywgJ3BlbmRpbmcnLCAnZGlzYWJsZWQnLCAnZmFsbGJhY2snLCAnY29tcG9uZW50JywgJ2NvbmRpdGlvbicsICdyZWRpcmVjdCddO1xuXG4gIGNvbnN0IHJvdXRlQ29udGV4dCA9IGdldENvbnRleHQoQ1RYX1JPVVRFKTtcbiAgY29uc3Qgcm91dGVyQ29udGV4dCA9IGdldENvbnRleHQoQ1RYX1JPVVRFUik7XG5cbiAgY29uc3QgeyBhc3NpZ25Sb3V0ZSwgdW5hc3NpZ25Sb3V0ZSwgcGVuZGluZ0NvbXBvbmVudCB9ID0gcm91dGVyQ29udGV4dCB8fCB7fTtcblxuICBjb25zdCByb3V0ZVBhdGggPSByb3V0ZUNvbnRleHQgPyByb3V0ZUNvbnRleHQucm91dGVQYXRoIDogd3JpdGFibGUocGF0aCk7XG5cbiAgbGV0IGFjdGl2ZVJvdXRlciA9IG51bGw7XG4gIGxldCBhY3RpdmVQcm9wcyA9IHt9O1xuICBsZXQgZnVsbHBhdGg7XG4gIGxldCBoYXNMb2FkZWQ7XG5cbiAgY29uc3QgZml4ZWRSb290ID0gJHJvdXRlUGF0aCAhPT0gcGF0aCAmJiAkcm91dGVQYXRoICE9PSAnLydcbiAgICA/IGAkeyRyb3V0ZVBhdGh9JHtwYXRoICE9PSAnLycgPyBwYXRoIDogJyd9YFxuICAgIDogcGF0aDtcblxuICBmdW5jdGlvbiByZXNvbHZlKCkge1xuICAgIGNvbnN0IGZpeGVkUm91dGUgPSBwYXRoICE9PSBmaXhlZFJvb3QgJiYgZml4ZWRSb290LnN1YnN0cigtMSkgIT09ICcvJ1xuICAgICAgPyBgJHtmaXhlZFJvb3R9L2BcbiAgICAgIDogZml4ZWRSb290O1xuXG4gICAgW2tleSwgZnVsbHBhdGhdID0gYXNzaWduUm91dGUoa2V5LCBmaXhlZFJvdXRlLCB7XG4gICAgICBjb25kaXRpb24sIHJlZGlyZWN0LCBmYWxsYmFjaywgZXhhY3QsXG4gICAgfSk7XG4gIH1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbiAgcmVzb2x2ZSgpO1xuXG5cbiAgJDogaWYgKGtleSkge1xuICAgIGFjdGl2ZVJvdXRlciA9ICFkaXNhYmxlZCAmJiAkcm91dGVJbmZvW2tleV07XG4gICAgYWN0aXZlUHJvcHMgPSBnZXRQcm9wcygkJHByb3BzLCB0aGlzUHJvcHMpO1xuICAgIGFjdGl2ZVByb3BzLnJvdXRlciA9IGFjdGl2ZVJvdXRlcjtcbiAgfVxuXG4gICQ6IGlmIChhY3RpdmVSb3V0ZXIpIHtcbiAgICBmb3IgKGNvbnN0IGsgaW4gJHJvdXRlci5wYXJhbXMpIHtcbiAgICAgIGlmICh0eXBlb2YgYWN0aXZlUm91dGVyLnBhcmFtc1trXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgYWN0aXZlUm91dGVyLnBhcmFtc1trXSA9ICRyb3V0ZXIucGFyYW1zW2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY29tcG9uZW50KSB7IC8vIGNvbXBvbmVudCBwYXNzZWQgYXMgc2xvdFxuICAgICAgaGFzTG9hZGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzU3ZlbHRlQ29tcG9uZW50KGNvbXBvbmVudCkpIHsgLy8gY29tcG9uZW50IHBhc3NlZCBhcyBTdmVsdGUgY29tcG9uZW50XG4gICAgICBoYXNMb2FkZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKGNvbXBvbmVudCkpIHsgLy8gY29tcG9uZW50IHBhc3NlZCBhcyBpbXBvcnQoKVxuICAgICAgY29tcG9uZW50LnRoZW4obW9kdWxlID0+IHtcbiAgICAgICAgY29tcG9uZW50ID0gbW9kdWxlLmRlZmF1bHQ7XG4gICAgICAgIGhhc0xvYWRlZCA9IHRydWU7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgeyAvLyBjb21wb25lbnQgcGFzc2VkIGFzICgpID0+IGltcG9ydCgpXG4gICAgICBjb21wb25lbnQoKS50aGVuKG1vZHVsZSA9PiB7XG4gICAgICAgIGNvbXBvbmVudCA9IG1vZHVsZS5kZWZhdWx0O1xuICAgICAgICBoYXNMb2FkZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25EZXN0cm95KCgpID0+IHtcbiAgICBpZiAodW5hc3NpZ25Sb3V0ZSkge1xuICAgICAgdW5hc3NpZ25Sb3V0ZShmdWxscGF0aCk7XG4gICAgfVxuICB9KTtcblxuICBzZXRDb250ZXh0KENUWF9ST1VURSwge1xuICAgIHJvdXRlUGF0aCxcbiAgfSk7XG48L3NjcmlwdD5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxueyNpZiBhY3RpdmVSb3V0ZXJ9XG48IS0tPGZpZWxkc2V0PjxsZWdlbmQ+e2tleX0gKHtleGFjdH0gfCB7ZnVsbHBhdGh9KTwvbGVnZW5kPi0tPlxuICB7I2lmICFoYXNMb2FkZWR9XG4gICAgeyNpZiBwZW5kaW5nIHx8IHBlbmRpbmdDb21wb25lbnR9XG4gICAgICB7I2lmIGlzU3ZlbHRlQ29tcG9uZW50KHBlbmRpbmcpfVxuICAgICAgICA8c3ZlbHRlOmNvbXBvbmVudCB0aGlzPXtwZW5kaW5nfSB7Li4uYWN0aXZlUHJvcHN9IC8+XG4gICAgICB7OmVsc2UgaWYgaXNTdmVsdGVDb21wb25lbnQocGVuZGluZ0NvbXBvbmVudCl9XG4gICAgICAgIDxzdmVsdGU6Y29tcG9uZW50IHRoaXM9e3BlbmRpbmdDb21wb25lbnR9IHsuLi5hY3RpdmVQcm9wc30gLz5cbiAgICAgIHs6ZWxzZX1cbiAgICAgICAge3BlbmRpbmcgfHwgcGVuZGluZ0NvbXBvbmVudH1cbiAgICAgIHsvaWZ9XG4gICAgey9pZn1cbiAgezplbHNlfVxuICAgIHsjaWYgY29tcG9uZW50fVxuICAgICAgPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17Y29tcG9uZW50fSB7Li4uYWN0aXZlUHJvcHN9IC8+XG4gICAgezplbHNlfVxuICAgICAgPHNsb3Qgey4uLmFjdGl2ZVByb3BzfSAvPlxuICAgIHsvaWZ9XG4gIHsvaWZ9XG48IS0tPC9maWVsZHNldD4tLT5cbnsvaWZ9XG4iLCAiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblxuICBpbXBvcnQge1xuICAgIFJPT1RfVVJMLCBmaXhlZExvY2F0aW9uLCBuYXZpZ2F0ZVRvLCBjbGVhblBhdGgsIGlzQWN0aXZlLCBnZXRQcm9wcywgcm91dGVyLFxuICB9IGZyb20gJy4vdXRpbHMnO1xuXG4gIGxldCByZWY7XG4gIGxldCBhY3RpdmU7XG4gIGxldCBjc3NDbGFzcyA9ICcnO1xuICBsZXQgZml4ZWRIcmVmID0gbnVsbDtcblxuICBleHBvcnQgbGV0IGdvID0gbnVsbDtcbiAgZXhwb3J0IGxldCBvcGVuID0gbnVsbDtcbiAgZXhwb3J0IGxldCBocmVmID0gJyc7XG4gIGV4cG9ydCBsZXQgdGl0bGUgPSAnJztcbiAgZXhwb3J0IGxldCBidXR0b24gPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBleGFjdCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHJlbG9hZCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IHJlcGxhY2UgPSBmYWxzZTtcbiAgZXhwb3J0IHsgY3NzQ2xhc3MgYXMgY2xhc3MgfTtcblxuICAvLyByZXBsYWNlbWVudCBmb3IgYE9iamVjdC5rZXlzKGFyZ3VtZW50c1swXS4kJC5wcm9wcylgXG4gIGNvbnN0IHRoaXNQcm9wcyA9IFsnZ28nLCAnb3BlbicsICdocmVmJywgJ2NsYXNzJywgJ3RpdGxlJywgJ2J1dHRvbicsICdleGFjdCcsICdyZWxvYWQnLCAncmVwbGFjZSddO1xuXG4gIC8vIHJlYmFzZSBhY3RpdmUgVVJMXG4gICQ6IGlmICghL14oXFx3KzopP1xcL1xcLy8udGVzdChocmVmKSkge1xuICAgIGZpeGVkSHJlZiA9IGNsZWFuUGF0aChST09UX1VSTCwgdHJ1ZSkgKyBjbGVhblBhdGgocm91dGVyLmhhc2hjaGFuZ2UgPyBgIyR7aHJlZn1gIDogaHJlZik7XG4gIH1cblxuICAkOiBpZiAocmVmICYmICRyb3V0ZXIucGF0aCkge1xuICAgIGlmIChpc0FjdGl2ZShocmVmLCAkcm91dGVyLnBhdGgsIGV4YWN0KSkge1xuICAgICAgaWYgKCFhY3RpdmUpIHtcbiAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgcmVmLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3BhZ2UnKTtcblxuICAgICAgICBpZiAoYnV0dG9uKSB7XG4gICAgICAgICAgcmVmLnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0aXZlKSB7XG4gICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgIHJlZi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICByZWYucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICB9XG4gIH1cblxuICAvLyBleHRyYWN0IGFkZGl0aW9uYWwgcHJvcHNcbiAgJDogZml4ZWRQcm9wcyA9IGdldFByb3BzKCQkcHJvcHMsIHRoaXNQcm9wcyk7XG5cbiAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAvLyB0aGlzIHdpbGwgZW5hYmxlIGA8TGluayBvbjpjbGljaz17Li4ufSAvPmAgY2FsbHNcbiAgZnVuY3Rpb24gaGFuZGxlT25DbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKHR5cGVvZiBnbyA9PT0gJ3N0cmluZycgJiYgd2luZG93Lmhpc3RvcnkubGVuZ3RoID4gMSkge1xuICAgICAgaWYgKGdvID09PSAnYmFjaycpIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICAgIGVsc2UgaWYgKGdvID09PSAnZndkJykgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpO1xuICAgICAgZWxzZSB3aW5kb3cuaGlzdG9yeS5nbyhwYXJzZUludChnbywgMTApKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWZpeGVkSHJlZiAmJiBocmVmICE9PSAnJykge1xuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgbGV0IHNwZWNzID0gdHlwZW9mIG9wZW4gPT09ICdzdHJpbmcnID8gb3BlbiA6ICcnO1xuXG4gICAgICAgIGNvbnN0IHdtYXRjaCA9IHNwZWNzLm1hdGNoKC93aWR0aD0oXFxkKykvKTtcbiAgICAgICAgY29uc3QgaG1hdGNoID0gc3BlY3MubWF0Y2goL2hlaWdodD0oXFxkKykvKTtcblxuICAgICAgICBpZiAod21hdGNoKSBzcGVjcyArPSBgLGxlZnQ9JHsod2luZG93LnNjcmVlbi53aWR0aCAtIHdtYXRjaFsxXSkgLyAyfWA7XG4gICAgICAgIGlmIChobWF0Y2gpIHNwZWNzICs9IGAsdG9wPSR7KHdpbmRvdy5zY3JlZW4uaGVpZ2h0IC0gaG1hdGNoWzFdKSAvIDJ9YDtcblxuICAgICAgICBpZiAod21hdGNoICYmICFobWF0Y2gpIHtcbiAgICAgICAgICBzcGVjcyArPSBgLGhlaWdodD0ke3dtYXRjaFsxXX0sdG9wPSR7KHdpbmRvdy5zY3JlZW4uaGVpZ2h0IC0gd21hdGNoWzFdKSAvIDJ9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHcgPSB3aW5kb3cub3BlbihocmVmLCAnJywgc3BlY3MpO1xuICAgICAgICBjb25zdCB0ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIGlmICh3LmNsb3NlZCkge1xuICAgICAgICAgICAgZGlzcGF0Y2goJ2Nsb3NlJyk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgMTIwKTtcbiAgICAgIH0gZWxzZSB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZml4ZWRMb2NhdGlvbihocmVmLCAoKSA9PiB7XG4gICAgICBuYXZpZ2F0ZVRvKGZpeGVkSHJlZiB8fCAnLycsIHsgcmVsb2FkLCByZXBsYWNlIH0pO1xuICAgIH0sICgpID0+IGRpc3BhdGNoKCdjbGljaycsIGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUFuY2hvck9uQ2xpY2soZSkge1xuICAgIC8vIHVzZXIgdXNlZCBhIGtleWJvYXJkIHNob3J0Y3V0IHRvIGZvcmNlIG9wZW4gbGluayBpbiBhIG5ldyB0YWJcbiAgICBpZiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBlLmJ1dHRvbiAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgXG4gICAgaGFuZGxlT25DbGljayhlKTtcbiAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgYnV0dG9ufVxuICA8YnV0dG9uIHsuLi5maXhlZFByb3BzfSBiaW5kOnRoaXM9e3JlZn0gY2xhc3M9e2Nzc0NsYXNzfSB7dGl0bGV9IG9uOmNsaWNrPXtoYW5kbGVPbkNsaWNrfT5cbiAgICA8c2xvdCAvPlxuICA8L2J1dHRvbj5cbns6ZWxzZX1cbiAgPGEgey4uLmZpeGVkUHJvcHN9IGhyZWY9e2NsZWFuUGF0aChmaXhlZEhyZWYgfHwgaHJlZil9IGJpbmQ6dGhpcz17cmVmfSBjbGFzcz17Y3NzQ2xhc3N9IHt0aXRsZX0gb246Y2xpY2s9e2hhbmRsZUFuY2hvck9uQ2xpY2t9PlxuICAgIDxzbG90IC8+XG4gIDwvYT5cbnsvaWZ9XG4iLCAiPGgxPk5vdCBmb3VuZDwvaDE+XG4iLCAiPGgxPkhPTUU8L2gxPlxuIiwgIjxzY3JpcHQ+XG4gIGltcG9ydCB7IFJvdXRlciwgUm91dGUsIExpbmsgfSBmcm9tICd5cnYnO1xuXG4gIGltcG9ydCBOb3RGb3VuZCBmcm9tICcuL3BhZ2VzL05vdEZvdW5kLnN2ZWx0ZSc7XG4gIGltcG9ydCBIb21lIGZyb20gJy4vcGFnZXMvSG9tZS5zdmVsdGUnO1xuPC9zY3JpcHQ+XG5cbjxSb3V0ZXIgcGF0aD1cIi9hZG1pblwiPlxuICA8bmF2PlxuICAgIDxuYXY+XG4gICAgICA8TGluayBleGFjdCBocmVmPVwiL2FkbWluXCI+RGFzaGJvYXJkPC9MaW5rPlxuICAgICAgfCA8TGluayBleGFjdCBocmVmPVwiL2FkbWluL25vdC1mb3VuZFwiPlBhZ2Ugbm90IGZvdW5kPC9MaW5rPlxuICAgIDwvbmF2PlxuICA8L25hdj5cbiAgPG1haW4+XG4gICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgY29tcG9uZW50PXtIb21lfSAvPlxuICAgIDxSb3V0ZSBmYWxsYmFjayBjb21wb25lbnQ9e05vdEZvdW5kfSAvPlxuICA8L21haW4+XG48L1JvdXRlcj5cbiIsICJpbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9BcHAuc3ZlbHRlJztcblxubmV3IEFwcCh7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGFyZ2V0OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJyksXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICJBQUFBLFNBQVNBLEdBQU8sQ0FBRSxDQUVsQixTQUFTQyxFQUFPQyxFQUFLQyxFQUFLLENBRXRCLFFBQVdDLEtBQUtELEVBQ1pELEVBQUlFLENBQUMsRUFBSUQsRUFBSUMsQ0FBQyxFQUNsQixPQUFPRixDQUNYLENBV0EsU0FBU0csR0FBSUMsRUFBSSxDQUNiLE9BQU9BLEVBQUcsQ0FDZCxDQUNBLFNBQVNDLElBQWUsQ0FDcEIsT0FBTyxPQUFPLE9BQU8sSUFBSSxDQUM3QixDQUNBLFNBQVNDLEVBQVFDLEVBQUssQ0FDbEJBLEVBQUksUUFBUUosRUFBRyxDQUNuQixDQUNBLFNBQVNLLEdBQVlDLEVBQU8sQ0FDeEIsT0FBTyxPQUFPQSxHQUFVLFVB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LElBQUcsQ0FBSSxPQUFBTyxFQUFRLFFBQUFDLENBQU8sQ0FBQSxPQUN2Q0UsRUFBUyxRQUFTRyxDQUFDLFlBR3JCUSxFQUFvQlIsRUFBQyxDQUV4QkEsRUFBRSxTQUFXQSxFQUFFLFNBQVdBLEVBQUUsU0FBVyxHQUkzQ0QsRUFBY0MsQ0FBQyw0Q0FLa0JqQixFQUFHMEIscURBSTRCMUIsRUFBRzBCLHVYQWxGN0QsZUFBZSxLQUFLbkIsQ0FBSSxPQUM5QkgsRUFBWVgsRUFBVWtDLEdBQVUsRUFBSSxFQUFJbEMsRUFBVW1DLEVBQU8sV0FBVSxJQUFPckIsQ0FBSSxHQUFLQSxDQUFJLENBQUEscUJBR2xGUCxHQUFPNkIsRUFBUSxPQUNoQkMsR0FBU3ZCLEVBQU1zQixFQUFRLEtBQU1uQixDQUFLLEVBQy9CVCxTQUNIQSxFQUFTLEVBQUksRUFDYkQsRUFBSSxhQUFhLGVBQWdCLE1BQU0sRUFFbkNTLEdBQ0ZULEVBQUksYUFBYSxXQUFZLEVBQUksR0FHNUJDLFNBQ1RBLEVBQVMsRUFBSyxFQUNkRCxFQUFJLGdCQUFnQixVQUFVLEVBQzlCQSxFQUFJLGdCQUFnQixjQUFjLElBS3JDK0IsRUFBQSxFQUFFQyxFQUFhQyxHQUFTOUIsRUFBU1UsQ0FBUyxDQUFBLHNSQ2hEN0NxQixFQUFrQkMsRUFBQUMsRUFBQUMsQ0FBQSxrTENBbEJDLEVBQWFDLEVBQUFDLEVBQUFDLENBQUEsK0lDVW1CLFdBQVMsdUVBQ0csZ0JBQWMsOFNBSXJCQyxFQUFJLDJDQUNWQyxFQUFRLG9EQU5TO1NBQ3hDLHVGQUhOQyxFQUtNQyxFQUFBQyxFQUFBQyxDQUFBLEVBSkpDLEdBR01GLEVBQUFHLENBQUEsMkNBRVJMLEVBR09DLEVBQUFLLEVBQUFILENBQUEsNHVCQ2ZULElBQUlJLEdBQUksQ0FDTixPQUFRLFNBQVMsY0FBYyxNQUFNLENBQ3ZDLENBQUMiLAogICJuYW1lcyI6IFsibm9vcCIsICJhc3NpZ24iLCAidGFyIiwgInNyYyIsICJrIiwgInJ1biIsICJmbiIsICJibGFua19vYmplY3QiLCAicnVuX2FsbCIsICJmbnMiLCAiaXNfZnVuY3Rpb24iLCAidGhpbmciLCAic2FmZV9ub3RfZXF1YWwiLCAiYSIsICJiIiwgImlzX2VtcHR5IiwgIm9iaiIsICJzdWJzY3JpYmUiLCAic3RvcmUiLCAiY2FsbGJhY2tzIiwgIm5vb3AiLCAidW5zdWIiLCAiY29tcG9uZW50X3N1YnNjcmliZSIsICJjb21wb25lbnQiLCAic3RvcmUiLCAiY2FsbGJhY2siLCAic3Vic2NyaWJlIiwgImNyZWF0ZV9zbG90IiwgImRlZmluaXRpb24iLCAiY3R4IiwgIiQkc2NvcGUiLCAiZm4iLCAic2xvdF9jdHgiLCAiZ2V0X3Nsb3RfY29udGV4dCIsICJhc3NpZ24iLCAiZ2V0X3Nsb3RfY2hhbmdlcyIsICJkaXJ0eSIsICJsZXRzIiwgIm1lcmdlZCIsICJsZW4iLCAiaSIsICJ1cGRhdGVfc2xvdF9iYXNlIiwgInNsb3QiLCAic2xvdF9kZWZpbml0aW9uIiwgInNsb3RfY2hhbmdlcyIsICJnZXRfc2xvdF9jb250ZXh0X2ZuIiwgInNsb3RfY29udGV4dCIsICJnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUiLCAiJCRzY29wZSIsICJkaXJ0eSIsICJsZW5ndGgiLCAiaSIsICJleGNsdWRlX2ludGVybmFsX3Byb3BzIiwgInByb3BzIiwgInJlc3VsdCIsICJrIiwgImdsb2JhbHMiLCAiUmVzaXplT2JzZXJ2ZXJTaW5nbGV0b24iLCAiX1Jlc2l6ZU9ic2VydmVyU2luZ2xldG9uIiwgIm9wdGlvbnMiLCAiZWxlbWVudCIsICJsaXN0ZW5lciIsICJfYSIsICJlbnRyaWVzIiwgImVudHJ5IiwgImlzX2h5ZHJhdGluZyIsICJzdGFydF9oeWRyYXRpbmciLCAiZW5kX2h5ZHJhdGluZyIsICJhcHBlbmQiLCAidGFyZ2V0IiwgIm5vZGUiLCAiaW5zZXJ0IiwgInRhcmdldCIsICJub2RlIiwgImFuY2hvciIsICJkZXRhY2giLCAibm9kZSIsICJlbGVtZW50IiwgIm5hbWUiLCAidGV4dCIsICJkYXRhIiwgInNwYWNlIiwgImVtcHR5IiwgImxpc3RlbiIsICJub2RlIiwgImV2ZW50IiwgImhhbmRsZXIiLCAib3B0aW9ucyIsICJhdHRyIiwgIm5vZGUiLCAiYXR0cmlidXRlIiwgInZhbHVlIiwgImFsd2F5c19zZXRfdGhyb3VnaF9zZXRfYXR0cmlidXRlIiwgInNldF9hdHRyaWJ1dGVzIiwgImF0dHJpYnV0ZXMiLCAiZGVzY3JpcHRvcnMiLCAia2V5IiwgImNoaWxkcmVuIiwgImVsZW1lbnQiLCAic2V0X2RhdGEiLCAidGV4dCIsICJkYXRhIiwgImN1c3RvbV9ldmVudCIsICJ0eXBlIiwgImRldGFpbCIsICJidWJibGVzIiwgImNhbmNlbGFibGUiLCAiZSIsICJjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudCIsICJjb21wb25lbnQiLCAicHJvcHMiLCAiY3VycmVudF9jb21wb25lbnQiLCAic2V0X2N1cnJlbnRfY29tcG9uZW50IiwgImNvbXBvbmVudCIsICJnZXRfY3VycmVudF9jb21wb25lbnQiLCAib25Nb3VudCIsICJmbiIsICJnZXRfY3VycmVudF9jb21wb25lbnQiLCAib25EZXN0cm95IiwgImZuIiwgImdldF9jdXJyZW50X2NvbXBvbmVudCIsICJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCAiY29tcG9uZW50IiwgInR5cGUiLCAiZGV0YWlsIiwgImNhbmNlbGFibGUiLCAiY2FsbGJhY2tzIiwgImV2ZW50IiwgImN1c3RvbV9ldmVudCIsICJzZXRDb250ZXh0IiwgImtleSIsICJjb250ZXh0IiwgImdldENvbnRleHQiLCAiZGlydHlfY29tcG9uZW50cyIsICJiaW5kaW5nX2NhbGxiYWNrcyIsICJyZW5kZXJfY2FsbGJhY2tzIiwgImZsdXNoX2NhbGxiYWNrcyIsICJyZXNvbHZlZF9wcm9taXNlIiwgInVwZGF0ZV9zY2hlZHVsZWQiLCAic2NoZWR1bGVfdXBkYXRlIiwgImZsdXNoIiwgImFkZF9yZW5kZXJfY2FsbGJhY2siLCAiZm4iLCAicmVuZGVyX2NhbGxiYWNrcyIsICJzZWVuX2NhbGxiYWNrcyIsICJmbHVzaGlkeCIsICJmbHVzaCIsICJzYXZlZF9jb21wb25lbnQiLCAiY3VycmVudF9jb21wb25lbnQiLCAiZGlydHlfY29tcG9uZW50cyIsICJjb21wb25lbnQiLCAic2V0X2N1cnJlbnRfY29tcG9uZW50IiwgInVwZGF0ZSIsICJlIiwgImJpbmRpbmdfY2FsbGJhY2tzIiwgImkiLCAicmVuZGVyX2NhbGxiYWNrcyIsICJjYWxsYmFjayIsICJmbHVzaF9jYWxsYmFja3MiLCAidXBkYXRlX3NjaGVkdWxlZCIsICIkJCIsICJydW5fYWxsIiwgImRpcnR5IiwgImFkZF9yZW5kZXJfY2FsbGJhY2siLCAiZmx1c2hfcmVuZGVyX2NhbGxiYWNrcyIsICJmbnMiLCAiZmlsdGVyZWQiLCAidGFyZ2V0cyIsICJjIiwgIm91dHJvaW5nIiwgIm91dHJvcyIsICJncm91cF9vdXRyb3MiLCAiY2hlY2tfb3V0cm9zIiwgInJ1bl9hbGwiLCAidHJhbnNpdGlvbl9pbiIsICJibG9jayIsICJsb2NhbCIsICJ0cmFuc2l0aW9uX291dCIsICJkZXRhY2giLCAiY2FsbGJhY2siLCAiZ2V0X3NwcmVhZF91cGRhdGUiLCAibGV2ZWxzIiwgInVwZGF0ZXMiLCAidXBkYXRlIiwgInRvX251bGxfb3V0IiwgImFjY291bnRlZF9mb3IiLCAiaSIsICJvIiwgIm4iLCAia2V5IiwgImdldF9zcHJlYWRfb2JqZWN0IiwgInNwcmVhZF9wcm9wcyIsICJfYm9vbGVhbl9hdHRyaWJ1dGVzIiwgImJvb2xlYW5fYXR0cmlidXRlcyIsICJjcmVhdGVfY29tcG9uZW50IiwgImJsb2NrIiwgIm1vdW50X2NvbXBvbmVudCIsICJjb21wb25lbnQiLCAidGFyZ2V0IiwgImFuY2hvciIsICJjdXN0b21FbGVtZW50IiwgImZyYWdtZW50IiwgImFmdGVyX3VwZGF0ZSIsICJhZGRfcmVuZGVyX2NhbGxiYWNrIiwgIm5ld19vbl9kZXN0cm95IiwgInJ1biIsICJpc19mdW5jdGlvbiIsICJydW5fYWxsIiwgImRlc3Ryb3lfY29tcG9uZW50IiwgImRldGFjaGluZyIsICIkJCIsICJmbHVzaF9yZW5kZXJfY2FsbGJhY2tzIiwgIm1ha2VfZGlydHkiLCAiaSIsICJkaXJ0eV9jb21wb25lbnRzIiwgInNjaGVkdWxlX3VwZGF0ZSIsICJpbml0IiwgIm9wdGlvbnMiLCAiaW5zdGFuY2UiLCAiY3JlYXRlX2ZyYWdtZW50IiwgIm5vdF9lcXVhbCIsICJwcm9wcyIsICJhcHBlbmRfc3R5bGVzIiwgImRpcnR5IiwgInBhcmVudF9jb21wb25lbnQiLCAiY3VycmVudF9jb21wb25lbnQiLCAic2V0X2N1cnJlbnRfY29tcG9uZW50IiwgIm5vb3AiLCAiYmxhbmtfb2JqZWN0IiwgInJlYWR5IiwgInJldCIsICJyZXN0IiwgInZhbHVlIiwgInN0YXJ0X2h5ZHJhdGluZyIsICJub2RlcyIsICJjaGlsZHJlbiIsICJkZXRhY2giLCAidHJhbnNpdGlvbl9pbiIsICJlbmRfaHlkcmF0aW5nIiwgImZsdXNoIiwgIlN2ZWx0ZUVsZW1lbnQiLCAib25fbW91bnQiLCAia2V5IiwgImF0dHIiLCAiX29sZFZhbHVlIiwgIm5ld1ZhbHVlIiwgInR5cGUiLCAiY2FsbGJhY2siLCAiY2FsbGJhY2tzIiwgImluZGV4IiwgIiQkcHJvcHMiLCAiaXNfZW1wdHkiLCAiU3ZlbHRlQ29tcG9uZW50IiwgInN1YnNjcmliZXJfcXVldWUiLCAid3JpdGFibGUiLCAidmFsdWUiLCAic3RhcnQiLCAibm9vcCIsICJzdG9wIiwgInN1YnNjcmliZXJzIiwgInNldCIsICJuZXdfdmFsdWUiLCAic2FmZV9ub3RfZXF1YWwiLCAicnVuX3F1ZXVlIiwgInN1YnNjcmliZXJfcXVldWUiLCAic3Vic2NyaWJlciIsICJpIiwgInVwZGF0ZSIsICJmbiIsICJzdWJzY3JpYmUiLCAicnVuIiwgImludmFsaWRhdGUiLCAicnIiLCAiRSIsICJlciIsICJ0ciIsICJuciIsICJhciIsICJGIiwgInIiLCAiZSIsICJjciIsICJ0IiwgIm4iLCAiYSIsICJpciIsICJrIiwgInZyIiwgIkEiLCAiVSIsICJiciIsICJSIiwgIiQiLCAiQyIsICJOIiwgIngiLCAic3IiLCAiZnIiLCAiaSIsICJjIiwgIlQiLCAianIiLCAicSIsICJJIiwgIlNyIiwgIkQiLCAiUSIsICJvIiwgInVyIiwgImxyIiwgIkIiLCAib3IiLCAiZHIiLCAiaHIiLCAibCIsICJnciIsICJnIiwgInMiLCAiZiIsICJMIiwgIkgiLCAiSiIsICJ5ciIsICJQIiwgIk0iLCAiViIsICJYIiwgInciLCAiRyIsICJkIiwgInUiLCAibSIsICJ5IiwgIk8iLCAiaiIsICJLIiwgImIiLCAibXIiLCAicCIsICJfIiwgIlkiLCAidiIsICJaIiwgImgiLCAiUyIsICJ6IiwgInByIiwgIkZyIiwgIlciLCAid3IiLCAiZXhwb3J0X3BhcnNlIiwgImV4cG9ydF9zdHJpbmdpZnkiLCAiY2FjaGUiLCAiYmFzZVRhZyIsICJiYXNlUHJlZml4IiwgIlJPT1RfVVJMIiwgInJvdXRlciIsICJ3cml0YWJsZSIsICJDVFhfUk9VVEVSIiwgIkNUWF9ST1VURSIsICJIQVNIQ0hBTkdFIiwgImhhc2hjaGFuZ2VFbmFibGUiLCAidmFsdWUiLCAiZml4ZWRMb2NhdGlvbiIsICJwYXRoIiwgImNhbGxiYWNrIiwgImRvRmluYWxseSIsICJiYXNlVXJpIiwgImNsZWFuUGF0aCIsICJ1cmkiLCAiZml4IiwgIm5hdmlnYXRlVG8iLCAib3B0aW9ucyIsICJyZWxvYWQiLCAicmVwbGFjZSIsICJwYXJhbXMiLCAicXVlcnlQYXJhbXMiLCAiXyIsICJrZXkiLCAicXMiLCAiZXhwb3J0X3N0cmluZ2lmeSIsICJmaXhlZFVSTCIsICJuZXh0VVJMIiwgImdldFByb3BzIiwgImdpdmVuIiwgInJlcXVpcmVkIiwgInN1YiIsICJvdGhlcnMiLCAiayIsICJpc0FjdGl2ZSIsICJleGFjdCIsICJ3ciIsICJpc1Byb21pc2UiLCAib2JqZWN0IiwgImlzU3ZlbHRlQ29tcG9uZW50IiwgImJhc2VSb3V0ZXIiLCAid3IiLCAicm91dGVJbmZvIiwgIndyaXRhYmxlIiwgIm9uRXJyb3IiLCAic2hhcmVkIiwgImVycm9ycyIsICJyb3V0ZXJzIiwgImludGVydmFsIiwgImN1cnJlbnRVUkwiLCAicm91dGVyIiwgInZhbHVlIiwgImRvRmFsbGJhY2siLCAiZmFpbHVyZSIsICJmYWxsYmFjayIsICJkZWZhdWx0cyIsICJoYW5kbGVSb3V0ZXMiLCAibWFwIiwgInBhcmFtcyIsICJlbmZvcmNlIiwgIngiLCAibmF2aWdhdGVUbyIsICJldnRIYW5kbGVyIiwgImJhc2VVcmkiLCAiUk9PVF9VUkwiLCAiY2xlYW5QYXRoIiwgIm5vcm1hbGl6ZWRVUkwiLCAicGF0aCIsICJxcyIsICJmdWxscGF0aCIsICJleHBvcnRfcGFyc2UiLCAiZXJyIiwgInJlc3VsdCIsICJjYiIsICJyb290IiwgImlzQWN0aXZlIiwgImZuIiwgImZpbmRSb3V0ZXMiLCAiYWRkUm91dGVyIiwgImNhbGxiYWNrIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAidW5hc3NpZ25Sb3V0ZSIsICJyb3V0ZSIsICJiYXNlUm91dGVyIiwgImZpbmRSb3V0ZXMiLCAiY2xlYW51cCIsICJmYWlsdXJlIiwgImZhbGxiYWNrIiwgImtleSIsICIkJHByb3BzIiwgInBhdGgiLCAicGVuZGluZyIsICJkaXNhYmxlZCIsICJjb25kaXRpb24iLCAicm91dGVyQ29udGV4dCIsICJnZXRDb250ZXh0IiwgIkNUWF9ST1VURVIiLCAiYmFzZVBhdGgiLCAid3JpdGFibGUiLCAiZml4ZWRSb290IiwgIiRiYXNlUGF0aCIsICJhc3NpZ25Sb3V0ZSIsICJfa2V5IiwgImRldGFpbCIsICIka2V5IiwgImhhbmRsZXIiLCAiZnVsbHBhdGgiLCAib25FcnJvciIsICJlcnIiLCAiZG9GYWxsYmFjayIsICJvbk1vdW50IiwgImFkZFJvdXRlciIsICJvbkRlc3Ryb3kiLCAic2V0Q29udGV4dCIsICIkcm91dGVyIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJpc1N2ZWx0ZUNvbXBvbmVudCIsICJzZXRfZGF0YSIsICJ0IiwgInRfdmFsdWUiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImtleSIsICIkJHByb3BzIiwgInBhdGgiLCAiZXhhY3QiLCAicGVuZGluZyIsICJkaXNhYmxlZCIsICJmYWxsYmFjayIsICJjb21wb25lbnQiLCAiY29uZGl0aW9uIiwgInJlZGlyZWN0IiwgInRoaXNQcm9wcyIsICJyb3V0ZUNvbnRleHQiLCAiZ2V0Q29udGV4dCIsICJDVFhfUk9VVEUiLCAicm91dGVyQ29udGV4dCIsICJDVFhfUk9VVEVSIiwgImFzc2lnblJvdXRlIiwgInVuYXNzaWduUm91dGUiLCAicGVuZGluZ0NvbXBvbmVudCIsICJyb3V0ZVBhdGgiLCAid3JpdGFibGUiLCAiYWN0aXZlUm91dGVyIiwgImFjdGl2ZVByb3BzIiwgImZ1bGxwYXRoIiwgImhhc0xvYWRlZCIsICJmaXhlZFJvb3QiLCAiJHJvdXRlUGF0aCIsICJyZXNvbHZlIiwgImZpeGVkUm91dGUiLCAib25EZXN0cm95IiwgInNldENvbnRleHQiLCAiJHJvdXRlSW5mbyIsICJnZXRQcm9wcyIsICJrIiwgIiRyb3V0ZXIiLCAiaXNQcm9taXNlIiwgIm1vZHVsZSIsICJjdHgiLCAiY2xlYW5QYXRoIiwgImluc2VydCIsICJ0YXJnZXQiLCAiYSIsICJhbmNob3IiLCAiYV9ocmVmX3ZhbHVlIiwgImJ1dHRvbl8xIiwgInJlZiIsICJhY3RpdmUiLCAiY3NzQ2xhc3MiLCAiJCRwcm9wcyIsICJmaXhlZEhyZWYiLCAiZ28iLCAib3BlbiIsICJocmVmIiwgInRpdGxlIiwgImJ1dHRvbiIsICJleGFjdCIsICJyZWxvYWQiLCAicmVwbGFjZSIsICJ0aGlzUHJvcHMiLCAiZGlzcGF0Y2giLCAiY3JlYXRlRXZlbnREaXNwYXRjaGVyIiwgImhhbmRsZU9uQ2xpY2siLCAiZSIsICJzcGVjcyIsICJ3bWF0Y2giLCAiaG1hdGNoIiwgInciLCAidCIsICJmaXhlZExvY2F0aW9uIiwgIm5hdmlnYXRlVG8iLCAiaGFuZGxlQW5jaG9yT25DbGljayIsICIkJHZhbHVlIiwgIlJPT1RfVVJMIiwgInJvdXRlciIsICIkcm91dGVyIiwgImlzQWN0aXZlIiwgIiQkaW52YWxpZGF0ZSIsICJmaXhlZFByb3BzIiwgImdldFByb3BzIiwgImluc2VydCIsICJ0YXJnZXQiLCAiaDEiLCAiYW5jaG9yIiwgImluc2VydCIsICJ0YXJnZXQiLCAiaDEiLCAiYW5jaG9yIiwgIkhvbWVfZGVmYXVsdCIsICJOb3RGb3VuZF9kZWZhdWx0IiwgImluc2VydCIsICJ0YXJnZXQiLCAibmF2MSIsICJhbmNob3IiLCAiYXBwZW5kIiwgIm5hdjAiLCAibWFpbiIsICJBcHBfZGVmYXVsdCJdCn0K
